function Ide3Logic(gUserId, browser, translate) {

var IDE = "ide"

var MinSplitter = 30
var ProjectsPath = "/" + IDE + "/spaces"

var globs = null
var AppName = "DrakonHub"

var PollInterval = 1
var MaxSaveItems = 30
var DarkBackground = "#455A64"

var AddUserMs = 300

// Autogenerated with DRAKON Editor 1.32


function AccessShower_AccessScreen_addUser(self, data) {
    // item 5551
    self.role = data
    // item 5639
    var machine = new UserAdder()
    machine.target = self
    // item 5559
    machine.existing = Utils.copyObject(
        self.access.roles[data]
    )
    // item 5554
    browser.showAddUserScreen(
        machine
    )
    // item 5459
    self.state = "AddingUser";
}

function AccessShower_AccessScreen_cancel(self, data) {
    // item 5497
    browser.hideCentral()
    // item 5493
    complete(self, data)
    // item 5495
    self.state = null;
}

function AccessShower_AccessScreen_onData(self, data) {
    // item 5481
    var admins = Object.keys(
        self.access.roles.admin
    )
    // item 5482
    if (admins.length == 0) {
        // item 5487
        browser.setAccessError(
            translate("ERR_NO_ADMINS")
        )
        // item 5486
        self.state = "AccessScreen";
    } else {
        // item 5483
        var change = buildAccessChange(
            self.oldAccess,
            self.access
        )
        // item 5484
        if (change) {
            // item 5492
            browser.showWorking()
            // item 4237
            browser.sendPost(
            	"/api/multi_access",
            	change,
            	self
            )
            // item 4231
            self.state = "SavingAccess";
        } else {
            // item 5490
            browser.hideCentral()
            // item 5489
            complete(self, data)
            // item 5491
            self.state = null;
        }
    }
}

function AccessShower_AccessScreen_onError(self, data) {
    // item 4235
    forwardError(self, data)
    // item 4230
    self.state = null;
}

function AccessShower_AccessScreen_removeUser(self, data) {
    // item 5557
    self.access.remove(
        data.role,
        data.user
    )
    // item 5558
    self.state = "AccessScreen";
}

function AccessShower_AccessScreen_togglePublic(self, data) {
    // item 5540
    var old = self.access.isPublic
    self.access.isPublic = !old
    self.access.setPublicAccess = true
    // item 5541
    self.state = "AccessScreen";
}

function AccessShower_AddingUser_cancel(self, data) {
    // item 5552
    browser.showAccessScreen(
        self.access,
        null
    )
    // item 5550
    self.state = "AccessScreen";
}

function AccessShower_AddingUser_onData(self, data) {
    // item 5553
    self.access.add(
        self.role,
        data
    )
    // item 5552
    browser.showAccessScreen(
        self.access,
        null
    )
    // item 5550
    self.state = "AccessScreen";
}

function AccessShower_GettingAccess_onData(self, data) {
    // item 4191
    browser.hideWorking()
    // item 4219
    self.access = createAccess(
        self.spaceId,
        data
    )
    // item 5463
    self.oldAccess = Utils.copyObjectDeep(
        self.access
    )
    // item 4221
    browser.showAccessScreen(
        self.access,
        self
    )
    // item 4185
    self.state = "AccessScreen";
}

function AccessShower_GettingAccess_onError(self, data) {
    // item 4222
    forwardError(self, data)
    // item 4184
    self.state = null;
}

function AccessShower_SavingAccess_onData(self, data) {
    // item 4247
    browser.hideWorking()
    // item 4248
    browser.hideCentral()
    // item 4282
    saveAccessData(
        self.access
    )
    // item 4223
    complete(self, data)
    // item 4176
    self.state = null;
}

function AccessShower_SavingAccess_onError(self, data) {
    // item 4240
    browser.hideWorking()
    // item 4241
    browser.hideCentral()
    // item 4242
    if ((data.error == "ERR_USER_LIMIT") && (data.suggested)) {
        // item 4246
        browser.suggest(
            data.error,
            data.suggested,
            "access"
        )
    } else {
        // item 4244
        panic(data)
    }
    // item 4175
    self.state = "AccessScreen";
}

function AccessShower_Start_onData(self, data) {
    // item 4187
    self.spaceId = data
    // item 4189
    var url = "/api/access/" + 
     self.spaceId
    // item 4190
    browser.showWorking()
    // item 4188
    browser.sendGet(
        url,
        self
    )
    // item 4162
    self.state = "GettingAccess";
}

function AccessShower_Start_onError(self, data) {
    // item 4168
    self.state = null;
}

function DashboardShower_GettingProjects_onData(self, data) {
    // item 6798
    showDashboard()
    // item 6797
    complete(self, data)
    // item 6794
    self.state = null;
}

function DashboardShower_GettingProjects_onError(self, data) {
    // item 6796
    forwardError(self, data)
    // item 6793
    self.state = null;
}

function DashboardShower_Start_onData(self, data) {
    // item 6795
    startMachine(
        new SpacesLoader(),
        null,
        self
    )
    // item 6780
    self.state = "GettingProjects";
}

function DashboardShower_Start_onError(self, data) {
    // item 6786
    self.state = null;
}

function DescriptionChanger_GetFolder_onData(self, data) {
    var parsed
    // item 3886
    self.id = data
    // item 3919
    parsed = parseId(self.id)
    self.folderId = parsed.folderId
    self.spaceId = parsed.spaceId
    // item 3928
    var payload = {
        id : self.id,
        src : "DescriptionChanger"
    }
    // item 3887
    browser.showWorking()
    // item 3908
    startMachine(
        new FolderGetter(),
        payload,
        self
    )
    // item 3848
    self.state = "ShowDialog";
}

function DescriptionChanger_GetFolder_onError(self, data) {
    // item 3872
    self.state = null;
}

function DescriptionChanger_Saving_onData(self, data) {
    // item 3896
    browser.hideWorking()
    // item 3917
    browser.hideInputBox()
    // item 3913
    complete(self, null)
    // item 3866
    self.state = null;
}

function DescriptionChanger_Saving_onError(self, data) {
    // item 3918
    browser.hideWorking()
    // item 3916
    var message = makeErrorMessage(
        data
    )
    // item 3915
    browser.setInputBoxError(
        message
    )
    // item 3895
    self.state = "UserInput";
}

function DescriptionChanger_ShowDialog_onData(self, data) {
    // item 3888
    browser.hideWorking()
    // item 3903
    var old = data.description || ""
    var title = translate("MES_EDIT_DESCRIPTION")
    // item 3904
    if (self.folderId == "1") {
        // item 3907
        title += (": " + self.spaceId)
    }
    // item 3874
    var onSave = function(desc) {
        self.onData(desc)
    }
    // item 3909
    browser.showInputBox(
        true,
        title,
        old,
        onSave,
        null,
        false
    )
    // item 3851
    self.state = "UserInput";
}

function DescriptionChanger_ShowDialog_onError(self, data) {
    // item 3911
    forwardError(self, data)
    // item 3877
    self.state = null;
}

function DescriptionChanger_UserInput_onData(self, data) {
    // item 3927
    browser.showWorking()
    // item 3890
    var url = "/api/folder/" +
     self.spaceId + "/" + self.folderId
    // item 3891
    var payload = {
        description : data
    }
    // item 3892
    browser.sendPut(
        url,
        payload,
        self
    )
    // item 3880
    self.state = "Saving";
}

function DescriptionChanger_UserInput_onError(self, data) {
    // item 3912
    forwardError(self, data)
    // item 3894
    self.state = null;
}

function DiagramCreator_ChooseDiagramType_cancel(self, data) {
    // item 5457
    browser.hideCentral()
    // item 5453
    complete(self, data)
    // item 5455
    self.state = null;
}

function DiagramCreator_ChooseDiagramType_onData(self, data) {
    // item 2917
    self.diagramType = data
    // item 2919
    var onSave = function(text) {
        self.onData(text)
    }
    // item 2933
    browser.hideCentral()
    // item 2921
    browser.showInputBox(
        true,
        translate("MES_CREATE_DIAGRAM"),
        "",
        onSave,
        validateFolderName,
        true
    )
    // item 2913
    self.state = "EnterName";
}

function DiagramCreator_ChooseDiagramType_onError(self, data) {
    // item 2914
    forwardError(self, data)
    // item 2912
    self.state = null;
}

function DiagramCreator_Done_onData(self, data) {
    // item 2897
    complete(self, data)
    // item 2889
    self.state = null;
}

function DiagramCreator_Done_onError(self, data) {
    // item 2890
    forwardError(self, data)
    // item 2888
    self.state = null;
}

function DiagramCreator_EnterName_onData(self, data) {
    // item 2957
    browser.hideInputBox()
    // item 2960
    browser.showWorking()
    // item 2958
    sendCreateFolder(
        self.spaceId,
        self.parentFolder,
        self.diagramType,
        data,
        self
    )
    // item 2953
    self.state = "SendToServer";
}

function DiagramCreator_EnterName_onError(self, data) {
    // item 2954
    forwardError(self, data)
    // item 2952
    self.state = null;
}

function DiagramCreator_SendToServer_onData(self, data) {
    // item 2974
    var onDone = function() {
        self.onData(null)
    }
    // item 2978
    var id = makeId(
        self.spaceId,
        data.folder_id
    )
    // item 2975
    goToFolder(
        id,
        onDone
    )
    // item 2970
    self.state = "Done";
}

function DiagramCreator_SendToServer_onError(self, data) {
    // item 4457
    browser.hideWorking()
    // item 4250
    if ((data.error == "ERR_DIAGRAM_LIMIT") && (data.suggested)) {
        // item 4256
        complete(self, data)
        // item 4254
        browser.suggest(
            data.error,
            data.suggested,
            "createDiagram"
        )
    } else {
        // item 2979
        forwardError(self, data)
    }
    // item 2969
    self.state = null;
}

function DiagramCreator_Start_onData(self, data) {
    // item 2891
    self.parentId = data
    // item 2976
    var parsed = parseId(
        self.parentId
    )
    // item 2977
    self.spaceId = parsed.spaceId
    self.parentFolder = parsed.folderId
    // item 2902
    browser.showChooseTypeDialog(
        self
    )
    // item 2875
    self.state = "ChooseDiagramType";
}

function DiagramCreator_Start_onError(self, data) {
    // item 2881
    self.state = null;
}

function DiagramSearch_Folders_onData(self, data) {
    // item 6282
    var found = {
        folders : data.folders.map(toFoundFolder),
        completed : false
    }
    // item 6268
    browser.addToSearchList(
        found
    )
    // item 6461
    startSearchItems(
        self.input,
        self
    )
    // item 6131
    self.state = "ItemsPause";
}

function DiagramSearch_Folders_onError(self, data) {
    // item 6642
    browser.cancelSearch()
    // item 6145
    self.state = null;
}

function DiagramSearch_ItemsPause_onData(self, data) {
    // item 6483
    sendGetSearch(
        self
    )
    // item 6487
    self.state = "Items";
}

function DiagramSearch_ItemsPause_onError(self, data) {
    // item 6643
    browser.cancelSearch()
    // item 6467
    self.state = null;
}

function DiagramSearch_Items_onData(self, data) {
    // item 6450
    var found = {
        allItems : toAllItems(data, self.input),
        completed : data.completed
    }
    // item 6449
    browser.addToSearchList(
        found
    )
    // item 6488
    if (data.completed) {
        // item 6448
        self.state = null;
    } else {
        // item 6491
        scheduleNextStateAfter(
            self,
            null,
            Config.SEARCH_PERIOD
        )
        // item 6490
        self.state = "ItemsPause";
    }
}

function DiagramSearch_Items_onError(self, data) {
    // item 6644
    browser.cancelSearch()
    // item 6444
    self.state = null;
}

function DiagramSearch_Start_default(self, data) {
    // item 6276
    self.state = "Start";
}

function DiagramSearch_Start_onData(self, data) {
    // item 6278
    startSearchFolders(
        self.input,
        self
    )
    // item 6271
    self.state = "Folders";
}

function DrakonRenamer_GetFolder_default(self, data) {
    // item 3669
    self.state = "GetFolder";
}

function DrakonRenamer_GetFolder_onData(self, data) {
    // item 3670
    self.data = data
    // item 3709
    var payload = {
        id : data.id,
        src : "DrakonRenamer"
    }
    // item 3671
    startMachine(
        new FolderGetter(),
        payload,
        self
    )
    // item 3658
    self.state = "GettingFolder";
}

function DrakonRenamer_GettingFolder_onData(self, data) {
    // item 3687
    var change = browser.getEditor().renameDiagram(
        data,
        self.data.name
    )
    // item 3688
    saveChange(
        self.data.spaceId,
        self.data.folderId,
        change,
        self
    )
    // item 3661
    self.state = "SavingChanges";
}

function DrakonRenamer_GettingFolder_onError(self, data) {
    // item 3710
    forwardError(self, data)
    // item 3677
    self.state = null;
}

function DrakonRenamer_Reloaded_onData(self, data) {
    // item 3712
    complete(self, data)
    // item 3694
    self.state = null;
}

function DrakonRenamer_Reloaded_onError(self, data) {
    // item 3714
    forwardError(self, data)
    // item 3700
    self.state = null;
}

function DrakonRenamer_SavingChanges_onData(self, data) {
    // item 3703
    if (globs.current.id == self.data.id) {
        // item 3708
        cancelPolling()
        // item 3715
        globs.saver = null
        // item 3706
        startMachine(
            new FolderShower(),
            self.data.id,
            self
        )
        // item 3705
        self.state = "Reloaded";
    } else {
        // item 3711
        complete(self, data)
        // item 3680
        self.state = null;
    }
}

function DrakonRenamer_SavingChanges_onError(self, data) {
    // item 3713
    forwardError(self, data)
    // item 3686
    self.state = null;
}

function DullSearch_Dummy_onInput(self, data) {
    // item 6157
    self.state = "Start";
}

function DullSearch_Dummy_stop(self, data) {
    // item 6171
    self.state = "Start";
}

function DullSearch_Start_dummy(self, data) {
    // item 6170
    self.state = "Dummy";
}

function DullSearch_Start_onInput(self, data) {
    // item 6346
    self.widgetId = data.widgetId
    // item 6344
    var defs = [
    	{
    		id: "folders",
    		name: translate("MES_FOLDERS"),
    		items: []
    	}
    ]
    // item 6347
    var start = {
    	folders: spacesSearchItems(data.input),
    	completed: true
    }
    // item 6345
    browser.createSearchList(
    	self.widgetId,
    	defs,
    	start
    )
    // item 6154
    self.state = "Start";
}

function DullSearch_Start_stop(self, data) {
    // item 6350
    self.state = null;
}

function FolderCreator_Done_onData(self, data) {
    // item 3019
    complete(self, data)
    // item 3016
    self.state = null;
}

function FolderCreator_Done_onError(self, data) {
    // item 3017
    forwardError(self, data)
    // item 3015
    self.state = null;
}

function FolderCreator_EnterName_onData(self, data) {
    // item 3045
    browser.hideInputBox()
    // item 3048
    browser.showWorking()
    // item 3046
    sendCreateFolder(
        self.spaceId,
        self.parentFolder,
        "folder",
        data,
        self
    )
    // item 3042
    self.state = "Expand";
}

function FolderCreator_EnterName_onError(self, data) {
    // item 3043
    forwardError(self, data)
    // item 3041
    self.state = null;
}

function FolderCreator_Expand_onData(self, data) {
    var machine, start
    // item 7194
    machine = new TreeNodeExpander()
    // item 7195
    start = {
        rowId : self.parentId
    }
    // item 7193
    startMachine(
        machine,
        start,
        self
    )
    // item 7202
    self.state = "RefreshParent";
}

function FolderCreator_Expand_onError(self, data) {
    // item 7206
    forwardError(self, data)
    // item 7201
    self.state = null;
}

function FolderCreator_RefreshParent_onData(self, data) {
    // item 3058
    var onDone = function() {
        self.onData(null)
    }
    // item 7208
    getWidget("tree").expand(
        self.parentId
    )
    // item 3059
    goToFolder(
        self.parentId,
        onDone
    )
    // item 3056
    self.state = "Done";
}

function FolderCreator_RefreshParent_onError(self, data) {
    // item 3063
    forwardError(self, data)
    // item 3055
    self.state = null;
}

function FolderCreator_Start_onData(self, data) {
    // item 3018
    self.parentId = data
    // item 3060
    var parsed = parseId(
        self.parentId
    )
    // item 3061
    self.spaceId = parsed.spaceId
    self.parentFolder = parsed.folderId
    // item 3032
    var onSave = function(text) {
        self.onData(text)
    }
    // item 3033
    browser.showInputBox(
        true,
        translate("MES_CREATE_FOLDER"),
        "",
        onSave,
        validateFolderName,
        true
    )
    // item 3002
    self.state = "EnterName";
}

function FolderCreator_Start_onError(self, data) {
    // item 3008
    self.state = null;
}

function FolderCutterDeleter_GettingHistory_onData(self, data) {
    // item 3442
    var currentDeleted = deleteFoldersFromUi(
        self.folders
    )
    // item 3438
    if (currentDeleted) {
        // item 3445
        goToFolder(
            self.parentId,
            self.onData
        )
    } else {
        // item 3444
        scheduleNextState(
            self,
            null
        )
    }
    // item 3389
    self.state = "Reloading";
}

function FolderCutterDeleter_GettingHistory_onError(self, data) {
    // item 3417
    forwardError(self, data)
    // item 3401
    self.state = null;
}

function FolderCutterDeleter_Reloading_onData(self, data) {
    // item 3416
    complete(self, null)
    // item 3413
    self.state = null;
}

function FolderCutterDeleter_Reloading_onError(self, data) {
    // item 3415
    forwardError(self, data)
    // item 3412
    self.state = null;
}

function FolderCutterDeleter_RunningOperation_onData(self, data) {
    // item 4119
    startMachine(
        new RecentGetter(),
        null,
        self
    )
    // item 4111
    self.state = "GettingHistory";
}

function FolderCutterDeleter_RunningOperation_onError(self, data) {
    // item 4117
    forwardError(self, data)
    // item 4118
    self.state = null;
}

function FolderCutterDeleter_Start_onData(self, data) {
    // item 3432
    self.folders = data.folders
    self.parentId = data.parentId
    // item 3429
    if (data.cut) {
        // item 3433
        globs.clipboard.copyToClipboard(
            "cut-folders",
            data.folders
        )
        // item 3434
        scheduleNextState(
            self,
            null
        )
    } else {
        // item 3447
        sendDelete(
            data.folders,
            self
        )
    }
    // item 3383
    self.state = "RunningOperation";
}

function FolderCutterDeleter_Start_onError(self, data) {
    // item 3395
    self.state = "Start";
}

function FolderGetter_GettingFolder_onData(self, data) {
    // item 627
    CallTrace.add(
        "on folder data",
        [self.id, self.src]
    )
    // item 3530
    addToCache(self.id, data, null)
    // item 3716
    if (self.ids.folderId == "1") {
        
    } else {
        // item 3649
        renameEverywhere(
            self.id,
            data.name
        )
    }
    // item 629
    complete(self, data)
    // item 604
    self.state = null;
}

function FolderGetter_GettingFolder_onError(self, data) {
    // item 607
    forwardError(self, data)
    // item 603
    self.state = null;
}

function FolderGetter_Start_onData(self, data) {
    // item 622
    self.id = data.id
    self.src = data.src
    // item 625
    self.ids = parseId(self.id)
    // item 623
    var url = "/api/visit/" + 
     self.ids.spaceId + "/" + 
     self.ids.folderId
    // item 626
    browser.sendGet(url, self)
    // item 589
    self.state = "GettingFolder";
}

function FolderGetter_Start_onError(self, data) {
    // item 595
    self.state = null;
}

function FolderShower_GettingFolder_onData(self, data) {
    // item 1257
    showFolderCommon(
        self.id,
        data
    )
    // item 1251
    if (globs.current.type == "folder") {
        // item 1728
        setActiveScreen(
            "middle_folder",
            data.access
        )
        // item 1255
        showFolderInGrid(data)
        // item 1254
        complete(self, data)
        // item 1253
        self.state = null;
    } else {
        // item 1260
        addToRecent(self.id, data.name, data.type)
        self.diagram = data
        // item 1657
        if (gUserId) {
            // item 1656
            requestTheme(self)
        } else {
            // item 1659
            scheduleNextState(
            	self,
            	null
            )
        }
        // item 1232
        self.state = "GettingTheme";
    }
}

function FolderShower_GettingFolder_onError(self, data) {
    // item 1261
    forwardError(self, data)
    // item 1231
    self.state = null;
}

function FolderShower_GettingTheme_onData(self, data) {
    // item 1735
    if (data) {
        // item 1734
        getEditor().setUserSettings(data)
    }
    // item 1740
    startMachine(
    	new FontLoadingMachine(),
    	self.diagram,
    	self
    )
    // item 1750
    self.state = "LoadingFonts";
}

function FolderShower_GettingTheme_onError(self, data) {
    // item 1739
    forwardError(self, data)
    // item 1738
    self.state = null;
}

function FolderShower_LoadingFonts_onData(self, data) {
    // item 1827
    setTag(self.diagram)
    // item 1826
    globs.saver = createSaver(self.diagram.tag)
    // item 6891
    getEditor().resetMode()
    // item 1828
    setActiveScreen(
        "middle_diagram",
        self.diagram.access
    )
    // item 6948
    setDiagram(self)
    // item 1825
    globs.saver.loaded(self.diagram)
    // item 1233
    complete(self, self.diagram)
    // item 1241
    self.state = null;
}

function FolderShower_LoadingFonts_onError(self, data) {
    // item 1752
    forwardError(self, data)
    // item 1751
    self.state = null;
}

function FolderShower_Start_onData(self, data) {
    // item 1256
    self.id = data
    // item 1247
    var getArgs = {
        id : self.id,
        src : "FolderShower"
    }
    // item 1248
    startMachine(
        new FolderGetter(),
        getArgs,
        self
    )
    // item 1218
    self.state = "GettingFolder";
}

function FolderShower_Start_onError(self, data) {
    // item 1224
    self.state = null;
}

function FontLoadingMachine_OnFont_onData(self, data) {
    // item 1788
    if (hasMoreFontsToLoad(self)) {
        // item 1785
        loadNextFont(self)
        // item 1772
        self.state = "OnFont";
    } else {
        // item 1800
        scheduleNextStateAfter(
        	self,
        	null,
        	2
        )
        // item 1789
        self.state = "Sleeping";
    }
}

function FontLoadingMachine_OnFont_onError(self, data) {
    // item 1820
    self.target.onError(data)
    // item 1778
    self.state = null;
}

function FontLoadingMachine_Sleeping_onData(self, data) {
    // item 1798
    self.target.onData(null)
    // item 1790
    self.state = "OnFont";
}

function FontLoadingMachine_Sleeping_onError(self, data) {
    // item 1796
    self.state = null;
}

function FontLoadingMachine_Start_onData(self, data) {
    // item 1771
    self.fonts = getEditor().getFonts(
    	data
    )
    self.fontId = 0
    // item 1781
    if (hasMoreFontsToLoad(self)) {
        // item 1787
        loadNextFont(self)
        // item 1759
        self.state = "OnFont";
    } else {
        // item 1801
        scheduleNextStateAfter(
        	self,
        	null,
        	2
        )
        // item 1783
        self.state = "Sleeping";
    }
}

function FontLoadingMachine_Start_onError(self, data) {
    // item 1770
    self.target.onError(data)
    // item 1768
    self.state = null;
}

function GoToFolderMachine_Done_onData(self, data) {
    // item 1528
    selectTreeItem(self.id)
    // item 1499
    complete(self, null)
    // item 1504
    self.state = null;
}

function GoToFolderMachine_Done_onError(self, data) {
    // item 1511
    forwardError(self, data)
    // item 1510
    self.state = null;
}

function GoToFolderMachine_Expanding_onData(self, data) {
    // item 1539
    var success = expandOne(self, data)
    // item 1536
    if (success) {
        // item 1535
        self.current++
        // item 1542
        var allDone = expandMany(self)
        // item 1541
        if (allDone) {
            // item 1543
            scheduleNextState(self, null)
            // item 1544
            self.state = "Done";
        } else {
            // item 1514
            self.state = "Expanding";
        }
    } else {
        // item 1540
        complete(self, null)
        // item 1538
        self.state = null;
    }
}

function GoToFolderMachine_Expanding_onError(self, data) {
    // item 1521
    forwardError(self, data)
    // item 1520
    self.state = null;
}

function GoToFolderMachine_ShowingFolder_onData(self, data) {
    // item 1522
    self.path = convertPathToIds(data.path)
    self.current = 1
    // item 1526
    var tree = getWidget("tree")
    // item 1524
    if (tree.hasItem(self.path[0])) {
        // item 1532
        var allDone = expandMany(self)
        // item 1531
        if (allDone) {
            // item 1523
            scheduleNextState(self, null)
            // item 1527
            self.state = "Done";
        } else {
            // item 1533
            self.state = "Expanding";
        }
    } else {
        // item 1530
        complete(self, null)
        // item 1497
        self.state = null;
    }
}

function GoToFolderMachine_ShowingFolder_onError(self, data) {
    // item 1498
    forwardError(self, data)
    // item 1496
    self.state = null;
}

function GoToFolderMachine_Start_onData(self, data) {
    // item 1501
    self.id = data.id
    // item 1500
    startMachine(
        createFolderShower(true),
        data.id,
        self
    )
    // item 1483
    self.state = "ShowingFolder";
}

function GoToFolderMachine_Start_onError(self, data) {
    // item 1489
    self.state = null;
}

function InputThrottle_Idle_default(self, data) {
    // item 6204
    self.state = null;
}

function InputThrottle_Idle_onInput(self, data) {
    // item 6209
    self.input = data.input
    // item 6206
    if (self.input) {
        // item 6216
        if (self.input.length > 1) {
            // item 6215
            self.timerId = browser.schedule(
                self,
                AddUserMs
            )
            // item 6188
            self.state = "Waiting";
        } else {
            // item 6210
            self.state = "Idle";
        }
    } else {
        // item 6210
        self.state = "Idle";
    }
}

function InputThrottle_Waiting_onInput(self, data) {
    // item 6284
    self.input = data.input
    // item 6220
    browser.clearTimeout(
        self.timerId
    )
    // item 6214
    if (self.input) {
        // item 6221
        if (self.input.length > 1) {
            // item 6219
            self.timerId = browser.schedule(
                self,
                AddUserMs
            )
            // item 6191
            self.state = "Waiting";
        } else {
            // item 6205
            self.state = "Idle";
        }
    } else {
        // item 6205
        self.state = "Idle";
    }
}

function InputThrottle_Waiting_timeout(self, data) {
    // item 6611
    createSearch(self.input)
    // item 6205
    self.state = "Idle";
}

function LoginMachine_Dialog_cancel(self, data) {
    // item 5828
    browser.hideCentral()
    // item 5840
    cancelTarget(self)
    // item 5812
    self.state = "Start";
}

function LoginMachine_Dialog_login(self, data) {
    // item 5859
    self.userId = data.id
    // item 5873
    browser.showWorking()
    // item 5860
    saveTry(self)
    // item 5798
    self.state = "Saving";
}

function LoginMachine_Saving_onData(self, data) {
    // item 6015
    browser.preventQuestion()
    // item 5872
    hardGoToFolder(
        self.userId,
        data.diagram_id
    )
    // item 5863
    self.state = null;
}

function LoginMachine_Saving_onError(self, data) {
    // item 5870
    panic(data)
    // item 5869
    self.state = null;
}

function LoginMachine_Start_default(self, data) {
    // item 5806
    self.state = "Start";
}

function LoginMachine_Start_onData(self, data) {
    // item 5838
    browser.showLogon(self)
    // item 5795
    self.state = "Dialog";
}

function OwnSaver_Dialog_cancel(self, data) {
    // item 5774
    browser.hideCentral()
    // item 5755
    self.state = "Start";
}

function OwnSaver_Dialog_login(self, data) {
    // item 5786
    startMachine(
        new LoginMachine(),
        null,
        self
    )
    // item 5739
    self.state = "Subdialog";
}

function OwnSaver_Dialog_signup(self, data) {
    // item 5924
    startMachine(
        new SignupMachine(),
        null,
        self
    )
    // item 5781
    self.state = "Subdialog";
}

function OwnSaver_Start_default(self, data) {
    // item 5749
    self.state = "Start";
}

function OwnSaver_Start_onData(self, data) {
    // item 5785
    browser.showLogonSignup(self)
    // item 5736
    self.state = "Dialog";
}

function OwnSaver_Subdialog_cancel(self, data) {
    // item 5783
    browser.showLogonSignup(null)
    // item 5779
    self.state = "Dialog";
}

function OwnSaver_Subdialog_onData(self, data) {
    // item 5758
    self.state = null;
}

function PaneStatus_Hidden_show(self, msg) {
    // item 4404
    self.showPane()
    // item 4394
    self.state = "Visible";
}

function PaneStatus_Hidden_tab(self, msg) {
    // item 4402
    msg.visible = true
    // item 4381
    self.state = "Hidden";
}

function PaneStatus_Visible_hide(self, msg) {
    // item 4405
    self.hidePane()
    // item 4401
    self.state = "Hidden";
}

function PaneStatus_Visible_tab(self, msg) {
    // item 4403
    msg.visible = false
    // item 4395
    self.state = "Visible";
}

function Paster_GettingHistory_onData(self, data) {
    var payload
    // item 3835
    if (self.parentId == globs.current.id) {
        // item 3296
        startMachine(
            new FolderShower(),
            self.parentId,
            self
        )
    } else {
        // item 4076
        payload = {
            id : self.parentId,
            src : "Paster"
        }
        // item 3838
        startMachine(
            new FolderGetter(),
            payload,
            self
        )
    }
    // item 3116
    self.state = "Reloading";
}

function Paster_GettingHistory_onError(self, data) {
    // item 3299
    forwardError(self, data)
    // item 3128
    self.state = null;
}

function Paster_Reloading_onData(self, data) {
    // item 3839
    setTreeChildren(data)
    // item 4140
    getWidget("tree").expand(
        self.parentId
    )
    // item 3833
    complete(self, null)
    // item 3831
    self.state = null;
}

function Paster_Reloading_onError(self, data) {
    // item 3832
    forwardError(self, data)
    // item 3830
    self.state = null;
}

function Paster_RunningCopy_onData(self, data) {
    // item 5407
    sendDelete(
        self.folders,
        self
    )
    // item 5376
    self.state = "RunningOperation";
}

function Paster_RunningCopy_onError(self, data) {
    // item 5382
    forwardError(self, data)
    // item 5383
    self.state = null;
}

function Paster_RunningOperation_onData(self, data) {
    // item 4129
    startMachine(
        new RecentGetter(),
        null,
        self
    )
    // item 4121
    self.state = "GettingHistory";
}

function Paster_RunningOperation_onError(self, data) {
    // item 4127
    forwardError(self, data)
    // item 4128
    self.state = null;
}

function Paster_Start_onData(self, data) {
    // item 3144
    self.parentId = data.parentId
    self.folders = data.folders
    // item 5369
    if ((data.operation == "move") && (differentProjects(data.folders[0], data.parentId))) {
        // item 5386
        runManyOperation(
            data.parentId,
            data.folders,
            "copy",
            self
        )
        // item 5387
        self.state = "RunningCopy";
    } else {
        // item 3371
        runManyOperation(
            data.parentId,
            data.folders,
            data.operation,
            self
        )
        // item 3108
        self.state = "RunningOperation";
    }
}

function Paster_Start_onError(self, data) {
    // item 3139
    self.target.onData(null)
    // item 3122
    self.state = null;
}

function ProjectCreator_Creating_onData(self, data) {
    // item 4924
    browser.goToUrl(self.url)
    // item 4922
    self.state = null;
}

function ProjectCreator_Creating_onError(self, data) {
    // item 4928
    browser.hideWorking()
    // item 4933
    if ((data.error == "ERR_SPACE_LIMIT") && (data.suggested)) {
        // item 4938
        browser.hideInputBox()
        // item 4936
        browser.suggest(
            data.error,
            data.suggested,
            "createProject"
        )
    } else {
        // item 4931
        var message = makeErrorMessage(data)
        // item 4929
        browser.setInputBoxError(message)
    }
    // item 4921
    self.state = "EnterName";
}

function ProjectCreator_EnterName_onData(self, data) {
    // item 4930
    data = makeSpaceName(data)
    // item 4914
    browser.showWorking()
    // item 4927
    self.url = "/" + IDE + "/doc/" + data + "/1"
    // item 4925
    var payload = {
        name : data
    }
    // item 4926
    browser.sendPost(
        "/api/space",
        payload,
        self
    )
    // item 4911
    self.state = "Creating";
}

function ProjectCreator_EnterName_onError(self, data) {
    // item 4912
    panic(data)
    // item 4910
    self.state = null;
}

function ProjectCreator_Start_onData(self, data) {
    // item 4902
    var onSave = function(text) {
        self.onData(text)
    }
    // item 4903
    browser.showInputBox(
        true,
        translate("MES_CREATE_SPACE"),
        "",
        onSave,
        validateSpaceName,
        true
    )
    // item 4895
    self.state = "EnterName";
}

function ProjectCreator_Start_onError(self, data) {
    // item 4901
    self.state = null;
}

function ProjectDeleter_Deleting_onData(self, data) {
    // item 4755
    browser.goToUrl(ProjectsPath)
    // item 4713
    self.state = null;
}

function ProjectDeleter_Deleting_onError(self, data) {
    // item 4754
    forwardError(self, data)
    // item 4748
    self.state = null;
}

function ProjectDeleter_Start_onData(self, data) {
    // item 4749
    self.spaceId = data
    // item 4752
    var dialog = makeSure1(self.spaceId)
    // item 4753
    browser.createCentral(dialog, self)
    // item 4710
    self.state = "Sure1";
}

function ProjectDeleter_Start_onError(self, data) {
    // item 4723
    self.state = "Start";
}

function ProjectDeleter_Sure1_cancel(self, data) {
    // item 5445
    browser.hideCentral()
    // item 4757
    complete(self, data)
    // item 5443
    self.state = null;
}

function ProjectDeleter_Sure1_onData(self, data) {
    // item 4785
    browser.hideCentral()
    // item 4781
    browser.schedule(self, 1000)
    // item 4782
    browser.showWorking()
    // item 4726
    self.state = "Waiting";
}

function ProjectDeleter_Sure1_onError(self, data) {
    // item 5452
    forwardError(self, data)
    // item 4736
    self.state = null;
}

function ProjectDeleter_Sure2_cancel(self, data) {
    // item 5450
    browser.hideCentral()
    // item 5446
    complete(self, data)
    // item 5448
    self.state = null;
}

function ProjectDeleter_Sure2_onData(self, data) {
    // item 4800
    browser.hideCentral()
    // item 4801
    browser.showWorking()
    // item 4802
    browser.sendDelete(
        "/api/space/" + self.spaceId,
        self
    )
    // item 4729
    self.state = "Deleting";
}

function ProjectDeleter_Sure2_onError(self, data) {
    // item 5451
    forwardError(self, data)
    // item 4742
    self.state = null;
}

function ProjectDeleter_Waiting_onError(self, data) {
    // item 4783
    forwardError(self, data)
    // item 4778
    self.state = null;
}

function ProjectDeleter_Waiting_timeout(self, data) {
    // item 4784
    browser.hideWorking()
    // item 4797
    var dialog = makeSure2(self.spaceId)
    // item 5727
    browser.createCentral(dialog, self)
    // item 4772
    self.state = "Sure2";
}

function RecentGetter_GettingHistory_onData(self, data) {
    // item 4104
    setHistory(data.recent)
    // item 4107
    complete(self, data)
    // item 4103
    self.state = null;
}

function RecentGetter_GettingHistory_onError(self, data) {
    // item 5434
    setHistory([])
    // item 4107
    complete(self, data)
    // item 4103
    self.state = null;
}

function RecentGetter_Start_onData(self, data) {
    // item 4105
    requestHistory(self)
    // item 4088
    self.state = "GettingHistory";
}

function RecentGetter_Start_onError(self, data) {
    // item 4094
    self.state = null;
}

function ReferencesSearch_ItemsPause_onData(self, data) {
    // item 7161
    sendGetSearch(
        self
    )
    // item 7162
    self.state = "Items";
}

function ReferencesSearch_ItemsPause_onError(self, data) {
    // item 7168
    browser.cancelSearch()
    // item 7155
    self.state = null;
}

function ReferencesSearch_Items_onData(self, data) {
    // item 7149
    var found = {
        allItems : toAllItems(data, self.input),
        completed : data.completed
    }
    // item 7148
    browser.addToSearchList(
        found
    )
    // item 7163
    if (data.completed) {
        // item 7147
        self.state = null;
    } else {
        // item 7166
        scheduleNextStateAfter(
            self,
            null,
            Config.SEARCH_PERIOD
        )
        // item 7165
        self.state = "ItemsPause";
    }
}

function ReferencesSearch_Items_onError(self, data) {
    // item 7169
    browser.cancelSearch()
    // item 7145
    self.state = null;
}

function ReferencesSearch_Start_default(self, data) {
    // item 7136
    self.state = "Start";
}

function ReferencesSearch_Start_onData(self, data) {
    // item 7138
    startSearchItems(
        self.input,
        self
    )
    // item 7131
    self.state = "ItemsPause";
}

function Renamer_EnteringName_onData(self, data) {
    // item 3606
    self.name = data
    // item 3587
    browser.showWorking()
    // item 3600
    if ((self.type == "drakon") || (self.type == "mind")) {
        // item 3592
        CallTrace.add("rename drakon",
         [self.id, data])
        // item 3605
        var payload = {
            name : data,
            id : self.id,
            folderId : self.folderId,
            spaceId : self.spaceId
        }
        // item 3604
        startMachine(
            new DrakonRenamer(),
            payload,
            self
        )
    } else {
        // item 3603
        CallTrace.add("rename folder",
         [self.id, data])
        // item 3594
        var url = "/api/folder/" + 
         self.spaceId + "/" + 
         self.folderId
        // item 3593
        var payload = {
            name : data
        }
        // item 3596
        browser.sendPut(
            url,
            payload,
            self
        )
    }
    // item 3583
    self.state = "SendingToServer";
}

function Renamer_EnteringName_onError(self, data) {
    // item 3584
    forwardError(self, data)
    // item 3582
    self.state = null;
}

function Renamer_SendingToServer_onData(self, data) {
    // item 3618
    browser.hideWorking()
    // item 3619
    browser.hideInputBox()
    // item 3620
    renameEverywhere(
        self.id,
        self.name
    )
    // item 3610
    complete(self, null)
    // item 3522
    self.state = null;
}

function Renamer_SendingToServer_onError(self, data) {
    // item 3609
    browser.hideWorking()
    // item 3608
    var message = makeErrorMessage(
        data
    )
    // item 3607
    browser.setInputBoxError(
        message
    )
    // item 3521
    self.state = "EnteringName";
}

function Renamer_Start_onData(self, data) {
    // item 3595
    self.id = data
    var parsed = parseId(self.id)
    self.spaceId = parsed.spaceId
    self.folderId = parsed.folderId
    // item 3590
    var folder = getFromCache(self.id)
    // item 3591
    if (folder) {
        // item 3597
        self.type = folder.type
        var title = translate("MES_RENAME_FOLDER")
        // item 3499
        var onSave = function(text) {
            self.onData(text)
        }
        // item 3573
        if (folder.type == "folder") {
            
        } else {
            // item 3599
            title = translate("MES_RENAME_DIAGRAM")
        }
        // item 3575
        browser.showInputBox(
            true,
            title,
            folder.name,
            onSave,
            validateFolderName,
            true
        )
        // item 3589
        self.state = "EnteringName";
    } else {
        // item 3487
        self.state = null;
    }
}

function Renamer_Start_onError(self, data) {
    // item 3487
    self.state = null;
}

function Restorer_Going_onData(self, data) {
    // item 5287
    complete(self, data)
    // item 5278
    self.state = null;
}

function Restorer_Going_onError(self, data) {
    // item 5286
    forwardError(self, data)
    // item 5284
    self.state = null;
}

function Restorer_Restoring_onData(self, data) {
    // item 5288
    var onCompleted = function() {
        self.onData(null)
    }
    // item 5270
    goToFolder(self.id, onCompleted)
    // item 5252
    self.state = "Going";
}

function Restorer_Restoring_onError(self, data) {
    // item 5271
    forwardError(self, data)
    // item 5260
    self.state = null;
}

function Restorer_Start_onData(self, data) {
    // item 5267
    self.id = data
    // item 5275
    var parsed = parseId(self.id)
    // item 5273
    var url = "/api/restore/" + 
    	parsed.spaceId + "/" + 
    	parsed.folderId
    // item 5274
    browser.sendPost(
        url,
        {},
        self
    )
    // item 5244
    self.state = "Restoring";
}

function Restorer_Start_onError(self, data) {
    // item 5266
    self.state = null;
}

function RootFolderShower_ShowingFolder_onData(self, data) {
    // item 2437
    complete(self, data)
    // item 2449
    self.state = null;
}

function RootFolderShower_ShowingFolder_onError(self, data) {
    // item 2436
    forwardError(self, data)
    // item 2450
    self.state = null;
}

function RootFolderShower_ShowingSpaces_onData(self, data) {
    // item 2451
    startMachine(
        new GoToFolderMachine(),
        {id: self.id},
        self
    )
    // item 2434
    self.state = "ShowingFolder";
}

function RootFolderShower_ShowingSpaces_onError(self, data) {
    // item 2445
    forwardError(self, data)
    // item 2433
    self.state = null;
}

function RootFolderShower_Start_onData(self, data) {
    // item 2452
    self.id = data.id
    // item 2435
    startMachine(
        new SpacesLoader(),
        self.id,
        self
    )
    // item 2420
    self.state = "ShowingSpaces";
}

function RootFolderShower_Start_onError(self, data) {
    // item 2426
    self.state = null;
}

function RootRecentLoader_GettingProjects_onData(self, data) {
    // item 5367
    showRecent()
    // item 5366
    complete(self, data)
    // item 5363
    self.state = null;
}

function RootRecentLoader_GettingProjects_onError(self, data) {
    // item 5365
    forwardError(self, data)
    // item 5362
    self.state = null;
}

function RootRecentLoader_Start_onData(self, data) {
    // item 5364
    startMachine(
        new SpacesLoader(),
        null,
        self
    )
    // item 5349
    self.state = "GettingProjects";
}

function RootRecentLoader_Start_onError(self, data) {
    // item 5355
    self.state = null;
}

function RootSpacesShower_GettingProjects_onData(self, data) {
    // item 2408
    showSpacesInFolder()
    // item 2395
    complete(self, data)
    // item 2391
    self.state = null;
}

function RootSpacesShower_GettingProjects_onError(self, data) {
    // item 2394
    forwardError(self, data)
    // item 2390
    self.state = null;
}

function RootSpacesShower_Start_onData(self, data) {
    // item 2393
    startMachine(
        new SpacesLoader(),
        null,
        self
    )
    // item 2376
    self.state = "GettingProjects";
}

function RootSpacesShower_Start_onError(self, data) {
    // item 2382
    self.state = null;
}

function RootTrashShower_ShowingSpaces_onData(self, data) {
    // item 5215
    startMachine(
        new TrashLoader(),
        null,
        self
    )
    // item 5201
    self.state = "ShowingTrash";
}

function RootTrashShower_ShowingSpaces_onError(self, data) {
    // item 5211
    forwardError(self, data)
    // item 5200
    self.state = null;
}

function RootTrashShower_ShowingTrash_onData(self, data) {
    // item 5204
    complete(self, data)
    // item 5213
    self.state = null;
}

function RootTrashShower_ShowingTrash_onError(self, data) {
    // item 5203
    forwardError(self, data)
    // item 5214
    self.state = null;
}

function RootTrashShower_Start_onData(self, data) {
    // item 5202
    startMachine(
        new SpacesLoader(),
        null,
        self
    )
    // item 5187
    self.state = "ShowingSpaces";
}

function RootTrashShower_Start_onError(self, data) {
    // item 5193
    self.state = null;
}

function Saver_BeforePolling_default(self, data) {
    // item 1867
    self.state = "BeforePolling";
}

function Saver_BeforePolling_save(self, data) {
    // item 6977
    if (canSave()) {
        // item 1909
        cancelPolling()
        // item 1871
        save(self, data)
        // item 1851
        self.state = "Saving";
    } else {
        // item 1867
        self.state = "BeforePolling";
    }
}

function Saver_BeforePolling_timeout(self, data) {
    // item 1886
    startPoll(self)
    // item 1887
    self.state = "Polling";
}

function Saver_Loading_default(self, data) {
    // item 1843
    self.state = "Loading";
}

function Saver_Loading_loaded(self, data) {
    // item 6976
    if (globs.isTryMe) {
        // item 1918
        self.state = "Loading";
    } else {
        // item 1874
        schedulePoll()
        // item 1869
        self.state = "BeforePolling";
    }
}

function Saver_Loading_save(self, data) {
    // item 6979
    if (canSave()) {
        // item 1917
        addSaveItem(self, data)
        // item 1918
        self.state = "Loading";
    } else {
        // item 1843
        self.state = "Loading";
    }
}

function Saver_Polling_default(self, data) {
    // item 1884
    self.state = "Polling";
}

function Saver_Polling_onError(self, data) {
    // item 1913
    schedulePoll()
    // item 1912
    self.state = "BeforePolling";
}

function Saver_Polling_onTag(self, data) {
    // item 1888
    if (hasDifferentTag(self, data)) {
        // item 1891
        reloadDiagram()
        // item 1890
        self.state = "Loading";
    } else {
        // item 1892
        schedulePoll()
        // item 1878
        self.state = "BeforePolling";
    }
}

function Saver_Polling_save(self, data) {
    // item 6978
    if (canSave()) {
        // item 1914
        save(self, data)
        // item 1893
        self.state = "Saving";
    } else {
        // item 1884
        self.state = "Polling";
    }
}

function Saver_Saving_notSaved(self, data) {
    // item 1908
    reloadDiagram()
    // item 1907
    self.state = "Loading";
}

function Saver_Saving_onError(self, data) {
    // item 1873
    panic(data)
    // item 1872
    self.state = null;
}

function Saver_Saving_save(self, data) {
    // item 1904
    addSaveItem(self, data)
    // item 1901
    self.state = "Saving";
}

function Saver_Saving_saved(self, data) {
    // item 1897
    if (hasMoreToSave(self)) {
        // item 1896
        saveNext(self)
        // item 1846
        self.state = "Saving";
    } else {
        // item 1900
        schedulePoll()
        // item 1899
        self.state = "BeforePolling";
    }
}

function Sharer_Access_cancel(self, data) {
    // item 5722
    showShareScreen(null)
    // item 5687
    self.state = "UserInput";
}

function Sharer_Access_onData(self, data) {
    // item 5722
    showShareScreen(null)
    // item 5687
    self.state = "UserInput";
}

function Sharer_UserInput_access(self, data) {
    // item 5725
    var ids = parseId(
        globs.current.id
    )
    // item 5723
    showAccessScreen(
        ids.spaceId,
        self
    )
    // item 5719
    self.state = "Access";
}

function Sharer_UserInput_cancel(self, data) {
    // item 5698
    browser.hideCentral()
    // item 5697
    self.state = null;
}

function Sharer_UserInput_onData(self, data) {
    // item 5717
    showShareScreen(self)
    // item 5684
    self.state = "UserInput";
}

function SignupMachine_Dialog_cancel(self, data) {
    // item 5907
    browser.hideCentral()
    // item 5909
    cancelTarget(self)
    // item 5906
    self.state = "Start";
}

function SignupMachine_Dialog_signup(self, data) {
    // item 5910
    self.userId = data.id
    // item 5923
    browser.showWorking()
    // item 5911
    saveTry(self)
    // item 5892
    self.state = "Saving";
}

function SignupMachine_Saving_onData(self, data) {
    // item 6016
    browser.preventQuestion()
    // item 6927
    browser.goToUrl("/welcome")
    // item 5914
    self.state = null;
}

function SignupMachine_Saving_onError(self, data) {
    // item 5921
    panic(data)
    // item 5920
    self.state = null;
}

function SignupMachine_Start_default(self, data) {
    // item 5900
    self.state = "Start";
}

function SignupMachine_Start_onData(self, data) {
    // item 5908
    browser.showSignup(self)
    // item 5889
    self.state = "Dialog";
}

function SpacesLoader_GettingAccount_onData(self, data) {
    // item 313
    setAccount(data)
    // item 4953
    addSpaceIfMissing(self.id)
    addSpaceIfMissing("examples 1")
    // item 328
    showSpacesInTree()
    // item 304
    complete(self, data)
    // item 312
    self.state = null;
}

function SpacesLoader_GettingAccount_onError(self, data) {
    // item 314
    forwardError(self, data)
    // item 311
    self.state = null;
}

function SpacesLoader_GettingHistory_onData(self, data) {
    // item 190
    requestAccount(self)
    // item 217
    self.state = "GettingAccount";
}

function SpacesLoader_GettingHistory_onError(self, data) {
    // item 295
    forwardError(self, data)
    // item 215
    self.state = null;
}

function SpacesLoader_Start_onData(self, data) {
    // item 4939
    self.id = data
    // item 5436
    if (gUserId) {
        // item 4108
        startMachine(
            new RecentGetter(),
            null,
            self
        )
        // item 183
        self.state = "GettingHistory";
    } else {
        // item 5441
        addSpaceIfMissing(self.id)
        addSpaceIfMissing("examples 1")
        // item 5440
        showSpacesInTree()
        // item 5439
        complete(self, data)
        // item 5438
        self.state = null;
    }
}

function SpacesLoader_Start_onError(self, data) {
    // item 189
    self.state = null;
}

function ThrowTrash_GetAccount_onData(self, data) {
    // item 5117
    browser.sendGet(
        "/api/account",
        self
    )
    // item 5138
    self.state = "GettingAccount";
}

function ThrowTrash_GetAccount_onError(self, data) {
    // item 5136
    self.state = null;
}

function ThrowTrash_GettingAccount_onData(self, data) {
    // item 5119
    self.spaces = data.spaces
    self.current = 0
    // item 5156
    browser.schedule(
        self,
        1
    )
    // item 5099
    self.state = "Throwing";
}

function ThrowTrash_GettingAccount_onError(self, data) {
    // item 5159
    forwardError(self, data)
    // item 5110
    self.state = null;
}

function ThrowTrash_Throwing_onData(self, data) {
    // item 5123
    if (self.current < self.spaces.length) {
        // item 5141
        var spaceId = self.spaces[self.current]
        // item 5140
        rub_clearSpace(
            self,
            spaceId
        )
        // item 5122
        self.current++
        // item 5102
        self.state = "Throwing";
    } else {
        // item 5289
        getWidget("trash_grid").setItems([])
        // item 5160
        complete(self, data)
        // item 5126
        self.state = null;
    }
}

function ThrowTrash_Throwing_onError(self, data) {
    // item 5142
    console.log(data)
    // item 5123
    if (self.current < self.spaces.length) {
        // item 5141
        var spaceId = self.spaces[self.current]
        // item 5140
        rub_clearSpace(
            self,
            spaceId
        )
        // item 5122
        self.current++
        // item 5102
        self.state = "Throwing";
    } else {
        // item 5289
        getWidget("trash_grid").setItems([])
        // item 5160
        complete(self, data)
        // item 5126
        self.state = null;
    }
}

function ThrowTrash_Throwing_timeout(self, data) {
    // item 5123
    if (self.current < self.spaces.length) {
        // item 5141
        var spaceId = self.spaces[self.current]
        // item 5140
        rub_clearSpace(
            self,
            spaceId
        )
        // item 5122
        self.current++
        // item 5102
        self.state = "Throwing";
    } else {
        // item 5289
        getWidget("trash_grid").setItems([])
        // item 5160
        complete(self, data)
        // item 5126
        self.state = null;
    }
}

function TrashLoader_GetAccount_onData(self, data) {
    // item 5061
    self.items = []
    // item 5037
    browser.sendGet(
        "/api/account",
        self
    )
    // item 5059
    self.state = "GettingAccount";
}

function TrashLoader_GetAccount_onError(self, data) {
    // item 5057
    self.state = null;
}

function TrashLoader_GettingAccount_onData(self, data) {
    // item 5039
    self.spaces = data.spaces
    self.current = 0
    // item 5152
    browser.schedule(
        self,
        1
    )
    // item 5019
    self.state = "GettingSpaceRubbish";
}

function TrashLoader_GettingAccount_onError(self, data) {
    // item 5150
    forwardError(self, data)
    // item 5030
    self.state = null;
}

function TrashLoader_GettingSpaceRubbish_onData(self, data) {
    // item 5042
    rub_copyTrashItems(self, data)
    // item 5044
    if (self.current < self.spaces.length) {
        // item 5063
        var url = rub_getUrl(self)
        // item 5062
        browser.sendGet(
            url,
            self
        )
        // item 5043
        self.current++
        // item 5022
        self.state = "GettingSpaceRubbish";
    } else {
        // item 5064
        rub_sort(self)
        // item 5163
        showTrash(self.items)
        // item 5153
        complete(self, null)
        // item 5047
        self.state = null;
    }
}

function TrashLoader_GettingSpaceRubbish_onError(self, data) {
    // item 5044
    if (self.current < self.spaces.length) {
        // item 5063
        var url = rub_getUrl(self)
        // item 5062
        browser.sendGet(
            url,
            self
        )
        // item 5043
        self.current++
        // item 5022
        self.state = "GettingSpaceRubbish";
    } else {
        // item 5064
        rub_sort(self)
        // item 5163
        showTrash(self.items)
        // item 5153
        complete(self, null)
        // item 5047
        self.state = null;
    }
}

function TrashLoader_GettingSpaceRubbish_timeout(self, data) {
    // item 5044
    if (self.current < self.spaces.length) {
        // item 5063
        var url = rub_getUrl(self)
        // item 5062
        browser.sendGet(
            url,
            self
        )
        // item 5043
        self.current++
        // item 5022
        self.state = "GettingSpaceRubbish";
    } else {
        // item 5064
        rub_sort(self)
        // item 5163
        showTrash(self.items)
        // item 5153
        complete(self, null)
        // item 5047
        self.state = null;
    }
}

function TreeClicker_ShowingFolder_onData(self, data) {
    // item 835
    complete(self, null)
    // item 834
    self.state = null;
}

function TreeClicker_ShowingFolder_onError(self, data) {
    // item 830
    putErrorOnNode(self.start.rowId)
    // item 831
    complete(self, null)
    // item 806
    self.state = null;
}

function TreeClicker_Start_onData(self, data) {
    // item 6873
    if (data.rowId == "dashboard") {
        // item 6876
        goToDashboard(null)
        // item 2185
        complete(self, null)
        // item 827
        self.state = null;
    } else {
        // item 4976
        if (data.rowId == "trash") {
            // item 4981
            goToTrash(null)
            // item 2185
            complete(self, null)
            // item 827
            self.state = null;
        } else {
            // item 1165
            selectTreeItem(data.rowId)
            // item 825
            if (data.rowId == globs.current.id) {
                // item 2185
                complete(self, null)
                // item 827
                self.state = null;
            } else {
                // item 841
                self.start = data
                // item 829
                startMachine(
                    createFolderShower(true),
                    data.rowId,
                    self
                )
                // item 792
                self.state = "ShowingFolder";
            }
        }
    }
}

function TreeClicker_Start_onError(self, data) {
    // item 798
    self.state = null;
}

function TreeNodeExpander_GettingFolder_onData(self, data) {
    // item 700
    setTreeChildren(data)
    // item 735
    complete(self, null)
    // item 687
    self.state = null;
}

function TreeNodeExpander_GettingFolder_onError(self, data) {
    // item 701
    putErrorOnNode(self.start.rowId)
    // item 737
    complete(self, null)
    // item 686
    self.state = null;
}

function TreeNodeExpander_Start_onData(self, data) {
    // item 689
    self.start = data
    // item 698
    var getArgs = {
        id : data.rowId,
        src : "TreeNodeExpander"
    }
    // item 699
    startMachine(
        new FolderGetter(),
        getArgs,
        self
    )
    // item 673
    self.state = "GettingFolder";
}

function TreeNodeExpander_Start_onError(self, data) {
    // item 679
    self.state = null;
}

function TryMeLoader_LoadingExample_onData(self, data) {
    // item 5967
    self.folder = data
    // item 5956
    startMachine(
        new FontLoadingMachine(),
        self.folder,
        self
    )
    // item 5934
    self.state = "LoadingFonts";
}

function TryMeLoader_LoadingExample_onError(self, data) {
    // item 5953
    self.target.onError(data)
    // item 5943
    self.state = null;
}

function TryMeLoader_LoadingFonts_onData(self, data) {
    // item 5985
    browser.scheduleNextStateAfter(
        self,
        null,
        100
    )
    // item 5957
    self.state = "Sleeping";
}

function TryMeLoader_LoadingFonts_onError(self, data) {
    // item 5965
    self.target.onError(data)
    // item 5963
    self.state = null;
}

function TryMeLoader_Sleeping_onData(self, data) {
    // item 5977
    closeRightPaneCore(true)
    closeLeftPaneCore(true)
    // item 5980
    globs.current.type = self.folder.type
    // item 5982
    getEditor().setDiagram(
    	self.folder,
    	true
    )
    // item 5978
    setActiveScreen("middle_diagram")
    // item 5983
    getEditor().home()
    // item 6989
    showDemo()
    // item 5979
    self.target.onData(null)
    // item 5968
    self.state = null;
}

function TryMeLoader_Sleeping_onError(self, data) {
    // item 5976
    self.target.onError(data)
    // item 5974
    self.state = null;
}

function TryMeLoader_Start_onData(self, data) {
    // item 5955
    var exampleUrl = browser.getExample()
    // item 5954
    browser.sendGet(
        exampleUrl,
        self
    )
    // item 5946
    self.state = "LoadingExample";
}

function TryMeLoader_Start_onError(self, data) {
    // item 5952
    self.state = null;
}

function UserAdder_Primary_cancel(self, data) {
    // item 5590
    browser.hideCentral()
    // item 5589
    cancelTarget(self)
    // item 5588
    self.state = null;
}

function UserAdder_Primary_choose(self, data) {
    // item 5631
    browser.hideCentral()
    // item 5632
    self.target.onData(data)
    // item 5633
    self.state = null;
}

function UserAdder_Primary_onData(self, data) {
    // item 5648
    var found = Utils.listToSet(data.found)
    // item 5649
    var toShow = Utils.subtract(
        found,
        self.existing
    )
    // item 5650
    toShow.sort()
    // item 5651
    browser.setFoundUsers(toShow)
    // item 5568
    self.state = "Primary";
}

function UserAdder_Primary_onError(self, data) {
    // item 5642
    self.state = "Primary";
}

function UserAdder_Primary_onInput(self, data) {
    // item 5668
    self.user = data
    // item 5652
    if (data) {
        // item 5656
        if (data.length > 1) {
            // item 5667
            self.timerId = browser.schedule(
                self,
                AddUserMs
            )
            // item 5646
            self.state = "Typing";
        } else {
            // item 5655
            self.state = "Primary";
        }
    } else {
        // item 5654
        browser.setFoundUsers([])
        // item 5655
        self.state = "Primary";
    }
}

function UserAdder_Typing_cancel(self, data) {
    // item 5595
    browser.hideCentral()
    // item 5594
    cancelTarget(self)
    // item 5593
    self.state = null;
}

function UserAdder_Typing_choose(self, data) {
    // item 5636
    browser.hideCentral()
    // item 5637
    self.target.onData(data)
    // item 5638
    self.state = null;
}

function UserAdder_Typing_onInput(self, data) {
    // item 5669
    self.user = data
    // item 5664
    browser.clearTimeout(
        self.timerId
    )
    // item 5670
    if (data) {
        // item 5674
        if (data.length > 1) {
            // item 5675
            self.timerId = browser.schedule(
                self,
                AddUserMs
            )
            // item 5571
            self.state = "Typing";
        } else {
            // item 5673
            self.state = "Primary";
        }
    } else {
        // item 5672
        browser.setFoundUsers([])
        // item 5673
        self.state = "Primary";
    }
}

function UserAdder_Typing_timeout(self, data) {
    // item 5657
    startUserSearch(self.user, self)
    // item 5658
    self.state = "Primary";
}

function accountButton(evt, type, widget, id, cellId) {
    var item, items
    // item 4363
    items = []
    // item 4366
    item = {
        text : ServerVars.userName,
        code : goToAccount,
        image : "user.png"
    }
    // item 4367
    items.push(item)
    // item 4361
    makeTextListItem(
        items,
        "Logout",
        browser.logout
    )
    // item 4360
    browser.showPopupList(
        widget.id,
        items
    )
}

function addAccess(access, role, user) {
    var users
    // item 4212
    users = access.roles[role]
    users[user] = true
}

function addAccessBlock(change, operation, action, before, after, spaceId) {
    // item 5537
    var beforeUsers = before[operation]
    var afterUsers = after[operation]
    // item 5530
    var diff = Utils.subtract(afterUsers, beforeUsers)
    diff = diff.map(function(t) {
    	return t.toLowerCase()
    })
    // item 5531
    if (diff.length == 0) {
        
    } else {
        // item 5534
        var block = {
        	workspace: spaceId,
        	operation: operation,
        	action: action,
        	users: diff
        }
        // item 5535
        change.blocks.push(block)
    }
}

function addPathStage(name, id, isHyper) {
    var widget
    // item 9980001
    var _ind998 = 0;
    var _col998 = globs.pathWidgets;
    var _len998 = _col998.length;
    while (true) {
        // item 9980002
        if (_ind998 < _len998) {
            
        } else {
            break;
        }
        // item 9980004
        var widgetId = _col998[_ind998];
        // item 999
        widget = getWidget(widgetId)
        // item 1000
        widget.addStage(
            name,
            id,
            isHyper
        )
        // item 9980003
        _ind998++;
    }
}

function addSaveItem(saver, item) {
    // item 2122
    if (((saver.queue.length > MaxSaveItems) && (!(globs.isTryMe))) && (!(globs.isDev))) {
        // item 2125
        panic("ERR_COMMUNICATION")
    } else {
        // item 2121
        saver.queue.push(item)
    }
}

function addSpaceIfMissing(id) {
    var space, spaceId, spaces
    // item 4948
    if (id) {
        // item 4946
        spaces = globs.user.spaces
        // item 4947
        spaceId = parseId(id).spaceId
        // item 4951
        if (spaceId in spaces) {
            
        } else {
            // item 4952
            space = {
                id : "1",
                space_id : spaceId,
                is_public : true,
                access : "read",
                path : [],
                items : [],
                children : []
            }
            // item 4945
            spaces[spaceId] = space
            // item 4954
            addSpaceToCache(space)
        }
    }
}

function addSpaceToCache(space) {
    var id
    // item 4136
    id = makeId(
        space.space_id,
        "1"
    )
    // item 4138
    space.name = space.space_id
    space.id = "1"
    space.type = "folder"
    // item 4137
    addToCache(id, space, null)
}

function addToCache(id, data, access) {
    var folder
    // item 3560
    folder = globs.folders[id]
    // item 3561
    if (folder) {
        
    } else {
        // item 3564
        folder = {}
        globs.folders[id] = folder
    }
    // item 3548
    Utils.mergeSets(folder, data)
    // item 4973
    if (folder.access) {
        
    } else {
        // item 4972
        folder.access = access || "read"
    }
    // item 3565
    if (folder.parent) {
        // item 3568
        folder.parent = makeId(
            folder.space_id,
            folder.parent
        )
    }
    // item 3611
    if (folder.children) {
        // item 35690001
        var _ind3569 = 0;
        var _col3569 = folder.children;
        var _len3569 = _col3569.length;
        while (true) {
            // item 35690002
            if (_ind3569 < _len3569) {
                
            } else {
                break;
            }
            // item 35690004
            var child = _col3569[_ind3569];
            // item 3571
            child.parent = folder.id
            // item 3572
            addToCache(
                makeId(child.space_id, child.id),
                child,
                folder.access
            )
            // item 35690003
            _ind3569++;
        }
    }
    // item 4038
    folder.folderId = folder.id
    folder.spaceId = folder.space_id
    folder.id = id
}

function addToPrevious(ids) {
    var found, last
    // item 1179
    last = ids[ids.length - 1]
    // item 1180
    found = globs.current.previous.indexOf(last)
    // item 1181
    if (found == -1) {
        // item 1184
        globs.current.previous = ids
    }
}

function addToRecent(id, name, type) {
    var index, item, recent, sameId
    // item 6822
    recent = getRecent()
    // item 1046
    sameId = function(item) {
        return item.id == id
    }
    // item 1045
    index = find(
        recent,
        sameId
    )
    // item 1047
    if (index == -1) {
        
    } else {
        // item 1050
        removeAt(
            recent,
            index
        )
    }
    // item 1058
    item = {
        id : id,
        text : name,
        type : type
    }
    // item 1057
    recent.unshift(item)
    // item 1067
    updateHistoryList()
}

function bind(signalId, event, callback) {
    var handlers, widgetHandlers
    // item 390
    handlers = globs.handlers
    // item 391
    if (signalId in handlers) {
        
    } else {
        // item 394
        handlers[signalId] = {}
    }
    // item 395
    widgetHandlers = handlers[signalId]
    // item 396
    widgetHandlers[event] = callback
}

function bindEditor() {
    var editor, openLeft, openRight
    // item 2508
    editor = getEditor()
    // item 5996
    if ((globs.wide) && (!(globs.isTryMe))) {
        // item 2509
        openLeft = editor.createLeftButton(
            openLeftPane,
            "right",
            "#E2EDF5"
        )
        // item 2517
        openRight = editor.createRightButton(
            openRightPane,
            "left",
            "#E2EDF5"
        )
        // item 2512
        globs.openLeftIndex = openLeft
        globs.openRightIndex = openRight
        // item 2851
        editor.hideLeftButton(
            globs.openLeftIndex
        )
        // item 2852
        editor.hideRightButton(
            globs.openRightIndex
        )
    }
}

function bindHandlers() {
    // item 376
    bind("left_pane_close", "click", closeLeftPane)
    bind("right_pane_close", "click", closeRightPane)
    bind("tree", "collapse", collapseTreeNode)
    bind("folderSearch", "input", onFolderSearch)
    bind("folder_grid", "click", onFolderClick)
    bind("middle_spaces", "click", onProjectClick)
    bind("check_all", "check", onCheckAll)
    bind("recent", "click", onRecentClick)
    bind("middle_recent", "click", onRecentClick)
    bind("path", "click", onRecentClick)
    bind("up", "click", goUp)
    bind("splitter", "resize", onSplitterResize)
    bind("hideCentral", "click", hideCentral)
    bind("actions", "click", onActionsClick)
    bind("folder_grid", "contextmenu", onFoldersContext)
    bind("tree", "contextmenu", onTreeContext)
    // item 4691
    bind("middle_spaces", "contextmenu", onProjectContext)
    bind("goToProjects", "click", goToProjectsNoArg)
    bind("trash_grid", "click", onTrashClick)
    // item 2158
    bind("undo", "click", undo)
    bind("redo", "click", redo)
    bind("create_diagram", "click", createDiagram)
    bind("create_folder", "click", createFolder)
    // item 714
    bindMachine("tree", "expand", TreeNodeExpander)
    bindMachine("tree", "click", TreeClicker)
    bindMachine("clearTrash", "click", ThrowTrash)
    bind("createProject", "click", createProject)
    // item 4257
    bind("share", "click", share)
    bind("exportButton", "click", exportButton)
    bind("accountButton", "click", accountButton)
    bind("showMainMenu", "click", showMainMenu)
    bind("saveDiagram", "click", saveDiagram)
    // item 6179
    bind("globalSearch", "input", globalSearch)
    bind("globalSearch", "escape", globalSearchEscape)
}

function bindMachine(signalId, event, ctr) {
    var handlers, widgetHandlers
    // item 707
    handlers = globs.machineHandlers
    // item 708
    if (signalId in handlers) {
        
    } else {
        // item 711
        handlers[signalId] = {}
    }
    // item 712
    widgetHandlers = handlers[signalId]
    // item 713
    widgetHandlers[event] = ctr
}

function buildAccessChange(old, access) {
    // item 5504
    var hasChange = false
    // item 5510
    var change = {
    	spaceId: access.spaceId,
    	blocks: []
    }
    // item 5511
    if (access.isPublic == old.isPublic) {
        // item 5524
        change.setPublicAccess = false
    } else {
        // item 5514
        change.setPublicAccess = true
        change.publicAccess = access.isPublic
    }
    // item 5515
    addAccessBlock(
    	change,
    	"read",
    	"grant",
    	old.roles,
    	access.roles,
    	access.spaceId
    )
    // item 5516
    addAccessBlock(
    	change,
    	"read",
    	"revoke",
    	access.roles,
    	old.roles,
    	access.spaceId
    )
    // item 5517
    addAccessBlock(
    	change,
    	"write",
    	"grant",
    	old.roles,
    	access.roles,
    	access.spaceId
    )
    // item 5518
    addAccessBlock(
    	change,
    	"write",
    	"revoke",
    	access.roles,
    	old.roles,
    	access.spaceId
    )
    // item 5519
    addAccessBlock(
    	change,
    	"admin",
    	"grant",
    	old.roles,
    	access.roles,
    	access.spaceId
    )
    // item 5520
    addAccessBlock(
    	change,
    	"admin",
    	"revoke",
    	access.roles,
    	old.roles,
    	access.spaceId
    )
    // item 5505
    if ((change.setPublicAccess) || (!(change.blocks.length == 0))) {
        // item 5508
        return change
    } else {
        // item 5509
        return null
    }
}

function buildMainMenu() {
    var _sw68970000_ = 0;
    // item 4478
    var gotoTitle = "MES_GO_TO"
    // item 4480
    var actionsTitle = "MES_ACTIONS"
    // item 4484
    var showTitle = "MES_SHOW"
    var learnTitle = "MES_LEARN"
    // item 4494
    var green = "green"
    var yellow = "olive"
    var blue = "blue"
    var white = "gray"
    // item 6880
    var rwGotoItems = []
    // item 4504
    rwGotoItems.push({
    	text: "MES_HOMEPAGE",
    	action: goHome
    })
    // item 6877
    if (gUserId) {
        // item 6881
        rwGotoItems.push({
        	text: "MES_DASHBOARD",
        	action: goToDashboard
        })
    }
    // item 4511
    if (gUserId) {
        // item 4509
        rwGotoItems.push(
        	{
        		text: "MES_SPACES",
        		action: goToProjects
        	}
        )
        // item 4505
        if (globs.wide) {
            
        } else {
            // item 4508
            rwGotoItems.push(
            	{
            		text: "MES_RECENT",
            		action: goToRecent
            	}
            )
        }
        // item 4467
        rwGotoItems.push(
        	{
        		text: "MES_TRASH",
        		action: goToTrash,
        		image: "trash-s2.png"
        	}
        )
        rwGotoItems.push(
        	{
        		text: "MES_ACCOUNT",
        		action: goToAccount,
        		image: "user-s.png"
        	}
        )
    }
    // item 4517
    var rwActionsItems = []
    // item 4514
    if (gUserId) {
        // item 5294
        if ((globs.current.type) && (!(isReadonly()))) {
            // item 4479
            rwActionsItems.push(
            	{
            		text: "MES_CREATE_DIAGRAM",
            		action: createDiagram,
            		image: "to-primitive-s2.png"
            	}
            )
            rwActionsItems.push(
            	{
            		text: "MES_CREATE_FOLDER",
            		action: createFolder,
            		image: "folder-s2.png"
            	}
            )
        }
        // item 5293
        rwActionsItems.push(
        	{
        		text: "MES_CREATE_SPACE",
        		action: createProject,
        		image: "workspace-s2.png"
        	}
        )
    }
    // item 4496
    if (isDiagramOrFolder()) {
        // item 4519
        if ((gUserId) || (!(isDiagram()))) {
            
        } else {
            // item 4522
            rwActionsItems.push(
            	{
            		text: "MES_GET_IT",
            		action: saveDiagram
            	}
            )
        }
        // item 6013
        if (globs.isTryMe) {
            
        } else {
            // item 4495
            rwActionsItems.push(
            	{
            		text: "MES_SHARE",
            		action: share,
            		image: "share.png"
            	}
            )
        }
    }
    // item 4483
    var split = getWidget("splitter")
    var rwShowItems = []
    // item 4540
    if ((globs.isTryMe) || (!(globs.wide))) {
        
    } else {
        // item 4538
        rwShowItems.push(
        	{
        		text: "MES_PROJECT_TREE",
        		action: openLeftPane
        	}
        )
        // item 4539
        rwShowItems.push(
        	{
        		text: "MES_RECENT_PANE",
        		action: openRightPane
        	}
        )
    }
    // item 4531
    if (isDiagram()) {
        // item 4534
        rwShowItems.push(
        	{
        		text: "MES_HELP",
        		action: showHelp
        	}
        )
    }
    // item 7209
    var host = "https://drakonhub.com"
    // item 6892
    var learnItems = []
    // item 7030
    if (shouldShowDemo()) {
        // item 6999
        learnItems.push(
        	{
        		text: "MES_SHOW_DEMO",
        		action: showDemoCore
        	}
        )
    }
    // item 6893
    pushMenuItem(
        learnItems,
        "MES_DOCUMENTATION",
        host + "/read/docs"
    )
    // item 6894
    if (isDiagram()) {
        // item 68970000
        _sw68970000_ = globs.current.type;
        // item 68970001
        if (_sw68970000_ === "drakon") {
            // item 6910
            pushMenuItem(
                learnItems,
                "title-drakon",
                host + "/drakon"
            )
            // item 6911
            pushMenuItem(
                learnItems,
                "title-video-how-to-flowchart",
                host + "/video-how-to-flowchart"
            )
            // item 6912
            pushMenuItem(
                learnItems,
                "title-drakon-reference",
                host + "/drakon-reference"
            )
            // item 6913
            pushMenuItem(
                learnItems,
                "title-how-to-flowchart",
                host + "/how-to-flowchart"
            )
        } else {
            // item 68970002
            if (_sw68970000_ === "mind") {
                // item 6914
                pushMenuItem(
                    learnItems,
                    "title-video-how-to-mind-map",
                    host + "/video-how-to-mind-map"
                )
                // item 6916
                pushMenuItem(
                    learnItems,
                    "title-how-to-mind-map",
                    host + "/how-to-mind-map"
                )
            } else {
                // item 6918
                pushMenuItem(
                    learnItems,
                    "title-video-how-to-flowchart",
                    host + "/video-how-to-flowchart"
                )
                // item 6919
                pushMenuItem(
                    learnItems,
                    "title-video-how-to-mind-map",
                    host + "/video-how-to-mind-map"
                )
            }
        }
    } else {
        // item 6918
        pushMenuItem(
            learnItems,
            "title-video-how-to-flowchart",
            host + "/video-how-to-flowchart"
        )
        // item 6919
        pushMenuItem(
            learnItems,
            "title-video-how-to-mind-map",
            host + "/video-how-to-mind-map"
        )
    }
    // item 4489
    var menu
    // item 4485
    menu = [
    	{
    		title: gotoTitle,
    		items: rwGotoItems,
    		color: green
    	},
    	{
    		title: actionsTitle,
    		items: rwActionsItems,
    		color: yellow
    	}
    ]
    // item 4550
    menu.push({
    		title: learnTitle,
    		items: learnItems,
    		color: blue
    })
    // item 4535
    if (rwShowItems.length > 0) {
        // item 4503
        menu.push(
        	{
        		title: showTitle,
        		items: rwShowItems,
        		color: white
        	}
        )
    }
    // item 4490
    return menu
}

function canPasteFolder() {
    // item 2567
    if ((isReadonly()) || (!(clipboardContainsFolders()))) {
        // item 2570
        return false
    } else {
        // item 2566
        return true
    }
}

function canSave() {
    // item 1922
    if (((isReadonly()) || (globs.isDev)) || (globs.isTryMe)) {
        // item 1928
        return false
    } else {
        // item 1927
        return true
    }
}

function cancelPolling() {
    var timer
    // item 1642
    timer = globs.pollTimer
    // item 1643
    if (timer) {
        // item 1646
        window.clearTimeout(timer)
        // item 1647
        globs.pollTimer = null
    }
}

function cancelTarget(self) {
    // item 6934
    if (self.target.cancel) {
        // item 6933
        self.target.cancel()
    }
}

function changeDescription(id) {
    var target
    // item 3926
    target = makeTarget(
        function(){},
        function(){}
    )
    // item 3925
    startMachine(
        new DescriptionChanger(),
        id,
        target
    )
}

function clearPath() {
    var widget
    // item 10070001
    var _ind1007 = 0;
    var _col1007 = globs.pathWidgets;
    var _len1007 = _col1007.length;
    while (true) {
        // item 10070002
        if (_ind1007 < _len1007) {
            
        } else {
            break;
        }
        // item 10070004
        var widgetId = _col1007[_ind1007];
        // item 1008
        widget = getWidget(widgetId)
        // item 1009
        widget.clear()
        // item 10070003
        _ind1007++;
    }
}

function clearRubbish() {
    // item 4066
    CallTrace.add("clearRubbish", [])
    // item 4063
    startAsync(
        new ThrowTrash(),
        null,
        null
    )
}

function clipboardContainsFolders() {
    var type
    // item 4043
    type = globs.clipboard.getClipboardType()
    // item 4049
    if ((type == "copy-folders") || (type == "cut-folders")) {
        // item 4044
        return true
    } else {
        // item 4048
        return false
    }
}

function closeLeftPane() {
    // item 4444
    globs.leftPaneStatus.hide()
}

function closeLeftPaneCore(noSave) {
    var splitter
    // item 6003
    if (globs.openLeftIndex == null) {
        
    } else {
        // item 4429
        getEditor().showLeftButton(
            globs.openLeftIndex
        )
    }
    // item 4426
    splitter = getWidget("splitter")
    // item 4427
    splitter.leftVisible = false
    // item 4428
    updateGui()
    // item 6010
    if (noSave) {
        
    } else {
        // item 4430
        saveSplitterValues()
    }
}

function closeRightPane() {
    // item 4445
    globs.rightPaneStatus.hide()
}

function closeRightPaneCore(noSave) {
    var splitter
    // item 6006
    if (globs.openRightIndex == null) {
        
    } else {
        // item 4421
        getEditor().showRightButton(
            globs.openRightIndex
        )
    }
    // item 4418
    splitter = getWidget("splitter")
    // item 4419
    splitter.rightVisible = false
    // item 4420
    updateGui()
    // item 5993
    if (noSave) {
        
    } else {
        // item 4422
        saveSplitterValues()
    }
}

function collapseTreeNode(evt, type, widget, id, cellId) {
    var tree
    // item 660
    tree = getWidget("tree")
    // item 661
    tree.removeChildren(
        id
    )
}

function complete(machine, data) {
    // item 321
    machine.target.onData(data)
}

function convertPathToIds(path) {
    var ids
    // item 6728
    path = path || []
    // item 1434
    ids = path.map(makeIdFromChild)
    // item 1435
    return ids
}

function copyFolders() {
    var selected
    // item 2644
    selected = getSelectedFolders()
    // item 2645
    copyFoldersCore(selected)
}

function copyFoldersCore(selected) {
    // item 3069
    if (selected.length == 0) {
        
    } else {
        // item 3068
        globs.clipboard.copyToClipboard(
            "copy-folders",
            selected
        )
        // item 3075
        updateActionList()
    }
}

function createAccess(spaceId, data) {
    var access
    // item 4197
    access = {
        spaceId : spaceId,
        isPublic : data["public"],
        roles : {}
    }
    // item 4199
    access.roles.read = Utils.listToSet(data.readers)
    // item 4200
    access.roles.write = Utils.listToSet(data.writers)
    // item 4201
    access.roles.admin = Utils.listToSet(data.admins)
    // item 4204
    access.add = function(role, user) {
        addAccess(access, role, user)
    }
    // item 4206
    access.remove = function(role, user) {
        removeAccess(access, role, user)
    }
    // item 4202
    return access
}

function createDiagram() {
    // item 2457
    createDiagramCore(null)
}

function createDiagramCore(parentId) {
    var target
    // item 2483
    parentId = getCurrentParent(parentId)
    // item 2484
    if (parentId) {
        // item 2901
        target = makeTarget(
            function() {},
            panic
        )
        // item 2900
        startMachine(
            new DiagramCreator(),
            parentId,
            target
        )
    }
}

function createFolder() {
    // item 2682
    createFolderCore(null)
}

function createFolderCore(parentId) {
    var machine, target
    // item 2985
    parentId = getCurrentParent(parentId)
    // item 2986
    if (parentId) {
        // item 2990
        target = makeTarget(
            function() {},
            panic
        )
        // item 2991
        machine = new FolderCreator()
        machine.browser = browser
        // item 2989
        startMachine(
            machine,
            parentId,
            target
        )
    }
}

function createFolderShower(home) {
    var machine
    // item 2141
    machine = new FolderShower()
    machine.home = home
    // item 2142
    return machine
}

function createProject() {
    // item 4884
    startMachine(
    	new ProjectCreator(),
    	null,
    	null
    )
}

function createSaver(tag) {
    var saver
    // item 2111
    saver = new Saver()
    // item 2115
    saver.queue = []
    saver.newTag = tag
    saver.oldTag = null
    // item 2112
    return saver
}

function createSearch(input) {
    var defs, folders, items, machine, start
    var _sw66160000_ = 0;
    // item 6632
    folders = spacesSearchItems(input)
    defs = makeDiagramSearchDefs()
    // item 7089
    killSearchMachine()
    // item 66160000
    _sw66160000_ = globs.current.screen;
    // item 66160001
    if (_sw66160000_ === "middle_folder") {
        // item 6631
        machine = new DiagramSearch()
        // item 6633
        items = []
        // item 6637
        machine.input = input
        // item 6638
        start = {
            folders : folders,
            items : items
        }
        // item 6636
        browser.createSearchList(
            defs,
            start
        )
        // item 7111
        startSearchMachine(machine)
    } else {
        // item 66160002
        if (_sw66160000_ === "middle_diagram") {
            // item 6627
            machine = new DiagramSearch()
            // item 6634
            items = findItems(input)
            // item 6637
            machine.input = input
            // item 6638
            start = {
                folders : folders,
                items : items
            }
            // item 6636
            browser.createSearchList(
                defs,
                start
            )
            // item 7111
            startSearchMachine(machine)
        } else {
            // item 6685
            start = {
                folders : folders,
                completed : true
            }
            // item 6684
            browser.createSearchList(
                defs,
                start
            )
        }
    }
}

function createState() {
    // item 4
    var state = {
    	user: {
    		userId: gUserId,
    		spaces: {},
    		recent: []
    	},
    	current: {
    		type: null,
    		id: null,
    		parent: null,
    		previous: []
    	},
    	loadedFonts: {},
    	handlers: {},
    	machineHandlers: {},
    	pathWidgets: [],
    	globalSearches: [],
    	nav: {
    		type: null,
    		pageId: null
    	},
    	folders: {}
    }
    // item 895
    state.topCodes = makeTopCodes()
    // item 896
    state.topCodesRo = makeTopCodesRo()
    // item 897
    state.topCodesNu = makeTopCodesNu()
    // item 5
    return state
}

function cutFolders() {
    var selected
    // item 2656
    selected = getSelectedFolders()
    // item 2657
    cutFoldersCore(null, selected)
}

function cutFoldersCore(parentId, selected) {
    var data
    // item 3315
    CallTrace.add(
        "cut folders",
        [selected]
    )
    // item 3308
    if (selected.length == 0) {
        
    } else {
        // item 3459
        data = {
            parentId : parentId,
            folders : selected,
            cut : true
        }
        // item 3458
        startAsync(
            new FolderCutterDeleter(),
            data,
            null
        )
    }
}

function deleteFolders() {
    var folders
    // item 2661
    folders = getSelectedFolders()
    // item 2662
    deleteFoldersCore(null, folders)
}

function deleteFoldersCore(parentId, selected) {
    var data
    // item 3463
    CallTrace.add(
        "delete folders",
        [selected]
    )
    // item 3460
    if (selected.length == 0) {
        
    } else {
        // item 3465
        data = {
            parentId : parentId,
            folders : selected,
            cut : false
        }
        // item 3464
        startAsync(
            new FolderCutterDeleter(),
            data,
            null
        )
    }
}

function deleteFoldersFromUi(folders) {
    // item 5426
    var currentDeleted = isAnyCurrent(
        folders
    )
    // item 5425
    folders.forEach(onDelete)
    // item 5424
    if (currentDeleted) {
        
    } else {
        // item 5427
        updateActionList()
    }
    // item 5430
    return currentDeleted
}

function deleteFromGrid(id) {
    var widget
    // item 3454
    widget = getWidget("folder_grid")
    // item 3455
    widget.remove(id)
}

function deleteFromHistory(id) {
    var recent, recentMiddle
    // item 3178
    recent = getWidget("recent")
    // item 3179
    recent.remove(id)
    // item 3180
    recentMiddle = getWidget("middle_recent")
    // item 3181
    recentMiddle.remove(id)
}

function deleteFromTree(id) {
    var widget
    // item 3187
    widget = getWidget("tree")
    // item 3188
    widget.remove(id)
}

function deleteProject(spaceId) {
    var target
    // item 4701
    target = makeTarget(
        function() {},
        panic
    )
    // item 4770
    startMachine(
        new ProjectDeleter(),
        spaceId,
        target
    )
}

function descriptionCheckedFolder() {
    var selected
    // item 2673
    selected = getSelectedFolders()
    // item 2674
    if (selected.length == 1) {
        // item 2678
        changeDescription(
            selected[0]
        )
    }
}

function diagramSource() {
    // item 4354
    getEditor().loadSave(true)
}

function differentProjects(id1, id2) {
    var dstSpace, srcSpace
    // item 5393
    srcSpace = parseId(id1).spaceId
    dstSpace = parseId(id2).spaceId
    // item 5394
    if (srcSpace == dstSpace) {
        // item 5397
        return false
    } else {
        // item 5398
        return true
    }
}

function endAsync(onCompleted) {
    // item 2353
    browser.hideWorking()
    // item 2354
    if (onCompleted) {
        // item 2357
        onCompleted()
    }
}

function expandMany(self) {
    var args, current, prev, tree
    while (true) {
        // item 1426
        tree = getWidget("tree")
        // item 1419
        if (pathCompleted(self)) {
            // item 1422
            return true
        }
        // item 1427
        current = self.path[self.current]
        // item 1423
        if (tree.hasItem(current)) {
            
        } else {
            // item 1440
            prev = self.path[self.current - 1]
            // item 1438
            args = {
                id : prev,
                src : "expandMany"
            }
            // item 1439
            startMachine(
                new FolderGetter(),
                args,
                self
            )
            // item 1442
            return false
        }
        // item 1443
        self.current++
    }
}

function expandOne(self, data) {
    var childId, id, prev, success, tree
    // item 1467
    id = self.path[self.current]
    // item 14570001
    var _ind1457 = 0;
    var _col1457 = data.children;
    var _len1457 = _col1457.length;
    while (true) {
        // item 14570002
        if (_ind1457 < _len1457) {
            
        } else {
            // item 1464
            success = false
            break;
        }
        // item 14570004
        var child = _col1457[_ind1457];
        // item 1466
        childId = makeIdFromChild(child)
        // item 1459
        if (childId == id) {
            // item 1468
            tree = getWidget("tree")
            // item 1469
            setTreeChildren(data)
            // item 1470
            prev = makeIdFromChild(data)
            // item 1471
            tree.expand(prev)
            // item 1462
            success = true
            break;
        }
        // item 14570003
        _ind1457++;
    }
    // item 1463
    return success
}

function exportButton(evt, type, widget, id, cellId) {
    var items
    // item 4321
    items = []
    // item 4319
    makeTextListItem(
    	items,
    	"MES_SAVE_AS_PNG",
    	function() { browser.saveAsPng(1) }
    )
    // item 4322
    makeTextListItem(
    	items,
    	"MES_SAVE_AS_PNG_HI",
    	function() { browser.saveAsPng(2) }
    )
    // item 4323
    makeTextListItem(
    	items,
    	"MES_SAVE_AS_SVG",
    	browser.saveAsSvg
    )
    // item 4320
    makeTextListItem(
    	items,
    	"MES_SAVE_AS_JSON",
    	diagramSource
    )
    // item 4315
    browser.showPopupList(
        widget.id,
        items
    )
}

function find(array, predicate) {
    var i, item
    // item 10370001
    i = 0;
    while (true) {
        // item 10370002
        if (i < array.length) {
            
        } else {
            // item 1043
            return -1
        }
        // item 1039
        item = array[i]
        // item 1040
        if (predicate(item)) {
            // item 1044
            return i
        }
        // item 10370003
        i++;
    }
}

function findFeedbackRight() {
    var margin, splitter
    // item 2168
    margin = 50
    // item 2166
    splitter = getWidget("splitter")
    // item 2169
    if (splitter.rightVisible) {
        // item 2164
        return splitter.right + margin
    } else {
        // item 2172
        return margin
    }
}

function findItems(input) {
    var cached, diagram, id, items, needle, path
    // item 6377
    id = globs.current.id
    cached = getFromCache(id)
    path = getPath(cached)
    // item 6363
    items = []
    // item 6362
    needle = Utils.normalizeString(input).text
    diagram = getDiagram()
    // item 6676
    scanItems(
        diagram.nodes,
        needle,
        items,
        cached.name,
        id,
        path
    )
    // item 6677
    scanItems(
        diagram.free,
        needle,
        items,
        cached.name,
        id,
        path
    )
    // item 6364
    return items
}

function findReferences(name) {
    var defs, machine, start
    // item 7184
    killSearchMachine()
    // item 7183
    defs = makeItemSearchDefs()
    // item 7187
    start = {}
    // item 7185
    browser.createSearchList(
        defs,
        start
    )
    // item 7188
    machine = new ReferencesSearch()
    // item 7186
    machine.input = name
    // item 7189
    startSearchMachine(machine)
}

function folderComparer(left, right) {
    // item 970
    if (left.type == right.type) {
        // item 973
        return left.name.localeCompare(right.name)
    } else {
        // item 974
        if (left.type == "folder") {
            // item 976
            return -1
        } else {
            // item 980
            if (right.type == "folder") {
                // item 981
                return 1
            } else {
                // item 973
                return left.name.localeCompare(right.name)
            }
        }
    }
}

function forwardError(self, data) {
    // item 294
    self.target.onError(data)
}

function getActionList(checked) {
    var items
    // item 2709
    items = []
    // item 2711
    if (checked.length > 0) {
        // item 2720
        makeTextListItem(
        	items,
        	"MES_COPY",
        	copyFolders
        )
        // item 2721
        if (isReadonly()) {
            
        } else {
            // item 2724
            makeTextListItem(
            	items,
            	"MES_CUT",
            	cutFolders
            )
            // item 2725
            if (canPasteFolder()) {
                // item 2728
                makeTextListItem(
                	items,
                	"MES_PASTE",
                	pasteFolders
                )
            }
            // item 2723
            makeSeparator(
            	items
            )
            // item 2729
            makeTextListItem(
            	items,
            	"MES_DELETE",
            	deleteFolders
            )
            // item 2747
            if (checked.length == 1) {
                // item 2745
                makeSeparator(
                	items
                )
                // item 2746
                makeTextListItem(
                	items,
                	"MES_RENAME",
                	renameCheckedFolder
                )
            }
        }
    } else {
        // item 2715
        if (canPasteFolder()) {
            // item 2716
            makeTextListItem(
            	items,
            	"MES_PASTE",
            	pasteFolders
            )
        }
    }
    // item 2736
    if (checked.length == 1) {
        // item 2735
        makeTextListItem(
        	items,
        	"MES_DESCRIPTION",
        	descriptionCheckedFolder
        )
    }
    // item 2732
    if (isReadonly()) {
        
    } else {
        // item 2739
        makeSeparator(
        	items
        )
        // item 2730
        makeTextListItem(
        	items,
        	"MES_CREATE_FOLDER",
        	createFolder
        )
        // item 2731
        makeTextListItem(
        	items,
        	"MES_CREATE_DIAGRAM",
        	createDiagram
        )
    }
    // item 2750
    return items
}

function getCurrent() {
    var current, ids
    // item 1628
    current = globs.current
    // item 1629
    ids = {
        spaceId : null,
        folderId : null
    }
    // item 1625
    if (current.id) {
        // item 1630
        ids = parseId(current.id)
    }
    // item 143
    return {
        type : current.type,
        screen : current.screen,
        spaceId : ids.spaceId,
        folderId : ids.folderId
    }
}

function getCurrentParent(id) {
    var current
    // item 2480
    if (id) {
        // item 2482
        return id
    } else {
        // item 2468
        current = globs.current
        // item 2469
        if (current.id) {
            // item 2473
            if (current.type == "folder") {
                // item 2476
                return current.id
            } else {
                // item 2477
                return current.parent
            }
        } else {
            // item 2472
            return null
        }
    }
}

function getDiagram() {
    // item 148
    if (globs.current.screen == "middle_diagram") {
        // item 147
        return browser.getEditor().getDiagram()
    } else {
        // item 151
        return null
    }
}

function getEditor() {
    // item 1733
    return browser.getEditor()
}

function getFromCache(id) {
    // item 3541
    return globs.folders[id] || null
}

function getHandler(handlers, widget, type) {
    var handler, widgetHandler
    // item 721
    widgetHandler = handlers[widget.signalId]
    // item 722
    if (widgetHandler) {
        // item 726
        handler = widgetHandler[type]
        // item 725
        if (handler) {
            // item 727
            return handler
        } else {
            // item 720
            return null
        }
    } else {
        // item 720
        return null
    }
}

function getImage(type) {
    var image
    // item 5310001
    if (type === "space") {
        // item 541
        image = "workspace-s2.png"
    } else {
        // item 5310002
        if (type === "folder") {
            // item 542
            image = "folder-s2.png"
        } else {
            // item 5310003
            if (type === "drakon") {
                // item 543
                image = "list-drakon2.png"
            } else {
                // item 5310004
                if (type === "mind") {
                    // item 6688
                    image = "list-mind.png"
                } else {
                    // item 5310005
                    if (type === "free") {
                        
                    } else {
                        // item 5310006
                        throw "Unexpected switch value: " + type;
                    }
                    // item 544
                    image = "list-free.png"
                }
            }
        }
    }
    // item 546
    return image
}

function getItemsToCopy(id) {
    var checked
    // item 3788
    checked = getSelectedFolders()
    // item 3789
    if (checked.length == 0) {
        // item 3793
        return [id]
    } else {
        // item 3792
        return checked
    }
}

function getLeftSplitterVisible() {
    var cookie
    // item 2810
    if (globs.wide) {
        // item 6756
        cookie = HtmlUtils.getCookie("splitter-left-vis")
        // item 6757
        return parseSplitterVisible(cookie)
    } else {
        // item 2813
        return false
    }
}

function getLeftSplitterWidth() {
    var cookie, value
    // item 2783
    if (globs.wide) {
        // item 2787
        cookie = HtmlUtils.getCookie("splitter-left")
        value = parseSplitterValue(cookie)
        // item 2782
        return value
    } else {
        // item 2786
        return 200
    }
}

function getNormalName(folder) {
    // item 921
    if (isSpace(folder)) {
        // item 925
        return folder.space_id
    } else {
        // item 924
        return folder.name
    }
}

function getPath(folder) {
    var i, steps
    // item 6385
    steps = [folder.space_id]
    // item 63830001
    i = 1;
    while (true) {
        // item 63830002
        if (i < folder.path.length - 1) {
            
        } else {
            break;
        }
        // item 6386
        steps.push(folder.path[i].name)
        // item 63830003
        i++;
    }
    // item 6387
    return steps.join("/")
}

function getRank(type) {
    // item 573
    if (type == "folder") {
        // item 576
        return 10
    } else {
        // item 577
        return 20
    }
}

function getRecent() {
    // item 6821
    return globs.user.recent
}

function getRightSplitterVisible() {
    var cookie
    // item 2822
    if (globs.wide) {
        // item 2826
        cookie = HtmlUtils.getCookie("splitter-right-vis")
        // item 6755
        return parseSplitterVisible(cookie)
    } else {
        // item 2825
        return false
    }
}

function getRightSplitterWidth() {
    var cookie, value
    // item 2797
    if (globs.wide) {
        // item 6743
        cookie = HtmlUtils.getCookie("splitter-right")
        value = parseSplitterValue(cookie)
        // item 2796
        return value
    } else {
        // item 2800
        return 200
    }
}

function getSelectedFolders() {
    var folders, status
    // item 2652
    folders = getWidget("folder_grid")
    status = folders.getChecked()
    // item 2651
    return status.checked
}

function getSpaces() {
    var spaces
    // item 6816
    spaces = Object.keys(globs.user.spaces)
    spaces.sort()
    // item 6815
    return spaces
}

function getTime() {
    // item 1977
    var date = new Date()
    return date.getTime()
}

function getWidget(id) {
    // item 272
    return browser.widgets.getWidget(id)
}

function globalSearch(evt, type, widget, id, cellId) {
    var input, msg
    // item 6242
    if (globs.searchThrottle) {
        // item 6178
        input = widget.getValue()
        input = input.trim()
        // item 6283
        msg = {
            input : input,
            widgetId : widget.id
        }
        // item 6241
        globs.searchThrottle.onInput(msg)
    }
}

function globalSearchEscape(evt, type, widget, id, cellId) {
    // item 6557
    browser.cancelSearch()
}

function goHome() {
    // item 4555
    browser.goToUrl("/")
}

function goToAccount() {
    // item 4372
    browser.goToUrl("/account")
}

function goToDashboard(onCompleted) {
    var tree
    // item 6851
    willChangeScreen()
    // item 6849
    tree = getWidget("tree")
    tree.deselect()
    // item 6850
    showDashboard()
    // item 6852
    browser.hideWorking()
    // item 6855
    if (onCompleted) {
        // item 6854
        onCompleted()
    }
}

function goToFolder(id, onCompleted) {
    var start
    // item 6696
    willChangeScreen()
    // item 6695
    start = {
        id : id
    }
    // item 6694
    startAsync(
        new GoToFolderMachine(),
        start,
        onCompleted
    )
}

function goToItem(id, itemId) {
    var center, editor
    // item 6035
    editor = getEditor()
    // item 6032
    if ((isDiagram()) && (globs.current.id == id)) {
        // item 6037
        editor.centerItem(itemId)
    } else {
        // item 6038
        center = function() {
            editor.centerItem(itemId)
        }
        // item 6039
        goToFolder(id, center)
    }
}

function goToProjects(onCompleted) {
    var tree
    // item 1649
    willChangeScreen()
    // item 1581
    tree = getWidget("tree")
    tree.deselect()
    // item 1582
    showSpacesInFolder()
    // item 2184
    browser.hideWorking()
    // item 2361
    if (onCompleted) {
        // item 2360
        onCompleted()
    }
}

function goToProjectsNoArg() {
    // item 6888
    goToProjects(null)
}

function goToRecent(onCompleted) {
    var tree
    // item 5299
    willChangeScreen()
    // item 5297
    tree = getWidget("tree")
    tree.deselect()
    // item 5298
    showRecent()
    // item 5300
    browser.hideWorking()
    // item 5303
    if (onCompleted) {
        // item 5302
        onCompleted()
    }
}

function goToTrash(onCompleted) {
    // item 4984
    willChangeScreen()
    // item 5162
    startAsync(
        new TrashLoader(),
        null,
        onCompleted
    )
}

function goUp() {
    var parent
    // item 1573
    parent = globs.current.parent
    // item 1574
    if (parent) {
        // item 6949
        goToFolder(
            parent,
            null
        )
    } else {
        // item 1583
        goToProjects(null)
    }
}

function hardGoToFolder(userId, diagramId) {
    var url
    // item 5879
    url = "/" + IDE + "/doc/" + userId +
    	"/" + diagramId
    // item 5880
    browser.goToUrl(url)
}

function hasDifferentTag(saver, data) {
    // item 2013
    var time = parseInt(data.time)
    // item 2014
    if (time < saver.lastIo) {
        // item 2016
        return false
    } else {
        // item 2005
        if ((data.tag == saver.oldTag) || (data.tag == saver.newTag)) {
            // item 2011
            return false
        } else {
            // item 2012
            return true
        }
    }
}

function hasMoreFontsToLoad(self) {
    // item 1817
    if (self.fontId < self.fonts.length) {
        // item 1815
        return true
    } else {
        // item 1816
        return false
    }
}

function hasMoreToSave(saver) {
    // item 2038
    if (saver.queue.length > 0) {
        // item 2041
        return true
    } else {
        // item 2042
        return false
    }
}

function hideCentral() {
    // item 2502
    browser.hideCentral()
}

function idToServerFolder(id) {
    var parsed
    // item 3167
    parsed = parseId(id)
    // item 3168
    return {
        space_id : parsed.spaceId,
        id : parsed.folderId
    }
}

function init() {
    var parts, target
    // item 130
    if (browser.getWidth() >= 700) {
        // item 133
        globs.wide = true
    } else {
        // item 134
        globs.wide = false
    }
    // item 128
    globs.isDev = isDevUrl()
    globs.isTryMe = isTryMeUrl()
    globs.clipboard = new browser.Clipboard()
    // item 123
    browser.initControls(
        globs.wide,
        globs.isTryMe
    )
    // item 2514
    bindEditor()
    // item 6601
    resetSearch()
    // item 747
    browser.widgets.foreach(putAsidePath)
    browser.widgets.foreach(putAsideSearches)
    // item 120
    parts = parsePath()
    // item 155
    target = {
        onData : browser.onInitCompleted,
        onError : panic
    }
    // item 121
    if (parts.length >= 2) {
        // item 2843
        loadSplitterValues()
        // item 126
        initNormal(parts, target)
    } else {
        // item 127
        initTryMe(target)
    }
}

function initNormal(parts, target) {
    var folderId, spaceId
    var _sw500000_ = 0;
    // item 45
    if (parts[0] == IDE) {
        // item 500000
        _sw500000_ = parts[1];
        // item 500001
        if (_sw500000_ === "doc") {
            // item 59
            if (parts.length == 4) {
                // item 46
                folderId = parts[3]
                // item 48
                spaceId = parts[2]
                // item 47
                sv_folder(spaceId, folderId, target)
            } else {
                // item 49
                panic("ERR_BAD_PATH")
            }
        } else {
            // item 500002
            if (_sw500000_ === "trash") {
                // item 58
                sv_trash(target)
            } else {
                // item 500003
                if (_sw500000_ === "spaces") {
                    // item 61
                    sv_spaces(target)
                } else {
                    // item 500004
                    if (_sw500000_ === "recent") {
                        // item 64
                        sv_recent(target)
                    } else {
                        // item 500005
                        if (_sw500000_ === "dashboard") {
                            // item 6871
                            sv_dashboard(target)
                        } else {
                            // item 44
                            panic("ERR_BAD_PATH")
                        }
                    }
                }
            }
        }
    } else {
        // item 44
        panic("ERR_BAD_PATH")
    }
}

function initTryMe(target) {
    // item 113
    if (gUserId) {
        // item 116
        browser.goToUrl("/")
    } else {
        // item 111
        startMachine(
            new TryMeLoader(),
            null,
            target
        )
    }
}

function isAnyCurrent(folders) {
    var currentId, item, tree
    // item 3466
    if (globs.current) {
        // item 3334
        currentId = globs.current.id
        // item 3336
        if (currentId) {
            // item 3358
            tree = getWidget("tree")
            // item 33270001
            var _ind3327 = 0;
            var _col3327 = folders;
            var _len3327 = _col3327.length;
            while (true) {
                // item 33270002
                if (_ind3327 < _len3327) {
                    
                } else {
                    // item 3333
                    return false
                }
                // item 33270004
                var folder = _col3327[_ind3327];
                // item 3357
                if (tree.hasItem(folder)) {
                    // item 3356
                    item = tree.getItem(folder)
                    // item 3329
                    if (isUnderFolder(currentId, item)) {
                        // item 3332
                        return true
                    }
                }
                // item 33270003
                _ind3327++;
            }
        } else {
            // item 3338
            return false
        }
    } else {
        // item 3338
        return false
    }
}

function isDevUrl() {
    var url
    // item 9
    url = browser.getUrl()
    // item 10
    return url.indexOf("dev=true") != -1
}

function isDiagram() {
    // item 4578
    if (globs.current.screen == "middle_diagram") {
        // item 4581
        return true
    } else {
        // item 4582
        return false
    }
}

function isDiagramOrFolder() {
    var _sw45860000_ = 0;
    // item 45860000
    _sw45860000_ = globs.current.screen;
    // item 45860001
    if (_sw45860000_ === "middle_folder") {
        // item 4594
        return true
    } else {
        // item 45860002
        if (_sw45860000_ === "middle_diagram") {
            // item 4595
            return true
        } else {
            // item 45860003
            if (_sw45860000_ === "middle_spaces") {
                // item 5292
                return false
            } else {
                // item 4596
                return false
            }
        }
    }
}

function isFolder() {
    // item 5411
    if (globs.current.screen == "middle_folder") {
        // item 5414
        return true
    } else {
        // item 5415
        return false
    }
}

function isInPrevious(id) {
    var found
    // item 1190
    found = globs.current.previous.indexOf(id)
    // item 1191
    if (found == -1) {
        // item 1195
        return false
    } else {
        // item 1193
        return true
    }
}

function isReadonly() {
    // item 1950
    return !!globs.current.isReadonly
}

function isReadonlyAccess(folder) {
    // item 4967
    if (folder.access) {
        // item 4971
        return folder.access == "read"
    } else {
        // item 4970
        return true
    }
}

function isSpace(data) {
    // item 552
    if (data.id == "1") {
        // item 555
        return true
    } else {
        // item 556
        return false
    }
}

function isTryMeUrl() {
    var path
    // item 14
    path = browser.getPath()
    // item 15
    return path == "/try-me"
}

function isTypeDiagram(type) {
    // item 70440001
    if (((type === "drakon") || (type === "free")) || (type === "mind")) {
        // item 7055
        return true
    } else {
        // item 7056
        return false
    }
}

function isUnderFolder(currentId, item) {
    // item 3344
    if (currentId == item.id) {
        // item 3347
        return true
    } else {
        // item 33490001
        var _ind3349 = 0;
        var _col3349 = item.kids;
        var _len3349 = _col3349.length;
        while (true) {
            // item 33490002
            if (_ind3349 < _len3349) {
                
            } else {
                // item 3355
                return false
            }
            // item 33490004
            var child = _col3349[_ind3349];
            // item 3351
            if (isUnderFolder(currentId, child)) {
                // item 3354
                return true
            }
            // item 33490003
            _ind3349++;
        }
    }
}

function killMachine(machine) {
    // item 6607
    if (machine) {
        // item 6610
        machine.state = null
    }
}

function killSearchMachine() {
    // item 7090
    killMachine(globs.searchMachine)
    globs.searchMachine = null
}

function loadNextFont(self) {
    // item 1808
    var font = self.fonts[self.fontId]
    // item 1809
    self.fontId++
    // item 1807
    browser.loadFontCore(
    	font,
    	self
    )
}

function loadSplitterValues() {
    var editor, widget
    // item 2858
    editor = getEditor()
    // item 2836
    if ((globs.isTryMe) || (!(globs.wide))) {
        // item 6020
        closeRightPaneCore(true)
        closeLeftPaneCore(true)
    } else {
        // item 2835
        widget = getWidget("splitter")
        // item 2841
        widget.left = getLeftSplitterWidth()
        widget.right = getRightSplitterWidth()
        widget.leftVisible = getLeftSplitterVisible()
        widget.rightVisible = getRightSplitterVisible()
        // item 4442
        globs.leftPaneStatus = new PaneStatus()
        globs.leftPaneStatus.showPane = openLeftPaneCore
        globs.leftPaneStatus.hidePane = closeLeftPaneCore
        // item 4443
        globs.rightPaneStatus = new PaneStatus()
        globs.rightPaneStatus.showPane = openRightPaneCore
        globs.rightPaneStatus.hidePane = closeRightPaneCore
        // item 2853
        if (widget.leftVisible) {
            // item 4449
            globs.leftPaneStatus.state = "Visible"
            // item 2856
            editor.hideLeftButton(
                globs.openLeftIndex
            )
        } else {
            // item 4448
            globs.leftPaneStatus.state = "Hidden"
            // item 2859
            editor.showLeftButton(
                globs.openLeftIndex
            )
        }
        // item 2860
        if (widget.rightVisible) {
            // item 4451
            globs.rightPaneStatus.state = "Visible"
            // item 2857
            editor.hideRightButton(
                globs.openRightIndex
            )
        } else {
            // item 4450
            globs.rightPaneStatus.state = "Hidden"
            // item 2863
            editor.showRightButton(
                globs.openRightIndex
            )
        }
    }
}

function login() {
    
}

function logonFirst() {
    var url
    // item 6964
    url = makeLogonUrl()
    // item 6965
    browser.goToUrl(url)
}

function makeDashboardUrl() {
    // item 6841
    var url = "/" + IDE + "/dashboard"
    // item 6842
    return url
}

function makeDiagramSearchDefs() {
    // item 6355
    var defs = [
    	{
    		id: "items",
    		name: translate("MES_SHOW_DIAGRAM_CONTENT"),
    		items: []
    	},
    	{
    		id: "folders",
    		name: translate("MES_FOLDERS"),
    		items: []
    	},
    	{
    		id: "allItems",
    		name: translate("MES_SHOW_ALL_DIAGRAM_CONTENT"),
    		items: []
    	}
    ]
    // item 6356
    return defs
}

function makeEmptyTarget() {
    // item 6238
    return {
        onData : function(){},
        onError : function(){}
    }
}

function makeErrorMessage(data) {
    // item 4960
    var message = Utils.makeErrorMessage(data)
    // item 4961
    return translate(message)
}

function makeFolderUrl(spaceId, folderId) {
    var url
    // item 2283
    url = "/" + IDE + "/doc/" +
      spaceId + "/" + folderId
    // item 2284
    return url
}

function makeId(spaceId, folderId) {
    // item 285
    return spaceId + " " + folderId
}

function makeIdFromChild(folder) {
    // item 1455
    return makeId(
        folder.space_id,
        folder.id
    )
}

function makeIdFromFolder(folder) {
    // item 286
    return makeId(
        folder.space_id,
        folder.folder_id
    )
}

function makeImageCell(type) {
    var image
    // item 950
    image = getImage(type)
    // item 1602
    return makeImageCellCore(image)
}

function makeImageCellCore(image) {
    // item 1601
    return {
        src : image,
        width : 30,
        height : 30,
        paddingLeft : "4px",
        paddingRight : "4px"
    }
}

function makeItemSearchDefs() {
    // item 7094
    var defs = [
    	{
    		id: "allItems",
    		name: translate("MES_SHOW_ALL_DIAGRAM_CONTENT"),
    		items: []
    	}
    ]
    // item 7095
    return defs
}

function makeLogonUrl() {
    // item 6959
    var url = "/logon?tgt=" + browser.getUrl()
    // item 6958
    return url
}

function makeRecentItem(list, spaceId, folderId, name) {
    
}

function makeRecentTitle() {
    // item 2315
    var title = translate("MES_RECENT") + " - " + AppName
    // item 2316
    return title
}

function makeRecentUrl() {
    // item 2310
    var url = "/" + IDE + "/recent"
    // item 2311
    return url
}

function makeSeparator(list) {
    // item 2551
    var item = {
    	type: "separator"
    }
    // item 2552
    list.push(item)
}

function makeSpaceName(name) {
    // item 6709
    name = name.trim()
    // item 6710
    return name.replace(/ /g, "_")
}

function makeSpacesTitle() {
    // item 2298
    var title = translate("MES_SPACES") + " - " + AppName
    // item 2299
    return title
}

function makeSpacesUrl(spaceId, folderId) {
    var url
    // item 2305
    url =  "/" + IDE + "/spaces"
    // item 2306
    return url
}

function makeSure1(spaceId) {
    // item 4769
    var text = translate("MES_SURE_DELETE_SPACE") +
      " " + spaceId + "?"
    // item 4766
    var titleLabel = {
    	type: "wlabel",
    	text: "MES_DELETE_SPACE",
    	textAlign: "center",
    	style: {
    		fontSize: "110%",
    		fontWeight: "bold"
    	}
    }
    // item 4764
    var lab = {
    	type: "wlabel",
    	text: text,
    	raw: true,
    	style: {
    		fontSize: "100%",
    		textAlign: "left"
    	}
    }
    // item 4767
    var confirm = {
    	signalId: "sendToCentralMachine",
    	type: "wbutton",
    	text: "MES_DELETE_SPACE",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 4765
    var cancel = {
    	signalId: "hideCentral",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 4763
    var root = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 10,
    	kids: [titleLabel, lab, confirm, cancel]
    }
    // item 4768
    return root
}

function makeSure2(spaceId) {
    // item 4794
    var titleLabel = {
    	type: "wlabel",
    	text: "MES_ATTENTION",
    	textAlign: "center",
    	style: {
    		fontSize: "110%",
    		fontWeight: "bold"
    	}
    }
    // item 4792
    var lab = {
    	type: "wlabel",
    	text: "MES_SURE_DELETE_SPACE2",
    	style: {
    		fontSize: "100%",
    		textAlign: "left"
    	}
    }
    // item 4795
    var confirm = {
    	signalId: "sendToCentralMachine",
    	type: "wbutton",
    	text: "MES_DELETE_SPACE",
    	style: {
    		color: "white",
    		background: "red",
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 4793
    var cancel = {
    	signalId: "hideCentral",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 4791
    var root = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 10,
    	kids: [titleLabel, lab, confirm, cancel]
    }
    // item 4796
    return root
}

function makeTarget(onData, onError) {
    // item 518
    return {
        onData : onData,
        onError : onError
    }
}

function makeTextCell(text) {
    // item 964
    return {
        text : text
    }
}

function makeTextListItem(list, textId, action, id, image) {
    // item 2544
    var item = {
    	text: translate(textId),
    	code: action,
    	id: id,
    	image: image
    }
    // item 2545
    list.push(item)
}

function makeTitle(spaceId, folderId, name) {
    // item 2274
    if (folderId == "1") {
        // item 2277
        name = spaceId
    }
    // item 2272
    var title = name
    // item 2273
    return title
}

function makeTopCodes() {
    // item 884
    return {
        "middle_folder" : "top_folder",
        "middle_diagram" : "top_diagram",
        "middle_recent" : "top_empty",
        "middle_trash" : "top_empty",
        "middle_dashboard" : "top_empty",
        "middle_spaces" : "top_spaces"
    }
}

function makeTopCodesNu() {
    // item 894
    return {
        "middle_folder" : "top_folder_nu",
        "middle_diagram" : "top_diagram_nu",
        "middle_spaces" : "top_spaces_nu"
    }
}

function makeTopCodesRo() {
    // item 889
    return {
        "middle_folder" : "top_folder_ro",
        "middle_diagram" : "top_diagram_ro",
        "middle_recent" : "top_empty",
        "middle_trash" : "top_empty",
        "middle_spaces" : "top_spaces"
    }
}

function makeTrashTitle() {
    // item 2293
    var title = translate("MES_DELETED_ITEMS") + " - " + AppName
    // item 2294
    return title
}

function makeTrashUrl() {
    // item 2288
    var url = "/" + IDE + "/trash"
    // item 2289
    return url
}

function markPreviousSpace(spaces) {
    var id, spacesWidget
    // item 4651
    spacesWidget = getWidget("middle_spaces")
    // item 46480001
    var _ind4648 = 0;
    var _col4648 = spaces;
    var _len4648 = _col4648.length;
    while (true) {
        // item 46480002
        if (_ind4648 < _len4648) {
            
        } else {
            break;
        }
        // item 46480004
        var spaceId = _col4648[_ind4648];
        // item 4649
        id = makeId(spaceId, "1")
        // item 4644
        if (isInPrevious(id)) {
            // item 4647
            spacesWidget.mark(id)
            break;
        }
        // item 46480003
        _ind4648++;
    }
}

function onActionsClick(evt, type, widget, id, cellId) {
    var folders, items, status
    // item 2553
    folders = getWidget("folder_grid")
    status = folders.getChecked()
    // item 2538
    items = getActionList(
        status.checked
    )
    // item 2753
    if (items.length) {
        // item 2752
        browser.showPopupList(
            widget.id,
            items
        )
    }
}

function onCheckAll(evt, type, widget, id, cellId) {
    var checked, folders
    // item 1150
    folders = getWidget("folder_grid")
    // item 1145
    checked = folders.getChecked()
    // item 1147
    if (widget.isChecked) {
        // item 11510001
        var _ind1151 = 0;
        var _col1151 = checked.unchecked;
        var _len1151 = _col1151.length;
        while (true) {
            // item 11510002
            if (_ind1151 < _len1151) {
                
            } else {
                break;
            }
            // item 11510004
            var id = _col1151[_ind1151];
            // item 1153
            folders.check(id)
            // item 11510003
            _ind1151++;
        }
    } else {
        // item 11540001
        var _ind1154 = 0;
        var _col1154 = checked.checked;
        var _len1154 = _col1154.length;
        while (true) {
            // item 11540002
            if (_ind1154 < _len1154) {
                
            } else {
                break;
            }
            // item 11540004
            var id = _col1154[_ind1154];
            // item 1156
            folders.uncheck(id)
            // item 11540003
            _ind1154++;
        }
    }
    // item 1157
    updateActionList()
}

function onDelete(id) {
    // item 3194
    deleteFromHistory(id)
    // item 3195
    deleteFromTree(id)
    // item 3456
    deleteFromGrid(id)
    // item 3559
    removeFromCache(id)
}

function onDiagramError(data) {
    // item 2081
    var saver = globs.saver
    // item 2082
    if (saver) {
        // item 2075
        if (data.error == "ERR_MODIFIED") {
            // item 2078
            browser.showNotification(
                translate("ERR_MODIFIED")
            )
            // item 2079
            saver.notSaved()
        } else {
            // item 2080
            saver.onError(data)
        }
    }
}

function onDiagramSaved() {
    // item 2089
    var saver = globs.saver
    // item 2090
    if (saver) {
        // item 2088
        saver.saved()
    }
}

function onEvent(evt, type, widget, rowId, cellId) {
    var ctr, handler, start
    // item 422
    handler = getHandler(
        globs.handlers,
        widget,
        type
    )
    // item 423
    if (handler) {
        // item 428
        handler(
            evt,
            type,
            widget,
            rowId,
            cellId
        )
    } else {
        // item 729
        ctr = getHandler(
            globs.machineHandlers,
            widget,
            type
        )
        // item 426
        if (ctr) {
            // item 728
            start = {
                evt : evt,
                type : type,
                widget : widget,
                rowId : rowId,
                cellId : cellId
            }
            // item 731
            startAsync(
                new ctr(),
                start,
                null
            )
        }
    }
}

function onFolderClick(evt, type, widget, id, cellId) {
    // item 1127
    if (cellId == 0) {
        // item 1130
        if (widget.isChecked(id)) {
            // item 1139
            widget.uncheck(id)
        } else {
            // item 1124
            widget.check(id)
        }
        // item 1138
        updateActionList()
    } else {
        // item 1563
        goToFolder(id)
    }
}

function onFolderGridContext(evt, widget, id) {
    var folder, list, parent, toCopy
    // item 3746
    HtmlUtils.stopPropagation(evt)
    // item 3728
    parent = globs.current.id
    list = []
    // item 3745
    widget.mark(id)
    // item 3794
    toCopy = getItemsToCopy(id)
    // item 7065
    folder = globs.folders[id]
    // item 7061
    if (shouldFindReferences(folder.type)) {
        // item 7064
        makeTextListItem(
            list,
            "MES_FIND_REFERENCES",
            function() {findReferences(folder.name)}
        )
        // item 7066
        makeSeparator(
            list
        )
    }
    // item 3727
    makeTextListItem(
        list,
        "MES_COPY",
        function() {copyFoldersCore(toCopy)}
    )
    // item 3729
    if (isReadonly()) {
        
    } else {
        // item 3733
        makeTextListItem(
            list,
            "MES_CUT",
            function() {cutFoldersCore(parent, toCopy)}
        )
        // item 3735
        if (canPasteFolder()) {
            // item 3736
            makeTextListItem(
                list,
                "MES_PASTE",
                pasteFolders
            )
        }
        // item 3734
        makeSeparator(
            list
        )
        // item 3737
        makeTextListItem(
            list,
            "MES_DELETE",
            function() {deleteFoldersCore(parent, toCopy)},
            null,
            "delete.png"
        )
        // item 3795
        makeSeparator(
            list
        )
        // item 3740
        makeTextListItem(
            list,
            "MES_RENAME",
            function() {rename(id)}
        )
        // item 3749
        makeTextListItem(
        	list,
        	"MES_DESCRIPTION",
        	function() {changeDescription(id)}
        )
        // item 3796
        makeSeparator(
            list
        )
        // item 3807
        makeTextListItem(
            list,
            "MES_CREATE_FOLDER",
            createFolder,
            null,
            "folder-s2.png"
        )
        // item 3808
        makeTextListItem(
            list,
            "MES_CREATE_DIAGRAM",
            createDiagram,
            null,
            "to-primitive-s2.png"
        )
    }
    // item 3990
    showContextMenu(
        evt,
        list
    )
    // item 3726
    return false
}

function onFolderGridContextBack(evt, widget) {
    var list
    // item 3758
    list = []
    // item 3759
    if (isReadonly()) {
        
    } else {
        // item 3818
        if (canPasteFolder()) {
            // item 3819
            makeTextListItem(
                list,
                "MES_PASTE",
                pasteFolders
            )
            // item 3815
            makeSeparator(
                list
            )
        }
        // item 3816
        makeTextListItem(
            list,
            "MES_CREATE_FOLDER",
            createFolder,
            null,
            "folder-s2.png"
        )
        // item 3817
        makeTextListItem(
            list,
            "MES_CREATE_DIAGRAM",
            createDiagram,
            null,
            "to-primitive-s2.png"
        )
    }
    // item 3989
    showContextMenu(
        evt,
        list
    )
    // item 3811
    return false
}

function onFolderSearch(evt, type, widget, id, cellId) {
    var contains, filtered, folders, value
    // item 1100
    value = widget.getValue().trim()
    // item 1108
    folders = globs.current.folders
    // item 1103
    if (value) {
        // item 1102
        value = value.toLowerCase()
        // item 1109
        contains = function(row) {
            return rowContainsText(row, 1, value)
        }
        // item 1110
        filtered = folders.filter(contains)
        // item 1111
        setItemsInFolderGrid(filtered)
    } else {
        // item 1107
        setItemsInFolderGrid(folders)
    }
    // item 2689
    updateActionList()
}

function onFoldersContext(evt, type, widget, id, cellId) {
    // item 3778
    if (id) {
        // item 3781
        onFolderGridContext(
            evt,
            widget,
            id
        )
    } else {
        // item 3782
        onFolderGridContextBack(
            evt,
            widget
        )
    }
}

function onPasteError(data) {
    // item 3098
    browser.hideWorking()
    // item 3093
    if (data.error == "ERR_DIAGRAM_LIMIT") {
        // item 3097
        browser.suggest(
            data.error,
            "team"
        )
    } else {
        // item 3096
        panic(data)
    }
}

function onProjectClick(evt, type, widget, id, cellId) {
    var spacesWidget
    // item 4669
    spacesWidget = getWidget("middle_spaces")
    // item 4620
    if (cellId == 2) {
        // item 4670
        spacesWidget.mark(id)
        // item 4652
        showProjectMenu(
            evt.clientX,
            evt.clientY,
            id
        )
    } else {
        // item 4628
        goToFolder(id)
    }
}

function onProjectContext(evt, type, widget, id, cellId) {
    var folder, isAdmin, list, spaceId, spacesWidget
    // item 4681
    spacesWidget = getWidget("middle_spaces")
    // item 4676
    if (id) {
        // item 4682
        spacesWidget.mark(id)
        // item 4689
        list = []
        // item 4684
        makeTextListItem(
            list,
            "MES_DESCRIPTION",
            function() {changeDescription(id)}
        )
        // item 4693
        folder = globs.folders[id]
        // item 4692
        isAdmin = (folder.access == "admin")
        // item 4686
        if (isAdmin) {
            // item 4694
            spaceId = parseId(id).spaceId
            // item 4685
            makeSeparator(list)
            // item 4683
            makeTextListItem(
                list,
                "MES_ACCESS",
                function() {showAccessScreen(spaceId, null)}
            )
        }
        // item 4690
        showContextMenu(
            evt,
            list
        )
    }
}

function onRecentClick(evt, type, widget, id, cellId) {
    // item 1564
    goToFolder(id)
}

function onSearchItem(type, target) {
    // item 63160001
    if (type === "folder") {
        // item 6324
        goToFolder(
            target,
            null
        )
    } else {
        // item 63160002
        if (type === "item") {
            // item 6391
            goToItem(
                target.id,
                target.itemId
            )
        }
    }
}

function onSplitterResize() {
    // item 2183
    updateFeedbackPos()
    // item 2769
    saveSplitterValues()
}

function onStateChange(data, onCompleted) {
    var _sw23300000_ = 0;
    // item 23300000
    _sw23300000_ = data.type;
    // item 23300001
    if (_sw23300000_ === "folder") {
        // item 2340
        goToFolder(data.id, onCompleted)
    } else {
        // item 23300002
        if (_sw23300000_ === "projects") {
            // item 2341
            goToProjects(onCompleted)
        } else {
            // item 23300003
            if (_sw23300000_ === "trash") {
                // item 5225
                goToTrash(onCompleted)
            } else {
                // item 23300004
                if (_sw23300000_ === "recent") {
                    // item 6845
                    goToRecent(onCompleted)
                } else {
                    // item 23300005
                    if (_sw23300000_ === "dashboard") {
                        
                    } else {
                        // item 23300006
                        throw "Unexpected switch value: " + _sw23300000_;
                    }
                    // item 5368
                    goToDashboard(onCompleted)
                }
            }
        }
    }
}

function onTag(data) {
    // item 1983
    var saver = globs.saver
    // item 1984
    if (saver) {
        // item 1987
        saver.onTag(data)
    }
}

function onTagError(data) {
    // item 1993
    var saver = globs.saver
    // item 1994
    if (saver) {
        // item 1997
        saver.onError(data)
    }
}

function onTrashClick(evt, type, widget, id, cellId) {
    // item 5232
    if (cellId == 2) {
        // item 5235
        startAsync(
            new Restorer(),
            id,
            null
        )
    }
}

function onTreeContext(evt, type, widget, id) {
    // item 4072
    if (id) {
        // item 4075
        onTreeContextFolder(
            evt,
            widget,
            id
        )
    } else {
        // item 6722
        if (globs.user.userId) {
            // item 6721
            onTreeContextBack(
                evt,
                widget
            )
        }
    }
}

function onTreeContextBack(evt, tree) {
    var list
    // item 6717
    list = []
    // item 6719
    makeTextListItem(
        list,
        "MES_CREATE_SPACE",
        createProject,
        null,
        "workspace-s2.png"
    )
    // item 6720
    showContextMenu(
        evt,
        list
    )
    // item 6718
    return false
}

function onTreeContextFolder(evt, tree, id) {
    var folder, into, isAdmin, isReadonly, isSpace, list
    // item 6890
    CallTrace.add(
        "onTreeContextFolder",
        [id]
    )
    // item 4019
    tree.mark(id)
    // item 4001
    list = []
    // item 3997
    if (id == "trash") {
        // item 4003
        makeTextListItem(
            list,
            "MES_CLEAR_TRASH",
            clearRubbish
        )
    } else {
        // item 6889
        if (id == "dashboard") {
            
        } else {
            // item 4039
            folder = globs.folders[id]
            // item 4067
            if (folder.type == "folder") {
                // item 4070
                into = id
            } else {
                // item 4071
                into = folder.parent
            }
            // item 4000
            isSpace = (folder.folderId == "1")
            isReadonly = isReadonlyAccess(folder)
            isAdmin = (folder.access == "admin")
            // item 4004
            if (isSpace) {
                
            } else {
                // item 7057
                if (shouldFindReferences(folder.type)) {
                    // item 7060
                    makeTextListItem(
                        list,
                        "MES_FIND_REFERENCES",
                        function() {findReferences(folder.name)}
                    )
                    // item 7067
                    makeSeparator(
                        list
                    )
                }
                // item 4007
                makeTextListItem(
                    list,
                    "MES_COPY",
                    function() {copyFoldersCore([id])}
                )
                // item 4036
                if (isReadonly) {
                    
                } else {
                    // item 4011
                    makeTextListItem(
                        list,
                        "MES_CUT",
                        function() {cutFoldersCore(folder.parent, [id])}
                    )
                }
            }
            // item 4008
            if (isReadonly) {
                
            } else {
                // item 4053
                if (clipboardContainsFolders()) {
                    // item 4014
                    makeTextListItem(
                        list,
                        "MES_PASTE",
                        function(){pasteFoldersCore(into)}
                    )
                }
                // item 4012
                makeSeparator(
                    list
                )
                // item 4020
                if (isSpace) {
                    // item 4023
                    if (isAdmin) {
                        // item 4025
                        makeTextListItem(
                            list,
                            "MES_ACCESS",
                            function() {showAccessScreen(folder.spaceId, null)}
                        )
                    }
                    // item 4059
                    makeSeparator(
                        list
                    )
                    // item 4030
                    makeTextListItem(
                        list,
                        "MES_CREATE_FOLDER",
                        function() {createFolderCore(into)},
                        null,
                        "folder-s2.png"
                    )
                    // item 4031
                    makeTextListItem(
                        list,
                        "MES_CREATE_DIAGRAM",
                        function() {createDiagramCore(into)},
                        null,
                        "to-primitive-s2.png"
                    )
                } else {
                    // item 4021
                    makeTextListItem(
                        list,
                        "MES_DELETE",
                        function() {deleteFoldersCore(folder.parent, [id])},
                        null,
                        "delete.png"
                    )
                    // item 4058
                    makeSeparator(
                        list
                    )
                    // item 4029
                    makeTextListItem(
                        list,
                        "MES_RENAME",
                        function() {rename(id)}
                    )
                    // item 4032
                    if (folder.type == "folder") {
                        // item 4059
                        makeSeparator(
                            list
                        )
                        // item 4030
                        makeTextListItem(
                            list,
                            "MES_CREATE_FOLDER",
                            function() {createFolderCore(into)},
                            null,
                            "folder-s2.png"
                        )
                        // item 4031
                        makeTextListItem(
                            list,
                            "MES_CREATE_DIAGRAM",
                            function() {createDiagramCore(into)},
                            null,
                            "to-primitive-s2.png"
                        )
                    }
                }
            }
            // item 4035
            makeSeparator(
                list
            )
            // item 4034
            makeTextListItem(
                list,
                "MES_DESCRIPTION",
                function() {changeDescription(id)}
            )
        }
    }
    // item 4037
    showContextMenu(
        evt,
        list
    )
    // item 4002
    return false
}

function openLeftPane() {
    // item 4446
    globs.leftPaneStatus.show()
}

function openLeftPaneCore() {
    var splitter
    // item 4412
    getEditor().hideLeftButton(
        globs.openLeftIndex
    )
    // item 4409
    splitter = getWidget("splitter")
    // item 4410
    splitter.leftVisible = true
    // item 4414
    splitter.left = getLeftSplitterWidth()
    // item 4411
    updateGui()
    // item 4413
    saveSplitterValues()
}

function openRightPane() {
    // item 4447
    globs.rightPaneStatus.show()
}

function openRightPaneCore() {
    var splitter
    // item 4437
    getEditor().hideRightButton(
        globs.openRightIndex
    )
    // item 4434
    splitter = getWidget("splitter")
    // item 4435
    splitter.rightVisible = true
    // item 4439
    splitter.right = getRightSplitterWidth()
    // item 4436
    updateGui()
    // item 4438
    saveSplitterValues()
}

function panic(data) {
    // item 6925
    browser.panic(data)
}

function parseId(id) {
    var parts
    // item 1968
    if (id) {
        // item 1965
        parts = id.split(" ")
        // item 1966
        return {
            spaceId : parts[0],
            folderId : parts[1]
        }
    } else {
        // item 1971
        throw new Error("parseId: id is null")
    }
}

function parsePath() {
    var notEmpty, parts, path
    // item 19
    path = browser.getPath()
    parts = path.split("/")
    // item 20
    notEmpty = function(item) {
        return !!item
    }
    // item 21
    return parts.filter(notEmpty)
}

function parseSplitterValue(cookie) {
    var value
    // item 6736
    value = parseInt(cookie)
    // item 6737
    if (isNaN(value)) {
        // item 6740
        value = 300
    }
    // item 6741
    value = Math.min(value, window.innerWidth * 0.45)
    value = Math.floor(value)
    value = Math.max(value, MinSplitter)
    // item 6742
    return value
}

function parseSplitterVisible(cookie) {
    // item 6751
    if (cookie) {
        // item 6750
        return cookie == "true"
    } else {
        // item 6753
        return true
    }
}

function pasteFolders() {
    // item 2609
    pasteFoldersCore(null)
}

function pasteFoldersCore(parentId) {
    var data, folders, onDone, operation, target
    var _sw25890000_ = 0;
    // item 3076
    parentId = getCurrentParent(parentId)
    // item 3077
    if (parentId) {
        // item 25890000
        _sw25890000_ = globs.clipboard.getClipboardType();
        // item 25890001
        if (_sw25890000_ === "copy-folders") {
            // item 2586
            CallTrace.add("copy-paste folders", [])
            // item 2598
            operation = "copy"
        } else {
            // item 25890002
            if (_sw25890000_ === "cut-folders") {
                
            } else {
                // item 25890003
                throw "Unexpected switch value: " + _sw25890000_;
            }
            // item 2600
            CallTrace.add("cut-paste folders", [])
            // item 2601
            operation = "move"
        }
        // item 2585
        browser.showWorking()
        // item 2604
        onDone = function() {
        	browser.hideWorking()
        	globs.clipboard.clear()
        }
        // item 2584
        target = {
            onData : onDone,
            onError : onPasteError
        }
        // item 3169
        folders = globs.clipboard.getClipboard()
        // item 2588
        data = {
            folders : folders,
            operation : operation,
            parentId : parentId
        }
        // item 2583
        startMachine(
            new Paster(),
            data,
            target
        )
    }
}

function pathCompleted(self) {
    // item 1399
    return self.current >= self.path.length
}

function pushMenuItem(items, text, url) {
    // item 6909
    items.push({
    	text: text,
    	link: url
    })
}

function pushNavDashboard() {
    // item 6834
    var state = {
    	type: "dashboard"
    }
    // item 6835
    var url = makeDashboardUrl()
    // item 6836
    var title = AppName
    // item 6837
    browser.pushState(state, title, url)
}

function pushNavFolder(id, name) {
    var data, ids, title, url
    // item 2191
    data = {
        type : "folder",
        id : id
    }
    // item 2322
    ids = parseId(id)
    // item 2192
    url = makeFolderUrl(
        ids.spaceId,
        ids.folderId
    )
    // item 2193
    title = makeTitle(
        ids.spaceId,
        ids.folderId,
        name
    )
    // item 2194
    browser.pushState(
        data,
        title,
        url
    )
}

function pushNavRecent() {
    // item 2250
    var state = {
    	type: "recent"
    }
    // item 2251
    var url = makeRecentUrl()
    // item 2252
    var title = makeRecentTitle()
    // item 2253
    browser.pushState(state, title, url)
}

function pushNavSpaces() {
    var data, title, url
    // item 2342
    data = {
        type : "projects"
    }
    // item 2244
    url = makeSpacesUrl()
    // item 2245
    title = makeSpacesTitle()
    // item 2323
    browser.pushState(
        data,
        title,
        url
    )
}

function pushNavTrash() {
    var state, title, url
    // item 2236
    state = {
        type : "trash"
    }
    // item 2237
    url = makeTrashUrl()
    // item 2238
    title = makeTrashTitle()
    // item 2239
    browser.pushState(
        state,
        title,
        url
    )
}

function pushTag(saver, tag) {
    // item 2069
    saver.oldTag = saver.newTag
    saver.newTag = tag
}

function pushTempIfMobile() {
    // item 2262
    if (globs.wide) {
        
    } else {
        // item 2265
        pushTempState()
    }
}

function pushTempState() {
    // item 2230
    if (globs.stateType() == "tmp") {
        
    } else {
        // item 2229
        lt_go()
        // item 2227
        var state = {
        	type: "tmp"
        }
        // item 2228
        pushState(state, "", "", false)
    }
}

function pushTryMe() {
    // item 2257
    var state = {
    	type: "tryMe"
    }
    // item 2258
    pushState(state, "", "")
}

function putAsidePath(widget) {
    // item 743
    if (widget.type == "path") {
        // item 1565
        widget.signalId = "path"
        // item 746
        globs.pathWidgets.push(widget.id)
    }
}

function putAsideSearches(widget) {
    // item 6082
    if (widget.signalId == "globalSearch") {
        // item 6085
        globs.globalSearches.push(widget.id)
    }
}

function putErrorOnNode(id) {
    var tree
    // item 443
    tree = getWidget("tree")
    // item 444
    tree.setIcon(
        id,
        "delete.png"
    )
    // item 445
    browser.hideWorking()
}

function redo() {
    // item 5433
    if ((isDiagram()) && (!(isReadonly()))) {
        // item 2154
        getEditor().redo()
    }
}

function reloadDiagram() {
    // item 2130
    startAsync(
        createFolderShower(false),
        globs.current.id,
        null
    )
}

function removeAccess(access, role, user) {
    var users
    // item 4218
    users = access.roles[role]
    delete users[user]
}

function removeAt(array, index) {
    // item 1056
    array.splice(index, 1)
}

function removeFromCache(id) {
    // item 3547
    delete globs.folders[id]
}

function rename(id) {
    // item 3800
    startMachine(
        new Renamer(),
        id,
        null
    )
}

function renameCheckedFolder() {
    var selected
    // item 3467
    selected = getSelectedFolders()
    // item 3468
    if (selected.length == 1) {
        // item 2669
        rename(selected[0])
    }
}

function renameEverywhere(id, name) {
    // item 3626
    getWidget("folder_grid").setItemText(id, 1, name)
    // item 3627
    getWidget("tree").setText(id, name)
    // item 3628
    renameInHistory(id, name)
    // item 3629
    renameInPath(id, name)
    // item 3630
    renameInCache(id, name)
    // item 6022
    if (id == globs.current.id) {
        // item 6021
        browser.setMobileHeader(name)
    }
}

function renameInCache(id, name) {
    var folder
    // item 3558
    folder = globs.folders[id]
    // item 3554
    if (folder) {
        // item 3557
        folder.name = name
    }
}

function renameInHistory(id, name) {
    var recent, recentMiddle
    // item 3645
    recent = getWidget("recent")
    // item 3646
    recent.setItemText(id, name)
    // item 3647
    recentMiddle = getWidget("middle_recent")
    // item 3648
    recentMiddle.setItemText(id, 1, name)
}

function renameInPath(name, id) {
    var widget
    // item 36370001
    var _ind3637 = 0;
    var _col3637 = globs.pathWidgets;
    var _len3637 = _col3637.length;
    while (true) {
        // item 36370002
        if (_ind3637 < _len3637) {
            
        } else {
            break;
        }
        // item 36370004
        var widgetId = _col3637[_ind3637];
        // item 3638
        widget = getWidget(widgetId)
        // item 3639
        widget.renameStage(
            name,
            id
        )
        // item 36370003
        _ind3637++;
    }
}

function requestAccount(target) {
    // item 302
    browser.sendGet("/api/account", target)
}

function requestHistory(target) {
    // item 255
    browser.sendGet("/api/recent", target)
}

function requestTheme(target) {
    // item 1666
    browser.sendGet("/api/theme", target)
}

function resetSearch() {
    // item 6549
    killMachine(globs.searchMachine)
    killMachine(globs.searchThrottle)
    // item 6552
    globs.searchMachine = null
    globs.searchThrottle = null
    // item 6600
    globs.searchThrottle = new InputThrottle()
}

function rowContainsText(row, index, text) {
    var low, value
    // item 1117
    value = row.cells[index].text
    // item 1118
    low = value.toLowerCase()
    // item 1119
    return low.indexOf(text) != -1
}

function rub_clearSpace(self, spaceId) {
    // item 5148
    var url = "/api/trash/" + spaceId
    // item 5149
    browser.sendDelete(url, self)
}

function rub_copyTrashItems(self, data) {
    var item
    // item 5081
    if (isReadonlyAccess(data)) {
        
    } else {
        // item 50770001
        var _ind5077 = 0;
        var _col5077 = data.items;
        var _len5077 = _col5077.length;
        while (true) {
            // item 50770002
            if (_ind5077 < _len5077) {
                
            } else {
                break;
            }
            // item 50770004
            var titem = _col5077[_ind5077];
            // item 5079
            item = {
                space_id : titem.space_id,
                id : titem.id,
                type : titem.type,
                name : titem.name
            }
            // item 5080
            self.items.push(item)
            // item 50770003
            _ind5077++;
        }
    }
}

function rub_getUrl(self) {
    // item 5070
    var url = "/api/trash/" +
      self.spaces[self.current]
    // item 5071
    return url
}

function rub_sort(self) {
    var byName
    // item 5087
    byName = function(left, right) {
        return left.name.localeCompare(right.name)
    }
    // item 5088
    self.items.sort(byName)
}

function runManyOperation(parentId, folders, operation, machine) {
    var items, parsed, payload, target
    // item 3369
    parsed = parseId(parentId)
    // item 3367
    target = {
        space_id : parsed.spaceId,
        folder_id : parsed.folderId
    }
    // item 3370
    items = folders.map(idToServerFolder)
    // item 3366
    payload = {
        items : items,
        target : target,
        operation : operation
    }
    // item 3368
    browser.sendPost(
        "/api/many",
        payload,
        machine
    )
}

function save(saver, item) {
    // item 2056
    saver.queue.push(item)
    // item 2055
    saveNext(saver)
}

function saveAccessData(access) {
    // item 4288
    if (access.setPublicAccess) {
        // item 42920001
        var _ind4292 = 0;
        var _col4292 = globs.folders;
        var _keys4292 = Object.keys(_col4292); 
        var _len4292 = _keys4292.length;
        while (true) {
            // item 42920002
            if (_ind4292 < _len4292) {
                
            } else {
                break;
            }
            // item 42920004
            var id = _keys4292[_ind4292]; var folder = _col4292[id];
            // item 4294
            if (folder.space_id == access.spaceId) {
                // item 4291
                folder.is_public = access.isPublic
            }
            // item 42920003
            _ind4292++;
        }
    }
}

function saveChange(spaceId, folderId, change, target) {
    var url
    // item 2062
    url = "/api/edit/" +
      spaceId + "/" + folderId
    // item 2063
    browser.sendPost(
        url,
        change,
        target
    )
}

function saveChanges(changes) {
    var saver
    // item 2103
    saver = globs.saver
    // item 2104
    if (saver) {
        // item 2107
        saver.save(changes)
    }
}

function saveDiagram() {
    // item 6926
    startMachine(
        new SignupMachine(),
        null,
        self
    )
}

function saveNext(saver) {
    var item
    // item 2048
    item = saver.queue.shift()
    // item 2049
    saveNow(saver, item)
}

function saveNow(saver, data) {
    var id, ids, target
    // item 2022
    pushTag(saver, data.tag)
    // item 2023
    id = globs.current.id
    // item 2025
    if (data.name) {
        // item 2028
        browser.setTitle(data.name)
        // item 2024
        renameEverywhere(id, data.name)
    }
    // item 2029
    target = makeTarget(
        onDiagramSaved,
        onDiagramError
    )
    // item 2030
    ids = parseId(id)
    // item 2031
    saver.lastIo = getTime()
    // item 2032
    saveChange(
        ids.spaceId,
        ids.folderId,
        data,
        target
    )
}

function saveSplitterValues() {
    var left, lv, right, rv, widget
    // item 2778
    widget = getWidget("splitter")
    // item 2776
    left = Math.max(widget.left, MinSplitter)
    right = Math.max(widget.right, MinSplitter)
    lv = widget.leftVisible
    rv = widget.rightVisible
    // item 2775
    HtmlUtils.setCookie("splitter-left", left.toString(), 30)
    HtmlUtils.setCookie("splitter-right", right.toString(), 30)
    // item 2777
    HtmlUtils.setCookie("splitter-left-vis", lv.toString(), 30)
    HtmlUtils.setCookie("splitter-right-vis", rv.toString(), 30)
}

function saveTry(target) {
    var diagram
    // item 5858
    diagram = getEditor().getDiagram()
    // item 5857
    browser.sendPost(
    	"/api/save_try",
    	diagram,
    	target
    )
}

function saveUserSettings(settings) {
    var noop, target
    // item 1614
    if (gUserId) {
        // item 1613
        noop = function() {}
        // item 1619
        target = makeTarget(
            noop,
            noop
        )
        // item 1617
        var url = "/api/theme"
        // item 1618
        browser.sendPost(
            url,
            settings,
            target
        )
    }
}

function scanItems(collection, needle, items, name, id, path) {
    var found, item, text, text2
    // item 6679
    if (collection) {
        // item 66630001
        var _ind6663 = 0;
        var _col6663 = collection;
        var _keys6663 = Object.keys(_col6663); 
        var _len6663 = _keys6663.length;
        while (true) {
            // item 66630002
            if (_ind6663 < _len6663) {
                
            } else {
                break;
            }
            // item 66630004
            var itemId = _keys6663[_ind6663]; var node = _col6663[itemId];
            // item 6665
            if (node.content) {
                // item 6668
                text = node.content.txt
                text2 = node.content.txt2
                // item 6664
                found = Utils.findNormSubstring(
                    text,
                    needle
                )
                // item 6669
                if (found) {
                    // item 6674
                    item = {
                        name : name,
                        type : "item",
                        target : {id: id, itemId:itemId},
                        found : found,
                        path : path
                    }
                    // item 6675
                    items.push(item)
                } else {
                    // item 6672
                    found = Utils.findNormSubstring(
                        text2,
                        needle
                    )
                    // item 6673
                    if (found) {
                        // item 6674
                        item = {
                            name : name,
                            type : "item",
                            target : {id: id, itemId:itemId},
                            found : found,
                            path : path
                        }
                        // item 6675
                        items.push(item)
                    }
                }
            }
            // item 66630003
            _ind6663++;
        }
    }
}

function scheduleNextMessage(machine, method, data, delay) {
    var delayed, src
    // item 6456
    delayed = function() {
        machine[method](data)
    }
    // item 6458
    src = "Schedule next method: " + 
     machine.type_name + "." +
     method
    // item 6457
    browser.setTimeout(delayed, delay, src)
}

function scheduleNextState(machine, data) {
    // item 240
    scheduleNextStateAfter(
        machine,
        data,
        1
    )
}

function scheduleNextStateAfter(machine, data, delay) {
    var delayed, src
    // item 246
    delayed = function() {
        machine.onData(data)
    }
    // item 248
    src = "Schedule next state: " + machine.type_name
    // item 247
    browser.setTimeout(delayed, delay, src)
}

function schedulePoll() {
    var interval, timer
    // item 1932
    cancelPolling()
    // item 1935
    interval = PollInterval + Math.random() * 0.5
    // item 1933
    timer = browser.setTimeout(
        timeToPoll,
        interval * 1000,
        "schedulePoll"
    )
    // item 1934
    globs.pollTimer = timer
}

function selectTreeItem(id) {
    var tree
    // item 1164
    tree = getWidget("tree")
    // item 1163
    tree.select(id)
    // item 1607
    tree.scrollIntoView(id)
}

function sendCreateFolder(spaceId, parentFolderId, type, name, target) {
    var data, url
    // item 2940
    data = {
        parent : parentFolderId,
        type : type,
        name : name
    }
    // item 2941
    url = "/api/folder/" + spaceId
    // item 2942
    browser.sendPost(
        url,
        data,
        target
    )
}

function sendDelete(folders, target) {
    // item 5405
    var items = folders.map(
        idToServerFolder
    )
    // item 5404
    var payload = {
        items : items,
        operation : "delete"
    }
    // item 5406
    browser.sendPost(
        "/api/many",
        payload,
        target
    )
}

function sendGetSearch(target) {
    // item 6505
    browser.sendGet(
        "/api/search",
        target
    )
}

function sendInput(self) {
    // item 6294
    var msg = {
        widgetId : self.widgetId,
        input : self.input
    }
    // item 6293
    self.target.onInput(
        msg
    )
}

function setAccount(data) {
    // item 327
    globs.user.name = data.name
    globs.user.spaces = {}
    // item 3620001
    var _ind362 = 0;
    var _col362 = data.spaces_access;
    var _len362 = _col362.length;
    while (true) {
        // item 3620002
        if (_ind362 < _len362) {
            
        } else {
            break;
        }
        // item 3620004
        var space = _col362[_ind362];
        // item 364
        globs.user.spaces[space.space_id] = space
        // item 4139
        addSpaceToCache(space)
        // item 3620003
        _ind362++;
    }
}

function setActiveScreen(screen, access) {
    var top, topCode
    // item 847
    getWidget("middle").setActive(screen)
    // item 848
    globs.current.screen = screen
    // item 873
    if (globs.isTryMe) {
        // item 875
        topCode = "top_diagram_try"
    } else {
        // item 870
        if (globs.user.userId) {
            // item 42660001
            if (access === "read") {
                // item 879
                globs.current.isReadonly = true
                // item 869
                topCode = globs.topCodesRo[screen]
            } else {
                // item 4274
                globs.current.isReadonly = false
                // item 850
                topCode = globs.topCodes[screen]
            }
        } else {
            // item 4275
            globs.current.isReadonly = true
            // item 872
            topCode = globs.topCodesNu[screen]
        }
    }
    // item 852
    top = getWidget("top")
    // item 851
    top.setActive(topCode)
    // item 941
    updateGui()
}

function setDiagram(self) {
    var onReadonly
    // item 6973
    if (gUserId) {
        // item 6974
        onReadonly = null
    } else {
        // item 6975
        onReadonly = saveDiagram
    }
    // item 6942
    getEditor().setReadonly(
        isReadonly(),
        onReadonly
    )
    // item 6943
    getEditor().setDiagram(
    	self.diagram,
    	true
    )
    // item 6944
    if (self.home) {
        // item 6947
        getEditor().home()
    }
    // item 6980
    showDemo()
}

function setHistory(recent) {
    var makeItem
    // item 274
    makeItem = function(folder) {
        return {
            id : makeIdFromFolder(folder),
            text : folder.name,
            type : folder.type
        }
    }
    // item 287
    globs.user.recent = recent.map(makeItem)
    // item 1066
    updateHistoryList()
}

function setItemsInFolderGrid(rows) {
    var folders
    // item 1094
    folders = getWidget("folder_grid")
    // item 1095
    folders.setItems(
        Utils.copyObjectDeep(rows)
    )
    // item 11660001
    var _ind1166 = 0;
    var _col1166 = rows;
    var _len1166 = _col1166.length;
    while (true) {
        // item 11660002
        if (_ind1166 < _len1166) {
            
        } else {
            break;
        }
        // item 11660004
        var row = _col1166[_ind1166];
        // item 1196
        if (isInPrevious(row.id)) {
            // item 1199
            folders.mark(row.id)
            break;
        }
        // item 11660003
        _ind1166++;
    }
    // item 1200
    getWidget("check_all").setChecked(false)
}

function setPath(path) {
    var i, id, parent, parentId, step
    // item 6729
    path = path || []
    // item 985
    if (path.length > 1) {
        // item 984
        parent = path[path.length - 2]
        // item 1011
        parentId = makeIdFromChild(parent)
        // item 1012
        globs.current.parent = parentId
    } else {
        // item 1013
        globs.current.parent = null
    }
    // item 1010
    clearPath()
    // item 9820001
    i = 0;
    while (true) {
        // item 9820002
        if (i < path.length) {
            
        } else {
            break;
        }
        // item 990
        step = path[i]
        // item 989
        id = makeIdFromChild(step)
        // item 988
        addPathStage(
            getNormalName(step),
            id,
            i < path.length - 1
        )
        // item 9820003
        i++;
    }
}

function setTag(folder) {
    var doc
    // item 1835
    doc = globs.current
    // item 1834
    doc.oldTag = null
    doc.newTag = folder.tag
}

function setTreeChildren(data) {
    var childId, id, item, items, tree
    // item 523
    items = []
    // item 558
    tree = getWidget("tree")
    // item 5210001
    var _ind521 = 0;
    var _col521 = data.children;
    var _len521 = _col521.length;
    while (true) {
        // item 5210002
        if (_ind521 < _len521) {
            
        } else {
            break;
        }
        // item 5210004
        var child = _col521[_ind521];
        // item 557
        childId = makeIdFromChild(child)
        // item 524
        item = {
            id : childId,
            text : child.name,
            icon : getImage(child.type),
            rank : getRank(child.type),
            isFolder : (child.type == "folder"),
            kids : []
        }
        // item 525
        items.push(item)
        // item 7191
        deleteFromTree(childId)
        // item 5210003
        _ind521++;
    }
    // item 732
    id = makeIdFromChild(data)
    // item 559
    tree.setChildren(
        id,
        items
    )
}

function share() {
    // item 5726
    startMachine(
        new Sharer(),
        null,
        null
    )
}

function shouldFindReferences(type) {
    // item 7079
    if (((isTypeDiagram(type)) && (globs.wide)) && (!(globs.isTryMe))) {
        // item 7084
        return true
    } else {
        // item 7085
        return false
    }
}

function shouldShowDemo() {
    // item 7033
    if (((((Config.SHOW_DEMO) && (!(isReadonly()))) && (isDiagram())) && (globs.wide)) && ((globs.current.type == "drakon") || (globs.current.type == "mind"))) {
        // item 7024
        return true
    } else {
        // item 7029
        return false
    }
}

function showAccessScreen(spaceId, target) {
    // item 4146
    if (target) {
        
    } else {
        // item 4149
        target = makeTarget(
            hideCentral,
            panic
        )
    }
    // item 4150
    startMachine(
        new AccessShower(),
        spaceId,
        target
    )
}

function showContextMenu(evt, list) {
    var menu
    // item 3986
    if (list.length == 0) {
        
    } else {
        // item 3985
        menu = {
            rows : list
        }
        // item 3984
        browser.showContextMenu(
            evt.clientX,
            evt.clientY,
            menu,
            null
        )
    }
}

function showDashboard() {
    var dashboard, recent, recent2, spaces
    // item 6823
    recent = getRecent()
    spaces = getSpaces()
    // item 6883
    var addIcon = function(item) {
    	var copy = Utils.copyObject(item)
    	copy.icon = getImage(item.type)
    	return copy
    }
    // item 6884
    recent2 = recent.map(addIcon)
    // item 6829
    dashboard = getWidget("middle_dashboard")
    // item 6882
    dashboard.setDashboardRecent(recent2)
    dashboard.setDashboardProjects(spaces)
    // item 6828
    clearPath()
    // item 6827
    addPathStage(
        translate("MES_DASHBOARD"),
        "<root>",
        false
    )
    // item 6830
    browser.setTitle(AppName)
    // item 6860
    selectTreeItem("dashboard")
    // item 6825
    setActiveScreen(
        "middle_dashboard",
        null
    )
    // item 6826
    pushNavDashboard()
}

function showDemo() {
    // item 7001
    if (browser.isDemoDiscarded()) {
        
    } else {
        // item 7019
        showDemoCore()
    }
}

function showDemoCore() {
    var type
    // item 7005
    if (shouldShowDemo()) {
        // item 7010
        type = globs.current.type
        // item 70110001
        if ((type === "drakon") || (type === "mind")) {
            // item 7009
            browser.showDemo(type)
        }
    }
}

function showFolderCommon(id, data) {
    var name, path
    // item 909
    globs.current.id = id
    globs.current.type = data.type
    // item 927
    name = getNormalName(data)
    // item 6025
    browser.setMobileHeader(name)
    // item 926
    browser.setTitle(name + " - " + AppName)
    // item 928
    setPath(data.path)
    // item 1436
    path = convertPathToIds(data.path)
    // item 1015
    addToPrevious(path)
    // item 2266
    pushNavFolder(
        id,
        data.name
    )
}

function showFolderInGrid(data) {
    var id, imageCell, row, rows, textCell
    // item 978
    data.children.sort(folderComparer)
    // item 954
    rows = []
    // item 9420001
    var _ind942 = 0;
    var _col942 = data.children;
    var _len942 = _col942.length;
    while (true) {
        // item 9420002
        if (_ind942 < _len942) {
            
        } else {
            break;
        }
        // item 9420004
        var child = _col942[_ind942];
        // item 944
        imageCell = makeImageCell(child.type)
        textCell = makeTextCell(child.name)
        // item 1126
        id = makeIdFromChild(child)
        // item 956
        row = {
            id : id,
            cells : [imageCell, textCell]
        }
        // item 958
        rows.push(row)
        // item 9420003
        _ind942++;
    }
    // item 1086
    globs.current.folders = rows
    // item 1093
    setItemsInFolderGrid(rows)
    // item 1140
    getWidget("check_all").setChecked(false)
    // item 6041
    if (globs.wide) {
        
    } else {
        // item 6040
        getWidget("folderSearch").clear()
    }
    // item 2690
    updateActionList()
}

function showHelp() {
    // item 4456
    browser.showHelp()
}

function showMainMenu() {
    var items
    // item 4462
    items = buildMainMenu()
    // item 4463
    browser.showMainMenu(items)
}

function showProjectMenu(x, y, id) {
    var folder, isAdmin, list, spaceId
    // item 4659
    folder = globs.folders[id]
    // item 4658
    isAdmin = (folder.access == "admin")
    // item 4660
    spaceId = parseId(id).spaceId
    // item 4668
    list = []
    // item 4662
    makeTextListItem(
        list,
        "MES_DESCRIPTION",
        function() {changeDescription(id)}
    )
    // item 4664
    if (isAdmin) {
        // item 4663
        makeSeparator(list)
        // item 4661
        makeTextListItem(
            list,
            "MES_ACCESS",
            function() {showAccessScreen(spaceId, null)}
        )
        // item 4695
        makeTextListItem(
            list,
            "MES_DELETE_SPACE",
            function() {deleteProject(spaceId)}
        )
    }
    // item 4667
    browser.showPopupListAt(
        x,
        y,
        list
    )
}

function showRecent() {
    var grid, leftIcon, row, rows, spaceId, textCell
    // item 5313
    rows = []
    // item 53100001
    var _ind5310 = 0;
    var _col5310 = getRecent();
    var _len5310 = _col5310.length;
    while (true) {
        // item 53100002
        if (_ind5310 < _len5310) {
            
        } else {
            break;
        }
        // item 53100004
        var item = _col5310[_ind5310];
        // item 5329
        spaceId = parseId(item.id).spaceId
        // item 5318
        leftIcon = makeImageCell(item.type)
        // item 5312
        textCell = makeTextCell(
            spaceId + ": " + item.text
        )
        // item 5314
        row = {
            id : item.id,
            cells : [leftIcon, textCell]
        }
        // item 5315
        rows.push(row)
        // item 53100003
        _ind5310++;
    }
    // item 5322
    clearPath()
    // item 5321
    addPathStage(
        translate("MES_RECENT"),
        "<root>",
        false
    )
    // item 5323
    grid = getWidget("middle_recent")
    // item 5317
    grid.setItems(rows)
    // item 5319
    setActiveScreen(
        "middle_recent",
        null
    )
    // item 5320
    pushNavRecent()
}

function showShareScreen(target) {
    var admin, folder, ids, isPublic
    // item 5713
    ids = parseId(globs.current.id)
    // item 5709
    folder = getFromCache(globs.current.id)
    // item 5710
    if (folder) {
        // item 5714
        isPublic = (folder.is_public == true)
        admin = (folder.access == "admin")
        // item 5708
        browser.showShareScreen(
            ids.spaceId,
            ids.folderId,
            folder.type,
            isPublic,
            admin,
            target
        )
    }
}

function showSpacesInFolder() {
    var id, leftIcon, rightIcon, row, rows, spaces, spacesWidget, textCell
    // item 4635
    spacesWidget = getWidget("middle_spaces")
    // item 1604
    spaces = getSpaces()
    // item 1587
    rows = []
    // item 15840001
    var _ind1584 = 0;
    var _col1584 = spaces;
    var _len1584 = _col1584.length;
    while (true) {
        // item 15840002
        if (_ind1584 < _len1584) {
            
        } else {
            break;
        }
        // item 15840004
        var spaceId = _col1584[_ind1584];
        // item 1593
        id = makeId(spaceId, "1")
        // item 1603
        leftIcon = makeImageCellCore("workspace-s2.png")
        rightIcon = makeImageCellCore("settings.png")
        // item 1586
        textCell = makeTextCell(spaceId)
        // item 1588
        row = {
            id : id,
            cells : [leftIcon, textCell, rightIcon]
        }
        // item 1589
        rows.push(row)
        // item 15840003
        _ind1584++;
    }
    // item 4613
    clearPath()
    // item 4612
    addPathStage(
        translate("MES_SPACES"),
        "<root>",
        false
    )
    // item 1594
    spacesWidget.setItems(rows)
    // item 4650
    markPreviousSpace(spaces)
    // item 1605
    setActiveScreen(
        "middle_spaces",
        null
    )
    // item 2324
    pushNavSpaces()
}

function showSpacesInTree() {
    var item, items, tree
    // item 431
    items = []
    // item 6867
    if (globs.user.userId) {
        // item 6865
        item = {
            id : "dashboard",
            text : translate("MES_DASHBOARD"),
            icon : "dashboard.png",
            rank : 5,
            isFolder : false,
            kids : []
        }
        // item 6866
        items.push(item)
    }
    // item 4290001
    var _ind429 = 0;
    var _col429 = globs.user.spaces;
    var _keys429 = Object.keys(_col429); 
    var _len429 = _keys429.length;
    while (true) {
        // item 4290002
        if (_ind429 < _len429) {
            
        } else {
            break;
        }
        // item 4290004
        var spaceId = _keys429[_ind429]; var space = _col429[spaceId];
        // item 432
        item = {
            id : makeId(spaceId, "1"),
            text : spaceId,
            icon : "workspace-s2.png",
            rank : 10,
            isFolder : true,
            kids : []
        }
        // item 433
        items.push(item)
        // item 4290003
        _ind429++;
    }
    // item 6725
    if (globs.user.userId) {
        // item 434
        item = {
            id : "trash",
            text : translate("MES_TRASH"),
            icon : "trash-s2.png",
            rank : 20,
            isFolder : false,
            kids : []
        }
        // item 435
        items.push(item)
    }
    // item 436
    tree = getWidget("tree")
    // item 437
    tree.setChildren(
        null,
        items
    )
}

function showTrash(items) {
    var button, grid, id, leftIcon, row, rows, textCell
    // item 5009
    grid = getWidget("trash_grid")
    // item 4998
    rows = []
    // item 49950001
    var _ind4995 = 0;
    var _col4995 = items;
    var _len4995 = _col4995.length;
    while (true) {
        // item 49950002
        if (_ind4995 < _len4995) {
            
        } else {
            break;
        }
        // item 49950004
        var item = _col4995[_ind4995];
        // item 5001
        id = makeId(
            item.space_id,
            item.id
        )
        // item 5003
        leftIcon = makeImageCell(item.type)
        // item 4997
        textCell = makeTextCell(
            item.space_id + ": " + item.name
        )
        // item 5166
        button = makeTextCell(
            translate("MES_RESTORE")
        )
        // item 4999
        row = {
            id : id,
            cells : [leftIcon, textCell, button]
        }
        // item 5000
        rows.push(row)
        // item 49950003
        _ind4995++;
    }
    // item 5008
    clearPath()
    // item 5007
    addPathStage(
        translate("MES_TRASH"),
        "<root>",
        false
    )
    // item 5002
    grid.setItems(rows)
    // item 5167
    selectTreeItem("trash")
    // item 5005
    setActiveScreen(
        "middle_trash",
        null
    )
    // item 5006
    pushNavTrash()
}

function signup() {
    
}

function spacesSearchItems(input) {
    var item, items, norm
    // item 6339
    input = input.toLowerCase()
    // item 6332
    items = []
    // item 63300001
    var _ind6330 = 0;
    var _col6330 = globs.user.spaces;
    var _keys6330 = Object.keys(_col6330); 
    var _len6330 = _keys6330.length;
    while (true) {
        // item 63300002
        if (_ind6330 < _len6330) {
            
        } else {
            break;
        }
        // item 63300004
        var spaceId = _keys6330[_ind6330]; var space = _col6330[spaceId];
        // item 6343
        norm = spaceId.toLowerCase()
        // item 6340
        if (Utils.stringContains(norm, input)) {
            // item 6333
            item = {
                name : spaceId,
                image : "workspace-s2.png",
                type : "folder",
                target : makeId(spaceId, "1")
            }
            // item 6334
            items.push(item)
        }
        // item 63300003
        _ind6330++;
    }
    // item 6335
    return items
}

function startAsync(machine, start, onCompleted) {
    var onData, target
    // item 2343
    onData = function() {
        endAsync(onCompleted)
    }
    // item 1326
    target = makeTarget(
        onData,
        panic
    )
    // item 1327
    browser.showWorking()
    // item 1325
    startMachine(
        machine,
        start,
        target
    )
}

function startFindReferences(needle, target) {
    var data, id
    // item 7176
    id = parseId(globs.current.id)
    // item 7174
    data = {
        spaces : [id.spaceId],
        type : "references",
        needle : needle
    }
    // item 7177
    browser.sendPost(
        "/api/search",
        data,
        target
    )
}

function startMachine(machine, data, target) {
    // item 3614
    if (target) {
        
    } else {
        // item 3617
        target = makeTarget(
            function(){},
            function(){}
        )
    }
    // item 234
    machine.target = target
    // item 249
    scheduleNextState(
        machine,
        data
    )
}

function startPoll(saver) {
    var ids, target, url
    // item 1945
    ids = parseId(
        globs.current.id
    )
    // item 1943
    saver.lastIo = getTime()
    // item 1941
    url = "/api/tag/" +
     ids.spaceId + "/" + ids.folderId +
     "/" + saver.lastIo
    // item 1999
    target = makeTarget(
        onTag,
        onTagError
    )
    // item 1998
    browser.sendGet(url, target)
}

function startSearchFolders(needle, target) {
    var data, id
    // item 6262
    id = parseId(globs.current.id)
    // item 6260
    data = {
        spaces : [id.spaceId],
        type : "folders",
        needle : needle
    }
    // item 6263
    browser.sendPost(
        "/api/search",
        data,
        target
    )
}

function startSearchItems(needle, target) {
    var data, id
    // item 6498
    id = parseId(globs.current.id)
    // item 6497
    data = {
        spaces : [id.spaceId],
        type : "items",
        needle : needle
    }
    // item 6499
    browser.sendPost(
        "/api/search",
        data,
        target
    )
}

function startSearchMachine(machine) {
    // item 7110
    globs.searchMachine = machine
    machine.onData(null)
}

function startUserSearch(user, target) {
    var payload
    // item 5618
    payload = {
        text : user
    }
    // item 5611
    browser.sendPost(
    	"/api/find_users",
    	payload,
    	target
    )
}

function sv_dashboard(target) {
    // item 6761
    if (gUserId) {
        // item 6764
        startMachine(
            new DashboardShower(),
            null,
            target
        )
    } else {
        // item 6966
        logonFirst()
    }
}

function sv_folder(spaceId, folderId, target) {
    var data, id
    // item 2364
    id = makeId(
        spaceId,
        folderId
    )
    // item 97
    data = {
        id : id
    }
    // item 94
    startMachine(
        new RootFolderShower(),
        data,
        target
    )
}

function sv_recent(target) {
    // item 5332
    if (gUserId) {
        // item 5335
        startMachine(
            new RootRecentLoader(),
            null,
            target
        )
    } else {
        // item 6967
        logonFirst()
    }
}

function sv_spaces(target) {
    // item 81
    if (gUserId) {
        // item 89
        startMachine(
            new RootSpacesShower(),
            null,
            target
        )
    } else {
        // item 6968
        logonFirst()
    }
}

function sv_trash(target) {
    // item 5217
    if (gUserId) {
        // item 5220
        startMachine(
            new RootTrashShower(),
            null,
            target
        )
    } else {
        // item 6969
        logonFirst()
    }
}

function timeToPoll() {
    var saver
    // item 1954
    globs.pollTimer = null
    // item 1955
    saver = globs.saver
    // item 1956
    if (saver) {
        // item 1959
        saver.timeout()
    }
}

function toAllItems(data, needle) {
    var found, id, item, items, path
    // item 6645
    items = []
    // item 6650
    needle = Utils.normalizeString(needle).text
    // item 66460001
    var _ind6646 = 0;
    var _col6646 = data.items;
    var _len6646 = _col6646.length;
    while (true) {
        // item 66460002
        if (_ind6646 < _len6646) {
            
        } else {
            break;
        }
        // item 66460004
        var it = _col6646[_ind6646];
        // item 6649
        found = Utils.findNormSubstring(
            it.text,
            needle
        )
        // item 6651
        if (found) {
            // item 6656
            id = makeId(
                it.space_id,
                it.folder_id
            )
            // item 6682
            if (id == globs.current.id) {
                
            } else {
                // item 6657
                path = it.path.slice(
                    0,
                    it.path.length - 1
                )
                // item 6654
                item = {
                    name : it.name,
                    type : "item",
                    target : {id: id, itemId:it.item_id},
                    found : found,
                    path : path.join("/")
                }
                // item 6655
                items.push(item)
            }
        }
        // item 66460003
        _ind6646++;
    }
    // item 6512
    return items
}

function toFoundFolder(item) {
    var id, path
    // item 6308
    path = item.path.slice(
        0,
        item.path.length - 1
    )
    // item 6310
    id = makeId(
        item.space_id,
        item.folder_id
    )
    // item 6309
    return {
        path : path.join("/"),
        name : item.name,
        type : "folder",
        target : id,
        image : getImage(item.type)
    }
}

function undo() {
    // item 5431
    if ((isDiagram()) && (!(isReadonly()))) {
        // item 2147
        getEditor().undo()
    }
}

function updateActionList() {
    var actions, checkAll, folders, items, status
    // item 5416
    if (isFolder()) {
        // item 2757
        folders = getWidget("folder_grid")
        status = folders.getChecked()
        // item 2756
        items = getActionList(
            status.checked
        )
        // item 2766
        actions = getWidget("actions")
        // item 2758
        if (items.length > 0) {
            // item 2767
            actions.enable(true)
            // item 2764
            checkAll = getWidget("check_all")
            // item 2761
            if ((status.unchecked.length == 0) && (!(status.checked.length == 0))) {
                // item 2765
                checkAll.setChecked(true)
            } else {
                // item 2763
                checkAll.setChecked(false)
            }
        } else {
            // item 2768
            actions.enable(false)
        }
    }
}

function updateFeedbackPos() {
    var right
    // item 2179
    right = findFeedbackRight()
    // item 2178
    browser.placeFeedback(right)
}

function updateGui() {
    // item 2497
    browser.onResize()
    // item 6017
    if (globs.wide) {
        // item 2165
        updateFeedbackPos()
    }
}

function updateHistoryList() {
    var recent
    // item 1064
    recent = getWidget("recent")
    // item 1065
    recent.setItems(getRecent())
}

function validateFolderName(name) {
    // item 2927
    name = name || ""
    name = name.trim()
    // item 2928
    if (name) {
        // item 2931
        return null
    } else {
        // item 2932
        return translate("ERR_EMPTY_NAME")
    }
}

function validateSpaceName(name) {
    // item 4867
    name = name || ""
    name = makeSpaceName(name)
    // item 4868
    if (name) {
        // item 4873
        var error = Utils.checkSpaceName(name)
        // item 4874
        if (error) {
            // item 4876
            return translate(error)
        } else {
            // item 4871
            return null
        }
    } else {
        // item 4872
        return translate("ERR_EMPTY_NAME")
    }
}

function willChangeScreen() {
    // item 1638
    browser.showWorking()
    // item 1636
    globs.saver = null
    globs.current.id = null
    globs.current.type = null
    // item 1637
    cancelPolling()
}

function SpacesLoader() {
  var _self = this;
  _self.type_name = "SpacesLoader";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return SpacesLoader_Start_onData(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return SpacesLoader_GettingHistory_onData(_self, data);
    }
    else if (_state_ == "GettingAccount") {
      return SpacesLoader_GettingAccount_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return SpacesLoader_Start_onError(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return SpacesLoader_GettingHistory_onError(_self, data);
    }
    else if (_state_ == "GettingAccount") {
      return SpacesLoader_GettingAccount_onError(_self, data);
    }
    return null;
  };
}

function FolderGetter() {
  var _self = this;
  _self.type_name = "FolderGetter";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderGetter_Start_onData(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return FolderGetter_GettingFolder_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderGetter_Start_onError(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return FolderGetter_GettingFolder_onError(_self, data);
    }
    return null;
  };
}

function TreeNodeExpander() {
  var _self = this;
  _self.type_name = "TreeNodeExpander";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return TreeNodeExpander_Start_onData(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return TreeNodeExpander_GettingFolder_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return TreeNodeExpander_Start_onError(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return TreeNodeExpander_GettingFolder_onError(_self, data);
    }
    return null;
  };
}

function TreeClicker() {
  var _self = this;
  _self.type_name = "TreeClicker";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return TreeClicker_Start_onData(_self, data);
    }
    else if (_state_ == "ShowingFolder") {
      return TreeClicker_ShowingFolder_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return TreeClicker_Start_onError(_self, data);
    }
    else if (_state_ == "ShowingFolder") {
      return TreeClicker_ShowingFolder_onError(_self, data);
    }
    return null;
  };
}

function FolderShower() {
  var _self = this;
  _self.type_name = "FolderShower";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderShower_Start_onData(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return FolderShower_GettingFolder_onData(_self, data);
    }
    else if (_state_ == "GettingTheme") {
      return FolderShower_GettingTheme_onData(_self, data);
    }
    else if (_state_ == "LoadingFonts") {
      return FolderShower_LoadingFonts_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderShower_Start_onError(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return FolderShower_GettingFolder_onError(_self, data);
    }
    else if (_state_ == "GettingTheme") {
      return FolderShower_GettingTheme_onError(_self, data);
    }
    else if (_state_ == "LoadingFonts") {
      return FolderShower_LoadingFonts_onError(_self, data);
    }
    return null;
  };
}

function GoToFolderMachine() {
  var _self = this;
  _self.type_name = "GoToFolderMachine";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return GoToFolderMachine_Start_onData(_self, data);
    }
    else if (_state_ == "ShowingFolder") {
      return GoToFolderMachine_ShowingFolder_onData(_self, data);
    }
    else if (_state_ == "Expanding") {
      return GoToFolderMachine_Expanding_onData(_self, data);
    }
    else if (_state_ == "Done") {
      return GoToFolderMachine_Done_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return GoToFolderMachine_Start_onError(_self, data);
    }
    else if (_state_ == "ShowingFolder") {
      return GoToFolderMachine_ShowingFolder_onError(_self, data);
    }
    else if (_state_ == "Expanding") {
      return GoToFolderMachine_Expanding_onError(_self, data);
    }
    else if (_state_ == "Done") {
      return GoToFolderMachine_Done_onError(_self, data);
    }
    return null;
  };
}

function FontLoadingMachine() {
  var _self = this;
  _self.type_name = "FontLoadingMachine";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FontLoadingMachine_Start_onData(_self, data);
    }
    else if (_state_ == "OnFont") {
      return FontLoadingMachine_OnFont_onData(_self, data);
    }
    else if (_state_ == "Sleeping") {
      return FontLoadingMachine_Sleeping_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FontLoadingMachine_Start_onError(_self, data);
    }
    else if (_state_ == "OnFont") {
      return FontLoadingMachine_OnFont_onError(_self, data);
    }
    else if (_state_ == "Sleeping") {
      return FontLoadingMachine_Sleeping_onError(_self, data);
    }
    return null;
  };
}

function Saver() {
  var _self = this;
  _self.type_name = "Saver";
  _self.state = "Loading";
  _self.loaded = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_loaded(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_default(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_default(_self, data);
    }
    return null;
  };
  _self.notSaved = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_default(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_default(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_default(_self, data);
    }
    else if (_state_ == "Saving") {
      return Saver_Saving_notSaved(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_default(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_default(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_onError(_self, data);
    }
    else if (_state_ == "Saving") {
      return Saver_Saving_onError(_self, data);
    }
    return null;
  };
  _self.onTag = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_default(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_default(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_onTag(_self, data);
    }
    return null;
  };
  _self.save = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_save(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_save(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_save(_self, data);
    }
    else if (_state_ == "Saving") {
      return Saver_Saving_save(_self, data);
    }
    return null;
  };
  _self.saved = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_default(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_default(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_default(_self, data);
    }
    else if (_state_ == "Saving") {
      return Saver_Saving_saved(_self, data);
    }
    return null;
  };
  _self.timeout = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Loading") {
      return Saver_Loading_default(_self, data);
    }
    else if (_state_ == "BeforePolling") {
      return Saver_BeforePolling_timeout(_self, data);
    }
    else if (_state_ == "Polling") {
      return Saver_Polling_default(_self, data);
    }
    return null;
  };
}

function RootSpacesShower() {
  var _self = this;
  _self.type_name = "RootSpacesShower";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootSpacesShower_Start_onData(_self, data);
    }
    else if (_state_ == "GettingProjects") {
      return RootSpacesShower_GettingProjects_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootSpacesShower_Start_onError(_self, data);
    }
    else if (_state_ == "GettingProjects") {
      return RootSpacesShower_GettingProjects_onError(_self, data);
    }
    return null;
  };
}

function RootFolderShower() {
  var _self = this;
  _self.type_name = "RootFolderShower";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootFolderShower_Start_onData(_self, data);
    }
    else if (_state_ == "ShowingSpaces") {
      return RootFolderShower_ShowingSpaces_onData(_self, data);
    }
    else if (_state_ == "ShowingFolder") {
      return RootFolderShower_ShowingFolder_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootFolderShower_Start_onError(_self, data);
    }
    else if (_state_ == "ShowingSpaces") {
      return RootFolderShower_ShowingSpaces_onError(_self, data);
    }
    else if (_state_ == "ShowingFolder") {
      return RootFolderShower_ShowingFolder_onError(_self, data);
    }
    return null;
  };
}

function DiagramCreator() {
  var _self = this;
  _self.type_name = "DiagramCreator";
  _self.state = "Start";
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "ChooseDiagramType") {
      return DiagramCreator_ChooseDiagramType_cancel(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DiagramCreator_Start_onData(_self, data);
    }
    else if (_state_ == "ChooseDiagramType") {
      return DiagramCreator_ChooseDiagramType_onData(_self, data);
    }
    else if (_state_ == "EnterName") {
      return DiagramCreator_EnterName_onData(_self, data);
    }
    else if (_state_ == "SendToServer") {
      return DiagramCreator_SendToServer_onData(_self, data);
    }
    else if (_state_ == "Done") {
      return DiagramCreator_Done_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DiagramCreator_Start_onError(_self, data);
    }
    else if (_state_ == "ChooseDiagramType") {
      return DiagramCreator_ChooseDiagramType_onError(_self, data);
    }
    else if (_state_ == "EnterName") {
      return DiagramCreator_EnterName_onError(_self, data);
    }
    else if (_state_ == "SendToServer") {
      return DiagramCreator_SendToServer_onError(_self, data);
    }
    else if (_state_ == "Done") {
      return DiagramCreator_Done_onError(_self, data);
    }
    return null;
  };
}

function FolderCreator() {
  var _self = this;
  _self.type_name = "FolderCreator";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderCreator_Start_onData(_self, data);
    }
    else if (_state_ == "EnterName") {
      return FolderCreator_EnterName_onData(_self, data);
    }
    else if (_state_ == "Expand") {
      return FolderCreator_Expand_onData(_self, data);
    }
    else if (_state_ == "RefreshParent") {
      return FolderCreator_RefreshParent_onData(_self, data);
    }
    else if (_state_ == "Done") {
      return FolderCreator_Done_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderCreator_Start_onError(_self, data);
    }
    else if (_state_ == "EnterName") {
      return FolderCreator_EnterName_onError(_self, data);
    }
    else if (_state_ == "Expand") {
      return FolderCreator_Expand_onError(_self, data);
    }
    else if (_state_ == "RefreshParent") {
      return FolderCreator_RefreshParent_onError(_self, data);
    }
    else if (_state_ == "Done") {
      return FolderCreator_Done_onError(_self, data);
    }
    return null;
  };
}

function Paster() {
  var _self = this;
  _self.type_name = "Paster";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return Paster_Start_onData(_self, data);
    }
    else if (_state_ == "RunningCopy") {
      return Paster_RunningCopy_onData(_self, data);
    }
    else if (_state_ == "RunningOperation") {
      return Paster_RunningOperation_onData(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return Paster_GettingHistory_onData(_self, data);
    }
    else if (_state_ == "Reloading") {
      return Paster_Reloading_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return Paster_Start_onError(_self, data);
    }
    else if (_state_ == "RunningCopy") {
      return Paster_RunningCopy_onError(_self, data);
    }
    else if (_state_ == "RunningOperation") {
      return Paster_RunningOperation_onError(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return Paster_GettingHistory_onError(_self, data);
    }
    else if (_state_ == "Reloading") {
      return Paster_Reloading_onError(_self, data);
    }
    return null;
  };
}

function FolderCutterDeleter() {
  var _self = this;
  _self.type_name = "FolderCutterDeleter";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderCutterDeleter_Start_onData(_self, data);
    }
    else if (_state_ == "RunningOperation") {
      return FolderCutterDeleter_RunningOperation_onData(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return FolderCutterDeleter_GettingHistory_onData(_self, data);
    }
    else if (_state_ == "Reloading") {
      return FolderCutterDeleter_Reloading_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return FolderCutterDeleter_Start_onError(_self, data);
    }
    else if (_state_ == "RunningOperation") {
      return FolderCutterDeleter_RunningOperation_onError(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return FolderCutterDeleter_GettingHistory_onError(_self, data);
    }
    else if (_state_ == "Reloading") {
      return FolderCutterDeleter_Reloading_onError(_self, data);
    }
    return null;
  };
}

function Renamer() {
  var _self = this;
  _self.type_name = "Renamer";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return Renamer_Start_onData(_self, data);
    }
    else if (_state_ == "EnteringName") {
      return Renamer_EnteringName_onData(_self, data);
    }
    else if (_state_ == "SendingToServer") {
      return Renamer_SendingToServer_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return Renamer_Start_onError(_self, data);
    }
    else if (_state_ == "EnteringName") {
      return Renamer_EnteringName_onError(_self, data);
    }
    else if (_state_ == "SendingToServer") {
      return Renamer_SendingToServer_onError(_self, data);
    }
    return null;
  };
}

function DrakonRenamer() {
  var _self = this;
  _self.type_name = "DrakonRenamer";
  _self.state = "GetFolder";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetFolder") {
      return DrakonRenamer_GetFolder_onData(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return DrakonRenamer_GettingFolder_onData(_self, data);
    }
    else if (_state_ == "SavingChanges") {
      return DrakonRenamer_SavingChanges_onData(_self, data);
    }
    else if (_state_ == "Reloaded") {
      return DrakonRenamer_Reloaded_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetFolder") {
      return DrakonRenamer_GetFolder_default(_self, data);
    }
    else if (_state_ == "GettingFolder") {
      return DrakonRenamer_GettingFolder_onError(_self, data);
    }
    else if (_state_ == "SavingChanges") {
      return DrakonRenamer_SavingChanges_onError(_self, data);
    }
    else if (_state_ == "Reloaded") {
      return DrakonRenamer_Reloaded_onError(_self, data);
    }
    return null;
  };
}

function DescriptionChanger() {
  var _self = this;
  _self.type_name = "DescriptionChanger";
  _self.state = "GetFolder";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetFolder") {
      return DescriptionChanger_GetFolder_onData(_self, data);
    }
    else if (_state_ == "ShowDialog") {
      return DescriptionChanger_ShowDialog_onData(_self, data);
    }
    else if (_state_ == "UserInput") {
      return DescriptionChanger_UserInput_onData(_self, data);
    }
    else if (_state_ == "Saving") {
      return DescriptionChanger_Saving_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetFolder") {
      return DescriptionChanger_GetFolder_onError(_self, data);
    }
    else if (_state_ == "ShowDialog") {
      return DescriptionChanger_ShowDialog_onError(_self, data);
    }
    else if (_state_ == "UserInput") {
      return DescriptionChanger_UserInput_onError(_self, data);
    }
    else if (_state_ == "Saving") {
      return DescriptionChanger_Saving_onError(_self, data);
    }
    return null;
  };
}

function RecentGetter() {
  var _self = this;
  _self.type_name = "RecentGetter";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RecentGetter_Start_onData(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return RecentGetter_GettingHistory_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RecentGetter_Start_onError(_self, data);
    }
    else if (_state_ == "GettingHistory") {
      return RecentGetter_GettingHistory_onError(_self, data);
    }
    return null;
  };
}

function AccessShower() {
  var _self = this;
  _self.type_name = "AccessShower";
  _self.state = "Start";
  _self.addUser = function(data) {
    var _state_ = _self.state;
    if (_state_ == "AccessScreen") {
      return AccessShower_AccessScreen_addUser(_self, data);
    }
    return null;
  };
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "AccessScreen") {
      return AccessShower_AccessScreen_cancel(_self, data);
    }
    else if (_state_ == "AddingUser") {
      return AccessShower_AddingUser_cancel(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return AccessShower_Start_onData(_self, data);
    }
    else if (_state_ == "GettingAccess") {
      return AccessShower_GettingAccess_onData(_self, data);
    }
    else if (_state_ == "AccessScreen") {
      return AccessShower_AccessScreen_onData(_self, data);
    }
    else if (_state_ == "AddingUser") {
      return AccessShower_AddingUser_onData(_self, data);
    }
    else if (_state_ == "SavingAccess") {
      return AccessShower_SavingAccess_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return AccessShower_Start_onError(_self, data);
    }
    else if (_state_ == "GettingAccess") {
      return AccessShower_GettingAccess_onError(_self, data);
    }
    else if (_state_ == "AccessScreen") {
      return AccessShower_AccessScreen_onError(_self, data);
    }
    else if (_state_ == "SavingAccess") {
      return AccessShower_SavingAccess_onError(_self, data);
    }
    return null;
  };
  _self.removeUser = function(data) {
    var _state_ = _self.state;
    if (_state_ == "AccessScreen") {
      return AccessShower_AccessScreen_removeUser(_self, data);
    }
    return null;
  };
  _self.togglePublic = function(data) {
    var _state_ = _self.state;
    if (_state_ == "AccessScreen") {
      return AccessShower_AccessScreen_togglePublic(_self, data);
    }
    return null;
  };
}

function PaneStatus() {
  var _self = this;
  _self.type_name = "PaneStatus";
  _self.state = "Hidden";
  _self.hide = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Visible") {
      return PaneStatus_Visible_hide(_self, msg);
    }
    return null;
  };
  _self.show = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Hidden") {
      return PaneStatus_Hidden_show(_self, msg);
    }
    return null;
  };
  _self.tab = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Hidden") {
      return PaneStatus_Hidden_tab(_self, msg);
    }
    else if (_state_ == "Visible") {
      return PaneStatus_Visible_tab(_self, msg);
    }
    return null;
  };
}

function ProjectDeleter() {
  var _self = this;
  _self.type_name = "ProjectDeleter";
  _self.state = "Start";
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Sure1") {
      return ProjectDeleter_Sure1_cancel(_self, data);
    }
    else if (_state_ == "Sure2") {
      return ProjectDeleter_Sure2_cancel(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return ProjectDeleter_Start_onData(_self, data);
    }
    else if (_state_ == "Sure1") {
      return ProjectDeleter_Sure1_onData(_self, data);
    }
    else if (_state_ == "Sure2") {
      return ProjectDeleter_Sure2_onData(_self, data);
    }
    else if (_state_ == "Deleting") {
      return ProjectDeleter_Deleting_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return ProjectDeleter_Start_onError(_self, data);
    }
    else if (_state_ == "Sure1") {
      return ProjectDeleter_Sure1_onError(_self, data);
    }
    else if (_state_ == "Waiting") {
      return ProjectDeleter_Waiting_onError(_self, data);
    }
    else if (_state_ == "Sure2") {
      return ProjectDeleter_Sure2_onError(_self, data);
    }
    else if (_state_ == "Deleting") {
      return ProjectDeleter_Deleting_onError(_self, data);
    }
    return null;
  };
  _self.timeout = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Waiting") {
      return ProjectDeleter_Waiting_timeout(_self, data);
    }
    return null;
  };
}

function ProjectCreator() {
  var _self = this;
  _self.type_name = "ProjectCreator";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return ProjectCreator_Start_onData(_self, data);
    }
    else if (_state_ == "EnterName") {
      return ProjectCreator_EnterName_onData(_self, data);
    }
    else if (_state_ == "Creating") {
      return ProjectCreator_Creating_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return ProjectCreator_Start_onError(_self, data);
    }
    else if (_state_ == "EnterName") {
      return ProjectCreator_EnterName_onError(_self, data);
    }
    else if (_state_ == "Creating") {
      return ProjectCreator_Creating_onError(_self, data);
    }
    return null;
  };
}

function TrashLoader() {
  var _self = this;
  _self.type_name = "TrashLoader";
  _self.state = "GetAccount";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetAccount") {
      return TrashLoader_GetAccount_onData(_self, data);
    }
    else if (_state_ == "GettingAccount") {
      return TrashLoader_GettingAccount_onData(_self, data);
    }
    else if (_state_ == "GettingSpaceRubbish") {
      return TrashLoader_GettingSpaceRubbish_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetAccount") {
      return TrashLoader_GetAccount_onError(_self, data);
    }
    else if (_state_ == "GettingAccount") {
      return TrashLoader_GettingAccount_onError(_self, data);
    }
    else if (_state_ == "GettingSpaceRubbish") {
      return TrashLoader_GettingSpaceRubbish_onError(_self, data);
    }
    return null;
  };
  _self.timeout = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GettingSpaceRubbish") {
      return TrashLoader_GettingSpaceRubbish_timeout(_self, data);
    }
    return null;
  };
}

function ThrowTrash() {
  var _self = this;
  _self.type_name = "ThrowTrash";
  _self.state = "GetAccount";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetAccount") {
      return ThrowTrash_GetAccount_onData(_self, data);
    }
    else if (_state_ == "GettingAccount") {
      return ThrowTrash_GettingAccount_onData(_self, data);
    }
    else if (_state_ == "Throwing") {
      return ThrowTrash_Throwing_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "GetAccount") {
      return ThrowTrash_GetAccount_onError(_self, data);
    }
    else if (_state_ == "GettingAccount") {
      return ThrowTrash_GettingAccount_onError(_self, data);
    }
    else if (_state_ == "Throwing") {
      return ThrowTrash_Throwing_onError(_self, data);
    }
    return null;
  };
  _self.timeout = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Throwing") {
      return ThrowTrash_Throwing_timeout(_self, data);
    }
    return null;
  };
}

function RootTrashShower() {
  var _self = this;
  _self.type_name = "RootTrashShower";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootTrashShower_Start_onData(_self, data);
    }
    else if (_state_ == "ShowingSpaces") {
      return RootTrashShower_ShowingSpaces_onData(_self, data);
    }
    else if (_state_ == "ShowingTrash") {
      return RootTrashShower_ShowingTrash_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootTrashShower_Start_onError(_self, data);
    }
    else if (_state_ == "ShowingSpaces") {
      return RootTrashShower_ShowingSpaces_onError(_self, data);
    }
    else if (_state_ == "ShowingTrash") {
      return RootTrashShower_ShowingTrash_onError(_self, data);
    }
    return null;
  };
}

function Restorer() {
  var _self = this;
  _self.type_name = "Restorer";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return Restorer_Start_onData(_self, data);
    }
    else if (_state_ == "Restoring") {
      return Restorer_Restoring_onData(_self, data);
    }
    else if (_state_ == "Going") {
      return Restorer_Going_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return Restorer_Start_onError(_self, data);
    }
    else if (_state_ == "Restoring") {
      return Restorer_Restoring_onError(_self, data);
    }
    else if (_state_ == "Going") {
      return Restorer_Going_onError(_self, data);
    }
    return null;
  };
}

function RootRecentLoader() {
  var _self = this;
  _self.type_name = "RootRecentLoader";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootRecentLoader_Start_onData(_self, data);
    }
    else if (_state_ == "GettingProjects") {
      return RootRecentLoader_GettingProjects_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return RootRecentLoader_Start_onError(_self, data);
    }
    else if (_state_ == "GettingProjects") {
      return RootRecentLoader_GettingProjects_onError(_self, data);
    }
    return null;
  };
}

function UserAdder() {
  var _self = this;
  _self.type_name = "UserAdder";
  _self.state = "Primary";
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Primary") {
      return UserAdder_Primary_cancel(_self, data);
    }
    else if (_state_ == "Typing") {
      return UserAdder_Typing_cancel(_self, data);
    }
    return null;
  };
  _self.choose = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Primary") {
      return UserAdder_Primary_choose(_self, data);
    }
    else if (_state_ == "Typing") {
      return UserAdder_Typing_choose(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Primary") {
      return UserAdder_Primary_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Primary") {
      return UserAdder_Primary_onError(_self, data);
    }
    return null;
  };
  _self.onInput = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Primary") {
      return UserAdder_Primary_onInput(_self, data);
    }
    else if (_state_ == "Typing") {
      return UserAdder_Typing_onInput(_self, data);
    }
    return null;
  };
  _self.timeout = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Typing") {
      return UserAdder_Typing_timeout(_self, data);
    }
    return null;
  };
}

function Sharer() {
  var _self = this;
  _self.type_name = "Sharer";
  _self.state = "UserInput";
  _self.access = function(data) {
    var _state_ = _self.state;
    if (_state_ == "UserInput") {
      return Sharer_UserInput_access(_self, data);
    }
    return null;
  };
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "UserInput") {
      return Sharer_UserInput_cancel(_self, data);
    }
    else if (_state_ == "Access") {
      return Sharer_Access_cancel(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "UserInput") {
      return Sharer_UserInput_onData(_self, data);
    }
    else if (_state_ == "Access") {
      return Sharer_Access_onData(_self, data);
    }
    return null;
  };
}

function OwnSaver() {
  var _self = this;
  _self.type_name = "OwnSaver";
  _self.state = "Start";
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return OwnSaver_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return OwnSaver_Dialog_cancel(_self, data);
    }
    else if (_state_ == "Subdialog") {
      return OwnSaver_Subdialog_cancel(_self, data);
    }
    return null;
  };
  _self.login = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return OwnSaver_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return OwnSaver_Dialog_login(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return OwnSaver_Start_onData(_self, data);
    }
    else if (_state_ == "Subdialog") {
      return OwnSaver_Subdialog_onData(_self, data);
    }
    return null;
  };
  _self.signup = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return OwnSaver_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return OwnSaver_Dialog_signup(_self, data);
    }
    return null;
  };
}

function LoginMachine() {
  var _self = this;
  _self.type_name = "LoginMachine";
  _self.state = "Start";
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return LoginMachine_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return LoginMachine_Dialog_cancel(_self, data);
    }
    return null;
  };
  _self.login = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return LoginMachine_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return LoginMachine_Dialog_login(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return LoginMachine_Start_onData(_self, data);
    }
    else if (_state_ == "Saving") {
      return LoginMachine_Saving_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return LoginMachine_Start_default(_self, data);
    }
    else if (_state_ == "Saving") {
      return LoginMachine_Saving_onError(_self, data);
    }
    return null;
  };
}

function SignupMachine() {
  var _self = this;
  _self.type_name = "SignupMachine";
  _self.state = "Start";
  _self.cancel = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return SignupMachine_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return SignupMachine_Dialog_cancel(_self, data);
    }
    return null;
  };
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return SignupMachine_Start_onData(_self, data);
    }
    else if (_state_ == "Saving") {
      return SignupMachine_Saving_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return SignupMachine_Start_default(_self, data);
    }
    else if (_state_ == "Saving") {
      return SignupMachine_Saving_onError(_self, data);
    }
    return null;
  };
  _self.signup = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return SignupMachine_Start_default(_self, data);
    }
    else if (_state_ == "Dialog") {
      return SignupMachine_Dialog_signup(_self, data);
    }
    return null;
  };
}

function TryMeLoader() {
  var _self = this;
  _self.type_name = "TryMeLoader";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return TryMeLoader_Start_onData(_self, data);
    }
    else if (_state_ == "LoadingExample") {
      return TryMeLoader_LoadingExample_onData(_self, data);
    }
    else if (_state_ == "LoadingFonts") {
      return TryMeLoader_LoadingFonts_onData(_self, data);
    }
    else if (_state_ == "Sleeping") {
      return TryMeLoader_Sleeping_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return TryMeLoader_Start_onError(_self, data);
    }
    else if (_state_ == "LoadingExample") {
      return TryMeLoader_LoadingExample_onError(_self, data);
    }
    else if (_state_ == "LoadingFonts") {
      return TryMeLoader_LoadingFonts_onError(_self, data);
    }
    else if (_state_ == "Sleeping") {
      return TryMeLoader_Sleeping_onError(_self, data);
    }
    return null;
  };
}

function DiagramSearch() {
  var _self = this;
  _self.type_name = "DiagramSearch";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DiagramSearch_Start_onData(_self, data);
    }
    else if (_state_ == "Folders") {
      return DiagramSearch_Folders_onData(_self, data);
    }
    else if (_state_ == "ItemsPause") {
      return DiagramSearch_ItemsPause_onData(_self, data);
    }
    else if (_state_ == "Items") {
      return DiagramSearch_Items_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DiagramSearch_Start_default(_self, data);
    }
    else if (_state_ == "Folders") {
      return DiagramSearch_Folders_onError(_self, data);
    }
    else if (_state_ == "ItemsPause") {
      return DiagramSearch_ItemsPause_onError(_self, data);
    }
    else if (_state_ == "Items") {
      return DiagramSearch_Items_onError(_self, data);
    }
    return null;
  };
}

function DullSearch() {
  var _self = this;
  _self.type_name = "DullSearch";
  _self.state = "Start";
  _self.dummy = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DullSearch_Start_dummy(_self, data);
    }
    return null;
  };
  _self.onInput = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DullSearch_Start_onInput(_self, data);
    }
    else if (_state_ == "Dummy") {
      return DullSearch_Dummy_onInput(_self, data);
    }
    return null;
  };
  _self.stop = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DullSearch_Start_stop(_self, data);
    }
    else if (_state_ == "Dummy") {
      return DullSearch_Dummy_stop(_self, data);
    }
    return null;
  };
}

function InputThrottle() {
  var _self = this;
  _self.type_name = "InputThrottle";
  _self.state = "Idle";
  _self.onInput = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return InputThrottle_Idle_onInput(_self, data);
    }
    else if (_state_ == "Waiting") {
      return InputThrottle_Waiting_onInput(_self, data);
    }
    return null;
  };
  _self.timeout = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return InputThrottle_Idle_default(_self, data);
    }
    else if (_state_ == "Waiting") {
      return InputThrottle_Waiting_timeout(_self, data);
    }
    return null;
  };
}

function DashboardShower() {
  var _self = this;
  _self.type_name = "DashboardShower";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DashboardShower_Start_onData(_self, data);
    }
    else if (_state_ == "GettingProjects") {
      return DashboardShower_GettingProjects_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return DashboardShower_Start_onError(_self, data);
    }
    else if (_state_ == "GettingProjects") {
      return DashboardShower_GettingProjects_onError(_self, data);
    }
    return null;
  };
}

function ReferencesSearch() {
  var _self = this;
  _self.type_name = "ReferencesSearch";
  _self.state = "Start";
  _self.onData = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return ReferencesSearch_Start_onData(_self, data);
    }
    else if (_state_ == "ItemsPause") {
      return ReferencesSearch_ItemsPause_onData(_self, data);
    }
    else if (_state_ == "Items") {
      return ReferencesSearch_Items_onData(_self, data);
    }
    return null;
  };
  _self.onError = function(data) {
    var _state_ = _self.state;
    if (_state_ == "Start") {
      return ReferencesSearch_Start_default(_self, data);
    }
    else if (_state_ == "ItemsPause") {
      return ReferencesSearch_ItemsPause_onError(_self, data);
    }
    else if (_state_ == "Items") {
      return ReferencesSearch_Items_onError(_self, data);
    }
    return null;
  };
}


globs = createState()
bindHandlers()

this.init = init
this.getCurrent = getCurrent
this.getDiagram = getDiagram
this.onEvent = onEvent
this.saveUserSettings = saveUserSettings
this.saveChanges = saveChanges
this.onStateChange = onStateChange
this.undo = undo
this.redo = redo
this.onSearchItem = onSearchItem
this.resetSearch = resetSearch
this.goToFolder = goToFolder
this.goToProjectsNoArg = goToProjectsNoArg
this.findReferences = findReferences
}
