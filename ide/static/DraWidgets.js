function DraWidgets(window, document, translate, id, imagePath, gName) {

var gToolTip = new ToolTip(window, document)

var gGenerators = {}

var gWidgets = new TabGen4(gName)
gWidgets.setNextId(id)


this.imagePath = imagePath || "images/"


var TreeIconWidth = 30
var DarkBackground = "#455A64"
var DockHeaderColor = "#E2EDF5"
var SlashColor = "cyan"

var self = this

// Autogenerated with DRAKON Editor 1.32


function Check_measureWidth(height) {
    // item 3384
    return this.width
}

function Check_setChecked(checked) {
    // item 3398
    this.isChecked = checked
    // item 3399
    setCheckboxImage(this)
}

function EditBox_setRect() {
    var button, div, edit, height, input, left, rect, top, width
    // item 3553
    div = get(this.id)
    input = this.input
    button = this.button
    // item 3554
    rect = this.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 3552
    setPos(
        div,
        left,
        top,
        width,
        height
    )
    // item 3555
    edit = get(this.id + "_edit")
    // item 3556
    setWidth(
        edit,
        width
    )
}

function HDock_measureHeight(width) {
    // item 2539
    return this.height
}

function HDock_setRect() {
    var centerWidth, div, height, hp, left, leftX, rect, rightX, top, vp, width
    // item 2497
    rect = this.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 2498
    div = get(this.id)
    // item 2499
    setPos(
        div,
        left,
        top,
        width,
        height
    )
    // item 2500
    leftX = 0
    // item 25010001
    var _ind2501 = 0;
    var _col2501 = this.lefts;
    var _len2501 = _col2501.length;
    while (true) {
        // item 25010002
        if (_ind2501 < _len2501) {
            
        } else {
            break;
        }
        // item 25010004
        var kid = _col2501[_ind2501];
        // item 2532
        hp = kid.hPadding || 0
        vp = kid.vPadding || 0
        // item 2521
        kid.width = kid.measureWidth(this.height)
        leftX += hp
        // item 2520
        setRect(
            kid,
            leftX,
            vp,
            kid.width,
            height - vp * 2
        )
        // item 2504
        leftX += kid.width
        // item 25010003
        _ind2501++;
    }
    // item 2517
    rightX = width
    // item 25180001
    var _ind2518 = 0;
    var _col2518 = this.rights;
    var _len2518 = _col2518.length;
    while (true) {
        // item 25180002
        if (_ind2518 < _len2518) {
            
        } else {
            break;
        }
        // item 25180004
        var kid = _col2518[_ind2518];
        // item 2533
        hp = kid.hPadding || 0
        vp = kid.vPadding || 0
        // item 2524
        kid.width = kid.measureWidth(this.height)
        // item 2525
        rightX -= (kid.width + hp)
        // item 2523
        setRect(
            kid,
            rightX,
            vp,
            kid.width,
            height - vp * 2
        )
        // item 25180003
        _ind2518++;
    }
    // item 2526
    if (this.center) {
        // item 2531
        centerWidth = rightX - leftX
        centerWidth = Math.max(0, centerWidth)
        // item 2530
        setRect(
            this.center,
            leftX,
            0,
            centerWidth,
            height
        )
    }
}

function ListGrid_addItem(widget, item) {
    var cell, column, columns, i, listId, row, table
    // item 2797
    columns = widget.columns
    // item 2798
    if (columns.length == item.cells.length) {
        // item 2796
        listId = makeListId(widget.id)
        table = get(listId)
        // item 2795
        row = make(table, "tr")
        row.id = makeItemId(widget.id, item.id)
        item.row = row
        // item 2802
        row.className = "list_item"
        // item 2808
        bindEvent(
            row,
            "click",
            widget.id,
            item.id,
            null,
            false
        )
        // item 2809
        bindOnContext(
            row,
            widget.id,
            item.id,
            null
        )
        // item 28040001
        i = 0;
        while (true) {
            // item 28040002
            if (i < columns.length) {
                
            } else {
                break;
            }
            // item 2806
            cell = item.cells[i]
            column = columns[i]
            // item 2807
            addListGridCell(
                column,
                row,
                cell,
                widget.id,
                item.id,
                i
            )
            // item 28040003
            i++;
        }
        // item 2794
        widget.items.push(item)
    } else {
        // item 2801
        raise("Wrong number of cells in row")
    }
}

function ListGrid_check(id) {
    var i
    // item 2880
    i = getItemOrdinal(this.items, id)
    // item 2881
    checkItem(this, i)
}

function ListGrid_checkAll() {
    var i
    // item 29250001
    i = 0;
    while (true) {
        // item 29250002
        if (i < this.items.length) {
            
        } else {
            break;
        }
        // item 2924
        checkItem(this, i)
        // item 29250003
        i++;
    }
}

function ListGrid_getChecked() {
    var result
    // item 2892
    result = {
        checked : [],
        unchecked : []
    }
    // item 28940001
    var _ind2894 = 0;
    var _col2894 = this.items;
    var _len2894 = _col2894.length;
    while (true) {
        // item 28940002
        if (_ind2894 < _len2894) {
            
        } else {
            break;
        }
        // item 28940004
        var item = _col2894[_ind2894];
        // item 2896
        if (item.checked) {
            // item 2899
            result.checked.push(item.id)
        } else {
            // item 2900
            result.unchecked.push(item.id)
        }
        // item 28940003
        _ind2894++;
    }
    // item 2893
    return result
}

function ListGrid_getItem(id) {
    var i
    // item 4112
    i = getItemOrdinal(this.items, id)
    // item 4113
    if (i == -1) {
        // item 4116
        return null
    } else {
        // item 4111
        return this.items[i]
    }
}

function ListGrid_isChecked(id) {
    var i
    // item 3853
    i = getItemOrdinal(this.items, id)
    // item 3854
    if (i == -1) {
        // item 3857
        return false
    } else {
        // item 3858
        return !!this.items[i].checked
    }
}

function ListGrid_mark(id) {
    // item 38650001
    var _ind3865 = 0;
    var _col3865 = this.items;
    var _len3865 = _col3865.length;
    while (true) {
        // item 38650002
        if (_ind3865 < _len3865) {
            
        } else {
            break;
        }
        // item 38650004
        var item = _col3865[_ind3865];
        // item 3870
        if (item.id == id) {
            // item 3872
            item.row.className = "list_item_marked"
        } else {
            // item 3873
            item.row.className = "list_item"
        }
        // item 38650003
        _ind3865++;
    }
}

function ListGrid_measureHeight(width) {
    // item 4133
    var height = WTextButton_measureHeight.call(this, width)
    // item 4134
    return height + 3
}

function ListGrid_remove(id) {
    var div, divId, ordinal
    // item 2766
    ordinal = getItemOrdinal(this.items, id)
    // item 2767
    if (ordinal == -1) {
        
    } else {
        // item 2770
        removeAt(this.items, ordinal)
        // item 2771
        divId = makeItemId(this.id, id)
        // item 2772
        div = get(divId)
        deleteDiv(div)
    }
}

function ListGrid_setActive(id) {
    var itemId, row
    // item 28670001
    var _ind2867 = 0;
    var _col2867 = this.items;
    var _len2867 = _col2867.length;
    while (true) {
        // item 28670002
        if (_ind2867 < _len2867) {
            
        } else {
            break;
        }
        // item 28670004
        var item = _col2867[_ind2867];
        // item 2872
        itemId = makeItemId(this.id, item.id)
        row = get(itemId)
        // item 2869
        if (item.id == id) {
            // item 2874
            row.className = "list_item_marked"
        } else {
            // item 2873
            row.className = "list_item"
        }
        // item 28670003
        _ind2867++;
    }
}

function ListGrid_setItemText(rowId, cellId, text) {
    var id
    // item 4103
    id = makeCellId(
        makeItemId(this.id, rowId),
        cellId
    )
    // item 2779
    HtmlUtils.setText(id, text)
}

function ListGrid_setItems(items) {
    var list, listId
    // item 2754
    this.items = []
    // item 2755
    listId = makeListId(this.id)
    list = get(listId)
    // item 2756
    list.innerHTML = ""
    // item 27570001
    var _ind2757 = 0;
    var _col2757 = items;
    var _len2757 = _col2757.length;
    while (true) {
        // item 27570002
        if (_ind2757 < _len2757) {
            
        } else {
            break;
        }
        // item 27570004
        var item = _col2757[_ind2757];
        // item 2759
        ListGrid_addItem(this, item)
        // item 27570003
        _ind2757++;
    }
    // item 2760
    List_updateNoItems(this)
}

function ListGrid_uncheck(id) {
    var i
    // item 2887
    i = getItemOrdinal(this.items, id)
    // item 2888
    uncheckItem(this, i)
}

function ListGrid_uncheckAll() {
    var i
    // item 29310001
    i = 0;
    while (true) {
        // item 29310002
        if (i < this.items.length) {
            
        } else {
            break;
        }
        // item 2930
        uncheckItem(this, i)
        // item 29310003
        i++;
    }
}

function List_addItem(widget, item) {
    var list, listId, row
    // item 2704
    widget.items.push(item)
    // item 2706
    listId = makeListId(widget.id)
    list = get(listId)
    // item 2705
    row = make(list, "div")
    row.id = makeItemId(widget.id, item.id)
    // item 2708
    setListRowFormat(row)
    // item 2707
    HtmlUtils.setDivText(row, item.text)
    // item 2709
    bindEvent(
        row,
        "click",
        widget.id,
        item.id,
        null,
        false
    )
    // item 2710
    bindOnContext(
        row,
        widget.id,
        item.id,
        null
    )
}

function List_remove(id) {
    var div, divId, ordinal
    // item 2676
    ordinal = getItemOrdinal(this.items, id)
    // item 2677
    if (ordinal == -1) {
        
    } else {
        // item 2680
        removeAt(this.items, ordinal)
        // item 2681
        divId = makeItemId(this.id, id)
        // item 2682
        div = get(divId)
        deleteDiv(div)
    }
}

function List_setItemText(id, text) {
    var divId
    // item 2688
    divId = makeItemId(this.id, id)
    // item 2689
    HtmlUtils.setText(divId, text)
}

function List_setItems(items) {
    var list, listId
    // item 2664
    this.items = []
    // item 2665
    listId = makeListId(this.id)
    list = get(listId)
    // item 2666
    list.innerHTML = ""
    // item 26670001
    var _ind2667 = 0;
    var _col2667 = items;
    var _len2667 = _col2667.length;
    while (true) {
        // item 26670002
        if (_ind2667 < _len2667) {
            
        } else {
            break;
        }
        // item 26670004
        var item = _col2667[_ind2667];
        // item 2669
        List_addItem(this, item)
        // item 26670003
        _ind2667++;
    }
    // item 2670
    List_updateNoItems(this)
}

function List_updateNoItems(widget) {
    var list, no
    // item 2651
    list = makeListId(widget.id)
    no = makeNoItemsId(widget.id)
    // item 2647
    if (widget.items.length == 0) {
        // item 2650
        display(list, "none")
        display(no, "block")
    } else {
        // item 2652
        display(list, "block")
        display(no, "none")
    }
}

function Many_measureHeight(width) {
    // item 3288
    return this.active.measureHeight(width)
}

function Many_measureWidth(height) {
    // item 3294
    return this.active.measureWidth(height)
}

function Many_setActive(id) {
    var index
    // item 3301
    index = findChild(this, id)
    // item 3302
    if (index == -1) {
        // item 3305
        raise("Many.setActive: bad child id: " + id)
    } else {
        // item 3307
        if (this.active == null) {
            
        } else {
            // item 3306
            display(this.active.id, "none")
        }
        // item 3311
        this.active = this.kids[index]
        // item 3310
        display(id, "inline-block")
    }
}

function Many_setRect() {
    var height, rect, width
    // item 3318
    setWidgetDiv(this)
    // item 3317
    rect = this.rect
    
    width = rect.width
    height = rect.height
    // item 3316
    setRect(
        this.active,
        0,
        0,
        width,
        height
    )
}

function Multipane_makeComboId(widgetId) {
    // item 4215
    return widgetId + "_combo"
}

function Multipane_makeManyId(widgetId) {
    // item 4209
    return widgetId + "_many"
}

function Multipane_setActive(id) {
    var comboId, select
    // item 4193
    if (id in this.tabs) {
        // item 4203
        comboId = Multipane_makeComboId(this.id)
        select = get(comboId)
        select.value = id
        // item 4217
        onPaneChange(this.id, id)
    } else {
        // item 4196
        raise("Multipane.setActive: bad child id: " + id)
    }
}

function Page_measureHeight(width) {
    var height, kidWidth
    // item 2573
    height = this.padding
    kidWidth = width - this.padding * 2
    // item 25710001
    var _ind2571 = 0;
    var _col2571 = this.kids;
    var _len2571 = _col2571.length;
    while (true) {
        // item 25710002
        if (_ind2571 < _len2571) {
            
        } else {
            break;
        }
        // item 25710004
        var kid = _col2571[_ind2571];
        // item 2576
        kid.height = kid.measureHeight(kidWidth)
        // item 2577
        height += (kid.height + this.padding)
        // item 25710003
        _ind2571++;
    }
    // item 2574
    return height
}

function Page_setRect() {
    var SCROLL_WIDTH, actualHeight, actualWidth, div, finalHeight, height, inner, kidWidth, left, rect, top, width, y
    // item 2589
    SCROLL_WIDTH = 15
    // item 2587
    rect = this.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 2580
    div = get(this.id)
    // item 2588
    actualHeight = this.measureHeight(width)
    actualWidth = width
    // item 2590
    if (actualHeight > height) {
        // item 2593
        actualWidth = width - SCROLL_WIDTH
        actualHeight = this.measureHeight(actualWidth)
        // item 2597
        finalHeight = height
        // item 2595
        div.style.overflowY = "scroll"
    } else {
        // item 2596
        finalHeight = actualHeight
        // item 2594
        div.style.overflow = "hidden"
    }
    // item 2609
    inner = get(makeInnerId(this))
    inner.style.height = actualHeight + "px"
    // item 2581
    setPos(
        div,
        left,
        top,
        width,
        finalHeight
    )
    // item 2582
    y = this.padding
    // item 2608
    kidWidth = actualWidth - this.padding * 2
    // item 25830001
    var _ind2583 = 0;
    var _col2583 = this.kids;
    var _len2583 = _col2583.length;
    while (true) {
        // item 25830002
        if (_ind2583 < _len2583) {
            
        } else {
            break;
        }
        // item 25830004
        var kid = _col2583[_ind2583];
        // item 2585
        setRect(
            kid,
            this.padding,
            y,
            kidWidth,
            kid.height
        )
        // item 2586
        y += (kid.height + this.padding)
        // item 25830003
        _ind2583++;
    }
}

function Path_addStage(text, id, clickable) {
    var slash, stage, td
    // item 3806
    td = this.cell
    // item 3807
    if (td.innerHTML == "") {
        
    } else {
        // item 3810
        slash = make(td, "span")
        slash.style.display = "inline"
        slash.style.color = SlashColor
        //make(td, "wbr")
        // item 3817
        HtmlUtils.setDivText(slash, " › ")
        // item 3820
        if (clickable) {
            
        } else {
            // item 3822
            make(td, "br")
        }
    }
    // item 3811
    stage = make(td, "span")
    stage.style.display = "inline"
    stage.style.color = "white"
    // item 3825
    if (id) {
        // item 3824
        this.idToDiv[id] = stage
    }
    // item 3818
    HtmlUtils.setDivText(stage, text)
    // item 3812
    if (clickable) {
        // item 3823
        stage.style.fontWeight = "normal"
        stage.style.fontSize = "80%"
        // item 3815
        stage.style.cursor = "pointer"
        //stage.style.textDecoration = "underline"
        // item 3837
        bindEvent(
            stage,
            "click",
            this.id,
            id,
            null,
            false
        )
    } else {
        // item 3819
        stage.style.fontWeight = "normal"
        stage.style.fontSize = "100%"
    }
}

function Path_clear() {
    // item 3800
    this.cell.innerHTML = ""
}

function Path_renameStage(id, name) {
    var div
    // item 3792
    div = this.idToDiv[id]
    // item 3794
    if (div) {
        // item 3793
        HtmlUtils.setDivText(div, name)
    }
}

function Search_focus() {
    // item 3439
    this.input.focus()
}

function Search_getValue() {
    // item 3859
    return this.input.value
}

function Search_setRect() {
    var button, div, height, innerHeight, innerWidth, input, inputWidth, left, rect, top, width
    // item 3474
    div = get(this.id)
    input = this.input
    button = this.button
    // item 3478
    rect = this.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 3477
    innerWidth = width - 2
    innerHeight = height - 2
    inputWidth = innerWidth - height
    // item 3473
    setPos(
        div,
        left,
        top,
        width,
        height
    )
    // item 3475
    setPos(
        input,
        1,
        0,
        inputWidth - 1,
        innerHeight - 1
    )
    // item 3476
    setPos(
        button,
        inputWidth,
        0,
        innerHeight,
        innerHeight
    )
}

function TextButton_enable(enabled) {
    var div, style
    // item 4091
    div = get(this.id)
    style = div.style
    // item 4086
    if (enabled) {
        // item 4090
        style.background = DarkBackground
        div.className = "common_button"
    } else {
        // item 4089
        style.background = "#909090"
        div.className = ""
    }
}

function TextButton_measureWidth(height) {
    var div, style, width
    // item 3506
    if (this.customWidth) {
        // item 3509
        return this.customWidth
    } else {
        // item 3510
        div = get(this.id)
        style = div.style
        // item 3511
        style.display = "inline-block"
        style.position = "absolute"
        delete style.width
        style.left = "0px"
        style.top = "0px"
        // item 3512
        width = div.offsetWidth
        // item 3513
        return width
    }
}

function VDock_measureHeight(width) {
    var bottom, top
    // item 4142
    top = this.top.measureHeight(width)
    bottom = this.center.measureHeight(width)
    // item 4143
    return top + bottom
}

function VDock_setRect() {
    var bottomHeight, div, height, left, rect, top, topHeight, width
    // item 2367
    rect = this.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 2362
    div = get(this.id)
    // item 2364
    topHeight = this.top.measureHeight(width)
    // item 2365
    bottomHeight = height - topHeight
    bottomHeight = Math.max(0, bottomHeight)
    // item 2363
    setPos(
        div,
        left,
        top,
        width,
        height
    )
    // item 2366
    setRect(this.top, 0, 0, width, topHeight)
    setRect(this.center, 0, topHeight, width, bottomHeight)
}

function VPanel_measureHeight(width) {
    var height
    // item 2396
    height = 0
    // item 23940001
    var _ind2394 = 0;
    var _col2394 = this.kids;
    var _len2394 = _col2394.length;
    while (true) {
        // item 23940002
        if (_ind2394 < _len2394) {
            
        } else {
            break;
        }
        // item 23940004
        var kid = _col2394[_ind2394];
        // item 2399
        kid.height = kid.measureHeight(width)
        // item 2400
        height += kid.height
        // item 23940003
        _ind2394++;
    }
    // item 2397
    return height
}

function VPanel_measureWidth() {
    // item 4287
    return this.width
}

function VPanel_setRect() {
    var div, height, left, rect, top, width, y
    // item 2388
    rect = this.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 2381
    div = get(this.id)
    // item 2382
    setPos(
        div,
        left,
        top,
        width,
        height
    )
    // item 2383
    y = 0
    // item 23840001
    var _ind2384 = 0;
    var _col2384 = this.kids;
    var _len2384 = _col2384.length;
    while (true) {
        // item 23840002
        if (_ind2384 < _len2384) {
            
        } else {
            break;
        }
        // item 23840004
        var kid = _col2384[_ind2384];
        // item 4288
        kid.height = kid.measureHeight(width)
        // item 2386
        setRect(
            kid,
            0,
            y,
            width,
            kid.height
        )
        // item 2387
        y += kid.height
        // item 23840003
        _ind2384++;
    }
}

function WTextButton_measureHeight(width) {
    var div, height, style
    // item 2421
    div = get(this.id)
    style = div.style
    // item 2422
    style.display = "inline-block"
    style.position = "absolute"
    delete style.height
    style.left = "0px"
    style.top = "0px"
    style.width = width + "px"
    style.height = ""
    // item 2423
    height = div.offsetHeight
    // item 2424
    return height
}

function addListGridCell(column, row, cell, widgetId, rowId, cellId) {
    var button, id, img, style, td
    var _sw28160000_ = 0;
    // item 2849
    id = makeCellId(
        makeItemId(widgetId, rowId),
        cellId
    )
    // item 2815
    td = make(row, "td")
    style = td.style
    // item 2835
    style.width = column.width
    // item 28160000
    _sw28160000_ = column.type;
    // item 28160001
    if (_sw28160000_ === "text") {
        // item 2824
        style.padding = "6px"
        style.lineHeight = "120%"
        // item 2823
        HtmlUtils.setDivText(td, cell.text)
        // item 2826
        td.id = id
    } else {
        // item 28160002
        if (_sw28160000_ === "image") {
            // item 2825
            img = makeImg(
                td,
                cell.src,
                cell.width,
                cell.height
            )
            // item 2832
            if (column.clickable) {
                // item 2836
                td.className = "black_hover common_button"
                //style.cursor = "default"
                // item 2847
                bindEvent(
                    td,
                    "click",
                    widgetId,
                    rowId,
                    cellId,
                    true
                )
            }
            // item 2839
            if (cell.paddingLeft) {
                // item 2842
                style.paddingLeft = cell.paddingLeft
            }
            // item 2843
            if (cell.paddingRight) {
                // item 2846
                style.paddingRight = cell.paddingRight
            }
            // item 2827
            img.id = id
        } else {
            // item 28160003
            if (_sw28160000_ === "button") {
                
            } else {
                // item 28160004
                throw "Unexpected switch value: " + _sw28160000_;
            }
            // item 2829
            button = make(td, "div")
            // item 2838
            style.padding = "3px"
            // item 2837
            makeInternalButtonStyle(button)
            // item 2848
            bindEvent(
                td,
                "click",
                widgetId,
                rowId,
                cellId,
                true
            )
            // item 2830
            HtmlUtils.setDivText(
                button,
                translate(cell.text)
            )
            // item 2831
            button.id = id
        }
    }
}

function addTooltip(element, text) {
    // item 1683
    if (text) {
        // item 1686
        gToolTip.makeFromElement(
            element,
            translate(text)
        )
    }
}

function bindEvent(element, name, widgetId, rowId, cellId, stopProcessing) {
    var callback, fullname
    // item 2966
    callback = function(evt) {
        fireEvent(
            evt,
            name,
            widgetId,
            rowId,
            cellId,
            stopProcessing
        )
    }
    // item 2968
    fullname = "on" + name
    // item 2969
    element[fullname] = callback
}

function bindEventInternal(element, name, widget, callback) {
    var callback2, fullname, wrapped
    // item 2985
    callback2 = function(evt) {
        callback(evt, widget)
    }
    // item 2984
    wrapped = self.wrapException(callback2)
    // item 2982
    fullname = "on" + name
    // item 2983
    element[fullname] = wrapped
}

function bindOnContext(element, widgetId, rowId, cellId) {
    var callback
    // item 2974
    callback = function(evt) {
    	HtmlUtils.stopPropagation(evt)
    	scheduleEvent(
    		evt,
    		"contextmenu",
    		widgetId,
    		rowId,
    		cellId
    	)
    	return false
    }
    // item 2976
    element.oncontextmenu = callback
}

function buildPaneCombo(div, node, widget) {
    var items, onChange, option, select
    // item 4223
    select = make(div, "select")
    // item 4265
    select.id = Multipane_makeComboId(node.parentId)
    // item 4226
    items = Utils.objectValues(node.tabs)
    // item 4234
    items.sort(byLabel)
    // item 42240001
    var _ind4224 = 0;
    var _col4224 = items;
    var _len4224 = _col4224.length;
    while (true) {
        // item 42240002
        if (_ind4224 < _len4224) {
            
        } else {
            break;
        }
        // item 42240004
        var item = _col4224[_ind4224];
        // item 4235
        option = make(select, "option")
        // item 4236
        option.value = item.id
        option.text = item.label
        // item 42240003
        _ind4224++;
    }
    // item 4244
    onChange = function(evt) {
        onPaneChange(node.parentId, evt.currentTarget.value)
    }
    // item 4245
    select.onchange = onChange
    // item 4247
    widget.measureWidth = WTextButton_measureHeight
}

function byLabel(left, right) {
    var leftName, rightName
    // item 4232
    leftName = left.label
    rightName = right.label
    // item 4233
    return leftName.localeCompare(rightName)
}

function checkItem(widget, i) {
    var cellId, id, img, item, rowId
    // item 2909
    item = widget.items[i]
    id = item.id
    // item 2907
    rowId = makeItemId(widget.id, id)
    cellId = makeCellId(rowId, "0")
    // item 2906
    img = get(cellId)
    // item 2908
    img.src = makeImagePath("checked.png")
    // item 2910
    item.checked = true
}

function clearDiv(element) {
    // item 1394
    element.innerHTML = ""
}

function clearSearch(widget) {
    // item 3446
    widget.input.value = ""
    // item 3445
    setSearchIcon(widget)
}

function compareTreeItems(left, right) {
    // item 3246
    if (left.rank < right.rank) {
        // item 3249
        return -1
    } else {
        // item 3250
        if (left.rank > right.rank) {
            // item 3253
            return 1
        } else {
            // item 3254
            return left.text.localeCompare(right.text)
        }
    }
}

function connect(widget, field, other) {
    // item 3986
    gWidgets.set(
        "widgets",
        widget.id,
        field,
        other.id
    )
}

function copyArray(array) {
    // item 3924
    return array.slice(0)
}

function copyClass(src, div) {
    // item 3904
    if (src.className) {
        // item 3907
        div.className += (" " + src.className)
    }
}

function copyProperty(src, name, dst) {
    // item 251
    if (name in src) {
        // item 254
        dst[name] = src[name]
    }
}

function copyStyle(src, div) {
    // item 176
    if (src.style) {
        // item 1800001
        var _ind180 = 0;
        var _col180 = src.style;
        var _keys180 = Object.keys(_col180); 
        var _len180 = _keys180.length;
        while (true) {
            // item 1800002
            if (_ind180 < _len180) {
                
            } else {
                break;
            }
            // item 1800004
            var key = _keys180[_ind180]; var value = _col180[key];
            // item 179
            div.style[key] = value
            // item 1800003
            _ind180++;
        }
    }
}

function createCheck(div, node, widget) {
    var height, style, width
    // item 3360
    style = div.style
    div.className = "common_button"
    noContext(div)
    // item 3362
    width = getProperty(node, "width")
    height = getProperty(node, "height")
    widget.width = width
    widget.height = height
    // item 3361
    style.display = "inline-block"
    style.width = width + "px"
    style.height = height + "px"
    style.backgroundSize = width + "px " + height + "px"
    style.backgroundPosition = "center"
    style.backgroundRepeat = "no-repeat"
    // item 3358
    setCheckboxImage(widget)
    // item 3363
    div.style.cursor = "default"
    // item 3365
    bindEventInternal(
        div,
        "click",
        widget,
        onCheckClick
    )
    // item 3364
    widget.setRect = default_setRect
    widget.measureWidth = Check_measureWidth
    widget.setChecked = Check_setChecked
}

function createCustom(div, node, widget) {
    var builder
    // item 3518
    builder = getProperty(node, "builder")
    // item 3521
    builder(div, node, widget)
    // item 3519
    widget.setRect = default_setRect
    widget.measureHeight = WTextButton_measureHeight
    widget.measureWidth = TextButton_measureWidth
}

function createDummy(div, node, widget) {
    // item 2447
    copyStyle(node, div)
    // item 2448
    widget.setRect = default_setRect
    widget.measureWidth = dummy_measureWidth
    widget.measureHeight = dummy_measureHeight
    // item 2449
    copyProperty(node, "height", widget)
    copyProperty(node, "width", widget)
}

function createEditBox(div, node, widget) {
    var editor, error, label, lower, type, water
    // item 3545
    type = getProperty(node, "editType")
    water = getPropertyOr(node, "water", "")
    // item 3542
    error = make(div, "div")
    error.id = node.id + "_error"
    error.style.color = "#600000"
    error.style.display = "none"
    error.style.fontWeight = "bold"
    error.style.fontSize = "90%"
    // item 3543
    lower = make(div, "div")
    // item 3535
    editor = make(lower, "input")
    editor.type = type
    // item 4280
    if (water) {
        // item 3539
        label = make(lower, "div")
        label.style.position = "absolute"
        label.style.left = "10px"
        label.style.bottom = "10px"
        label.style.color = "grey"
        label.style.pointerEvents = "none"
        // item 3540
        HtmlUtils.setDivText(label, water)
        // item 3541
        HtmlUtils.setPasswordWatermark(editor, label, water)
    }
    // item 3537
    editor.className = "mousetrap"
    // item 3538
    editor.style.padding = "10px"
    editor.style.margin = "0px"
    editor.style.border = "solid 1px #707070"
    // item 3544
    copyStyle(node, div)
    // item 3548
    bindEvent(
        editor,
        "keypress",
        widget.id,
        null,
        null,
        false
    )
    // item 3536
    editor.id = node.id + "_edit"
    // item 3526
    widget.setRect = EditBox_setRect
    widget.measureHeight = WTextButton_measureHeight
}

function createHDock(div, node, widget) {
    var kid
    // item 2483
    widget.height = getProperty(node, "height")
    // item 2491
    copyStyle(node, div)
    // item 2479
    widget.setRect = HDock_setRect
    widget.measureHeight = HDock_measureHeight
    // item 4149
    widget.lefts = []
    widget.rights = []
    // item 3980
    gWidgets.createLink(
        "widgets",
        "leftLink",
        "widgets",
        "lefts",
        "list"
    )
    // item 3990
    gWidgets.createLink(
        "widgets",
        "rightLink",
        "widgets",
        "rights",
        "list"
    )
    // item 3991
    gWidgets.createLink(
        "widgets",
        "center",
        "widgets",
        "p2",
        "simple"
    )
    // item 4077
    disconnectOnDestruct(
        widget,
        ["center"]
    )
    // item 24800001
    var _ind2480 = 0;
    var _col2480 = getProperty(node, "lefts");
    var _len2480 = _col2480.length;
    while (true) {
        // item 24800002
        if (_ind2480 < _len2480) {
            
        } else {
            break;
        }
        // item 24800004
        var childNode = _col2480[_ind2480];
        // item 2482
        kid = createWidgetUnder(div, childNode, widget)
        connect(kid, "leftLink", widget)
        // item 2492
        copyProperty(childNode, "vPadding", kid)
        copyProperty(childNode, "hPadding", kid)
        // item 24800003
        _ind2480++;
    }
    // item 39560001
    var _ind3956 = 0;
    var _col3956 = getProperty(node, "rights");
    var _len3956 = _col3956.length;
    while (true) {
        // item 39560002
        if (_ind3956 < _len3956) {
            
        } else {
            break;
        }
        // item 39560004
        var childNode = _col3956[_ind3956];
        // item 3958
        kid = createWidgetUnder(div, childNode, widget)
        connect(kid, "rightLink", widget)
        // item 3959
        copyProperty(childNode, "vPadding", kid)
        copyProperty(childNode, "hPadding", kid)
        // item 39560003
        _ind3956++;
    }
    // item 3960
    if (node.center) {
        // item 3963
        kid = createWidgetUnder(
            div,
            node.center,
            widget
        )
        // item 3992
        connect(widget, "center", kid)
    }
}

function createImageButton(div, node, widget) {
    var height, image, style, url, width
    // item 2548
    style = div.style
    div.className = "common_button"
    noContext(div)
    // item 2545
    width = getProperty(node, "width")
    height = getProperty(node, "height")
    image = getProperty(node, "image")
    widget.width = width
    widget.height = height
    // item 2547
    copyStyle(node, div)
    // item 2550
    url = makeImagePathUrl(image)
    // item 2549
    style.display = "inline-block"
    style.width = width + "px"
    style.height = height + "px"
    style.backgroundImage = url
    style.backgroundSize = width + "px " + height + "px"
    // item 2544
    widget.setRect = default_setRect
    widget.measureWidth = dummy_measureWidth
    widget.measureHeight = dummy_measureHeight
    // item 2551
    bindEvent(
        div,
        "click",
        node.id,
        null,
        null,
        true
    )
    // item 2552
    addTooltip(div, node.tooltip)
}

function createLabel(div, node, widget) {
    var text, textId
    // item 3347
    div.style.padding = "5px"
    // item 3348
    textId = getProperty(node, "text")
    // item 3349
    if (node.raw) {
        // item 3343
        text = textId
    } else {
        // item 3352
        text = translate(textId)
    }
    // item 3353
    HtmlUtils.setDivText(div, text)
    // item 3345
    copyStyle(node, div)
    // item 3346
    widget.setRect = default_setRect
    widget.measureWidth = TextButton_measureWidth
    widget.measureHeight = WTextButton_measureHeight
}

function createList(div, node, widget) {
    var noItems, table
    // item 2629
    widget.items = []
    // item 2626
    div.style.overflowY = "scroll"
    // item 2622
    copyStyle(node, div)
    // item 2623
    table = make(div, "div")
    noItems = make(div, "div")
    // item 2624
    table.id = makeListId(node.id)
    noItems.id = makeNoItemsId(node.id)
    // item 2625
    HtmlUtils.setDivText(
        noItems,
        translate("MES_NO_ITEMS")
    )
    // item 2627
    noItems.style.textAlign = "center"
    noItems.style.padding = "30px"
    noItems.style.color = "#ff8080"
    // item 2628
    List_updateNoItems(widget)
    // item 2621
    widget.setRect = default_setRect
    widget.setItems = List_setItems
    widget.remove = List_remove
    widget.setItemText = List_setItemText
}

function createListGrid(div, node, widget) {
    var noItems, table
    // item 2747
    widget.items = []
    widget.columns = getProperty(node, "columns")
    widget.checkable = node.checkable || false
    // item 4144
    if (node.noScroll) {
        
    } else {
        // item 2744
        div.style.overflowY = "scroll"
    }
    // item 4105
    bindOnContext(
        div,
        widget.id,
        null,
        null
    )
    // item 2740
    copyStyle(node, div)
    // item 2741
    table = make(div, "table")
    noItems = make(div, "div")
    // item 2748
    table.style.width = "100%"
    // item 2742
    table.id = makeListId(node.id)
    noItems.id = makeNoItemsId(node.id)
    // item 2743
    HtmlUtils.setDivText(
    	noItems,
    	translate("MES_NO_ITEMS")
    )
    // item 2745
    noItems.style.textAlign = "center"
    noItems.style.padding = "30px"
    noItems.style.color = "#ff8080"
    // item 2746
    List_updateNoItems(widget)
    // item 2739
    widget.setRect = default_setRect
    widget.setItems = ListGrid_setItems
    widget.remove = ListGrid_remove
    widget.setItemText = ListGrid_setItemText
    widget.setActive = ListGrid_setActive
    widget.check = ListGrid_check
    widget.uncheck = ListGrid_uncheck
    widget.getChecked = ListGrid_getChecked
    widget.checkAll = ListGrid_checkAll
    widget.uncheckAll = ListGrid_uncheckAll
    widget.isChecked = ListGrid_isChecked
    widget.mark = ListGrid_mark
    widget.getItem = ListGrid_getItem
    widget.measureHeight = ListGrid_measureHeight
    // item 4124
    if (node.rows) {
        // item 4127
        widget.setItems(node.rows)
    }
}

function createMany(div, node, widget) {
    var kid, kids
    // item 3273
    widget.active = null
    // item 3278
    kids = getProperty(node, "kids")
    // item 32750001
    var _ind3275 = 0;
    var _col3275 = kids;
    var _len3275 = _col3275.length;
    while (true) {
        // item 32750002
        if (_ind3275 < _len3275) {
            
        } else {
            break;
        }
        // item 32750004
        var childNode = _col3275[_ind3275];
        // item 3277
        kid = createWidgetUnder(
            div,
            childNode,
            widget
        )
        // item 3281
        display(kid.id, "none")
        // item 32750003
        _ind3275++;
    }
    // item 3280
    copyStyle(node, div)
    // item 3279
    widget.setRect = Many_setRect
    widget.measureHeight = Many_measureHeight
    widget.measureWidth = Many_measureWidth
    widget.setActive = Many_setActive
}

function createMultipane(div, node, widget) {
    var button, combo, header, kids, label, many, style, tab, tabs, vdock
    // item 4174
    widget.active = null
    // item 4178
    kids = getProperty(node, "kids")
    // item 4180
    many = {
        id : Multipane_makeManyId(widget.id),
        type : "many",
        kids : kids
    }
    // item 4181
    tabs = {}
    // item 41750001
    var _ind4175 = 0;
    var _col4175 = kids;
    var _len4175 = _col4175.length;
    while (true) {
        // item 41750002
        if (_ind4175 < _len4175) {
            
        } else {
            break;
        }
        // item 41750004
        var childNode = _col4175[_ind4175];
        // item 4182
        label = translate(
            getProperty(childNode, "tab")
        )
        // item 4177
        tab = {
            id : getProperty(childNode, "id"),
            label : label
        }
        // item 4183
        tabs[tab.id] = tab
        // item 41750003
        _ind4175++;
    }
    // item 4184
    combo = {
        type : "custom",
        builder : buildPaneCombo,
        tabs : tabs,
        parentId : widget.id
    }
    // item 4166
    button = {
        id : node.id + "_close",
        type : "image_button",
        image : "grey-cross.png",
        style : {},
        width : 30,
        height : 30
    }
    // item 4170
    style = {
        background : DockHeaderColor,
        borderBottom : darkLine()
    }
    // item 4167
    header = {
        type : "hdock",
        lefts : [combo],
        rights : [button],
        height : 30,
        style : style
    }
    // item 4168
    vdock = {
        id : node.id,
        type : "vdock",
        top : header,
        center : many
    }
    // item 4169
    createVDock(
        div,
        vdock,
        widget
    )
    // item 4190
    widget.tabs = tabs
    widget.setActive = Multipane_setActive
}

function createPage(div, node, widget) {
    var innerDiv, kids
    // item 2557
    innerDiv = make(div, "innerDiv")
    innerDiv.id = makeInnerId(widget)
    // item 2562
    kids = getProperty(node, "kids")
    // item 2565
    widget.padding = node.padding || 0
    // item 4289
    widget.width = node.width
    // item 25590001
    var _ind2559 = 0;
    var _col2559 = kids;
    var _len2559 = _col2559.length;
    while (true) {
        // item 25590002
        if (_ind2559 < _len2559) {
            
        } else {
            break;
        }
        // item 25590004
        var childNode = _col2559[_ind2559];
        // item 2561
        createWidgetUnder(
            innerDiv,
            childNode,
            widget
        )
        // item 25590003
        _ind2559++;
    }
    // item 2564
    copyStyle(node, innerDiv)
    // item 2563
    widget.setRect = Page_setRect
    widget.measureHeight = Page_measureHeight
    widget.measureWidth = VPanel_measureWidth
}

function createPane(div, node, widget) {
    var button, header, kidNode, label, style, vdock
    // item 3334
    label = {
        type : "label",
        text : getProperty(node, "text"),
        style : {padding:"7px"}
    }
    // item 3335
    button = {
        id : node.id + "_close",
        type : "image_button",
        image : "grey-cross.png",
        style : {},
        width : 30,
        height : 30
    }
    // item 3977
    style = {
        background : DockHeaderColor,
        borderBottom : darkLine()
    }
    // item 3336
    header = {
        type : "hdock",
        lefts : [label],
        rights : [button],
        height : 30,
        style : style
    }
    // item 3324
    kidNode = getProperty(node, "kid")
    // item 3337
    vdock = {
        id : node.id,
        type : "vdock",
        top : header,
        center : kidNode
    }
    // item 3338
    createVDock(
        div,
        vdock,
        widget
    )
}

function createPath(div, node, widget) {
    var style, table, td, tr
    // item 3786
    widget.idToDiv = {}
    // item 3777
    table = make(div, "table")
    // item 3784
    table.style.tableLayout = "fixed"
    table.width = "100%"
    // item 3778
    widget.table = table
    // item 3780
    tr = make(table, "tr")
    td = make(tr, "td")
    style = td.style
    widget.cell = td
    // item 3781
    style.verticalAlign = "middle"
    style.color = "white"
    style.paddingLeft = "5px"
    //style.wordWrap = "break-word"
    style.lineHeight = "130%"
    style.whiteSpace = "nowrap"
    style.overflow = "hidden"
    style.height = "52px"
    // item 3838
    copyStyle(node, td)
    // item 3782
    widget.setRect = default_setRect
    widget.measureHeight = WTextButton_measureHeight
    widget.measureWidth = TextButton_measureWidth
    widget.addStage = Path_addStage
    widget.clear = Path_clear
    widget.renameStage = Path_renameStage
}

function createSearch(div, node, widget) {
    var height, img, input, width
    // item 3426
    width = getProperty(node, "width")
    widget.width = width
    height = getProperty(node, "height")
    widget.height = height
    // item 3425
    widget.setRect = Search_setRect
    widget.measureWidth = dummy_measureWidth
    widget.measureHeight = dummy_measureHeight
    // item 3416
    div.style.background = "white"
    div.style.border = "solid 1px " + DarkBackground
    // item 3423
    widget.clear = function() { clearSearch(widget) }
    widget.getValue = Search_getValue
    widget.focus = Search_focus
    // item 3417
    input = make(div, "input")
    input.type = "text"
    // item 3418
    input.style.outline = "none"
    input.style.background = "white"
    input.style.border = "none"
    input.style.padding = "2px"
    // item 4147
    //input.className = "mousetrap"
    // item 3419
    widget.input = input
    // item 3428
    bindEventInternal(
        input,
        "input",
        widget,
        onSearchButtonInput
    )
    // item 4266
    bindEventInternal(
        input,
        "keydown",
        widget,
        onSearchButtonKeyPress
    )
    // item 3420
    img = make(div, "img")
    // item 3421
    img.width = height
    img.height = height
    img.style.display = "inline-block"
    img.draggable = false
    // item 3422
    widget.button = img
    // item 3429
    bindEventInternal(
        img,
        "click",
        widget,
        onSearchButtonClick
    )
    // item 3424
    setSearchIcon(widget)
}

function createSplitter(div, node, widget) {
    var border, dummy, left, leftOverlay, leftSplitter, linkFields, middle, right, rightOverlay, rightSplitter
    // item 3996
    gWidgets.createLink(
        "widgets",
        "leftChild",
        "widgets",
        "p2",
        "simple"
    )
    // item 3997
    gWidgets.createLink(
        "widgets",
        "rightChild",
        "widgets",
        "p2",
        "simple"
    )
    // item 3998
    gWidgets.createLink(
        "widgets",
        "middleChild",
        "widgets",
        "p2",
        "simple"
    )
    // item 4080
    linkFields = [
    	"leftChild",
    	"rightChild",
    	"middleChild"
    ]
    // item 4079
    disconnectOnDestruct(
        widget,
        linkFields
    )
    // item 3586
    left = getProperty(node, "leftChild")
    middle = getProperty(node, "middleChild")
    right = getProperty(node, "rightChild")
    // item 3590
    widget.splitterWidth = node.splitterWidth || 6
    widget.left = node.left || 200
    widget.right = node.right || 200
    widget.leftVisible = getPropertyOr(
    	node,
    	"leftVisible",
    	true
    )
    widget.rightVisible = getPropertyOr(
    	node,
    	"rightVisible",
    	true
    )
    widget.overlayWidth = getPropertyOr(
    	node,
    	"overlayWidth",
    	20
    )
    widget.overShift = getPropertyOr(
    	node,
    	"overShift",
    	5
    )
    // item 3582
    connect(
        widget,
        "leftChild",
        createWidgetUnder(div, left, widget)
    )
    // item 4001
    connect(
        widget,
        "middleChild",
        createWidgetUnder(div, middle, widget)
    )
    // item 4000
    connect(
        widget,
        "rightChild",
        createWidgetUnder(div, right, widget)
    )
    // item 3560
    leftSplitter = make(div, "div")
    rightSplitter = make(div, "div")
    leftOverlay = make(div, "div")
    rightOverlay = make(div, "div")
    dummy = make(div, "div")
    // item 3561
    widget.leftSplitter  = leftSplitter 
    widget.rightSplitter  = rightSplitter 
    widget.leftOverlay  = leftOverlay 
    widget.rightOverlay  = rightOverlay 
    widget.dummy  = dummy
    // item 3562
    dummy.style.display = "none"
    // item 3564
    leftOverlay.style.zIndex = 10
    rightOverlay.style.zIndex = 10
    leftOverlay.className = "dumb"
    rightOverlay.className = "dumb"
    dummy.style.zIndex = 5
    dummy.style.background = "#5090ff"
    dummy.style.border = "solid 1px black"
    // item 3565
    border = "solid 1px " + DarkBackground
    // item 3563
    leftSplitter.style.background = DarkBackground
    rightSplitter.style.background = DarkBackground
    leftSplitter.style.borderLeft = border
    leftSplitter.style.borderRight = border
    rightSplitter.style.borderLeft = border
    rightSplitter.style.borderRight = border
    leftOverlay.style.cursor = "ew-resize"
    rightOverlay.style.cursor = "ew-resize"
    // item 3583
    //leftOverlay.style.background = "green"
    //leftOverlay.style.opacity = 0.3
    //rightOverlay.style.background = "blue"
    //rightOverlay.style.opacity = 0.3
    // item 3587
    bindEventInternal(
        leftOverlay,
        "mousedown",
        widget,
        onLeftSplitterDown
    )
    // item 3594
    bindEventInternal(
        leftOverlay,
        "mousemove",
        widget,
        onSplitterMove
    )
    // item 3595
    bindEventInternal(
        leftOverlay,
        "mouseout",
        widget,
        onSplitterUp
    )
    // item 3599
    bindEventInternal(
        leftOverlay,
        "mouseup",
        widget,
        onSplitterUp
    )
    // item 3601
    bindEventInternal(
        rightOverlay,
        "mousedown",
        widget,
        onRightSplitterDown
    )
    // item 3602
    bindEventInternal(
        rightOverlay,
        "mousemove",
        widget,
        onSplitterMove
    )
    // item 3603
    bindEventInternal(
        rightOverlay,
        "mouseout",
        widget,
        onSplitterUp
    )
    // item 3600
    bindEventInternal(
        rightOverlay,
        "mouseup",
        widget,
        onSplitterUp
    )
    // item 3588
    bindEventInternal(
        leftOverlay,
        "touchstart",
        widget,
        wrapTouch(onLeftSplitterDown)
    )
    // item 3607
    bindEventInternal(
        leftOverlay,
        "touchmove",
        widget,
        onSplitterTouchMove
    )
    // item 3608
    bindEventInternal(
        leftOverlay,
        "touchend",
        widget,
        onSplitterUp
    )
    // item 3609
    bindEventInternal(
        leftOverlay,
        "touchcancel",
        widget,
        onSplitterUp
    )
    // item 3589
    bindEventInternal(
        rightOverlay,
        "touchstart",
        widget,
        wrapTouch(onRightSplitterDown)
    )
    // item 3610
    bindEventInternal(
        rightOverlay,
        "touchmove",
        widget,
        onSplitterTouchMove
    )
    // item 3611
    bindEventInternal(
        rightOverlay,
        "touchend",
        widget,
        onSplitterUp
    )
    // item 3612
    bindEventInternal(
        rightOverlay,
        "touchcancel",
        widget,
        onSplitterUp
    )
    // item 3613
    widget.setRect = resizeSplitter
}

function createTextButton(div, node, widget) {
    var text
    // item 3491
    div.className = "common_button"
    // item 3493
    widget.customWidth = node.customWidth || 0
    // item 3498
    noContext(div)
    // item 3497
    div.style.textAlign = "center"
    // item 3495
    copyStyle(node, div)
    copyClass(node, div)
    // item 3490
    text = getProperty(node, "text")
    // item 3908
    if (node.raw) {
        
    } else {
        // item 3911
        text = translate(text)
    }
    // item 3496
    HtmlUtils.setDivText(div, text)
    // item 3492
    widget.setRect = default_setRect
    widget.measureWidth = TextButton_measureWidth
    widget.enable = TextButton_enable
    // item 3500
    addTooltip(div, node.tooltip)
    // item 3499
    bindEvent(
        div,
        "click",
        node.id,
        null,
        null,
        true
    )
}

function createTreeNode(widget, parentDiv, item) {
    var icon, left, onPlus, plus, plusImg, textPart
    // item 3034
    item.div = make(parentDiv, "div")
    item.myDiv = make(item.div, "div")
    item.kidsDiv = make(item.div, "div")
    // item 3035
    item.myDiv.className = "list_item"
    item.myDiv.display = "inline-block"
    // item 3040
    item.myDiv.style.paddingLeft = (item.depth *
      TreeIconWidth) + "px"
    // item 3038
    bindEvent(
        item.myDiv,
        "click",
        widget.id,
        item.id,
        null,
        false
    )
    // item 3039
    bindOnContext(
        item.myDiv,
        widget.id,
        item.id,
        null
    )
    // item 3023
    if (item.isFolder) {
        // item 3029
        plusImg = makeImg(
            item.myDiv,
            "plus-collapse.png",
            TreeIconWidth,
            TreeIconWidth
        )
        // item 3978
        plusImg.style.verticalAlign = "middle"
        // item 3030
        item.plusDiv = plusImg
        // item 3031
        onPlus = function(evt, w) {
            onPlusClick(
                evt,
                w,
                item.id
            )
        }
        // item 3033
        plusImg.style.cursor = "default"
        // item 3043
        bindEventInternal(
            plusImg,
            "click",
            widget,
            onPlus
        )
    } else {
        // item 3026
        plus = makeIB(item.myDiv)
        plus.style.width = TreeIconWidth + "px"
    }
    // item 3979
    icon = makeImg(
        item.myDiv,
        item.icon,
        TreeIconWidth,
        TreeIconWidth
    )
    // item 3036
    icon.style.verticalAlign = "middle"
    // item 3037
    item.iconDiv = icon
    // item 3027
    textPart = makeIB(item.myDiv)
    textPart.style.padding = "8px"
    // item 3032
    item.textDiv = textPart
    // item 3028
    HtmlUtils.setDivText(textPart, item.text)
    // item 3041
    left = (item.depth + 2) * TreeIconWidth
}

function createTreeNodeItem(widget, parent, id, isFolder, icon, text, rank) {
    var depth, item, parentItem
    // item 3181
    depth = 0
    // item 3182
    if (parent) {
        // item 3185
        parentItem = getTreeItem(widget, parent)
        // item 3186
        depth = parentItem.depth + 1
    }
    // item 3174
    item = {
        parent : parent,
        isFolder : isFolder,
        icon : icon,
        text : text,
        rank : rank,
        depth : depth
    }
    // item 3179
    widget.items.insert(
        "items",
        id,
        item
    )
    // item 3180
    return getTreeItem(widget, id)
}

function createTreeView(div, node, widget) {
    // item 2990
    widget.setRect = default_setRect
    widget.clear = tree_clear
    widget.setIcon = tree_setIcon
    widget.setText = tree_setText
    widget.setChildren = tree_setChildren
    widget.removeChildren = tree_removeChildren
    widget.select = tree_select
    widget.deselect = tree_deselect
    widget.expand = tree_expand
    widget.collapse = tree_collapse
    widget.remove = tree_remove
    widget.rename = tree_rename
    widget.mark = tree_mark
    widget.getParent = tree_getParent
    widget.hasItem = tree_hasItem
    widget.scrollIntoView = tree_scrollIntoView
    widget.getItem = tree_getItem
    // item 2994
    widget.div = div
    // item 4005
    resetTreeData(widget)
    // item 2993
    copyStyle(node, div)
    // item 2991
    div.style.overflowY = "auto"
    div.style.overflowX = "hidden"
    div.style.whiteSpace = "nowrap"
    // item 2992
    createTreeViewRoot(widget)
    // item 2996
    bindOnContext(
        div,
        widget.id,
        null,
        null
    )
}

function createTreeViewRoot(widget) {
    var rootItem
    // item 3049
    rootItem = createTreeNodeItem(
        widget,
        null,
        "<root>",
        true,
        "none",
        "<root>",
        0
    )
    // item 3050
    widget.root = rootItem.id
    // item 3051
    rootItem.kidsDiv = widget.div
    rootItem.expanded = true
    rootItem.depth = -1
}

function createVDock(div, node, widget) {
    var centerNode, topNode
    // item 4002
    gWidgets.createLink(
        "widgets",
        "top",
        "widgets",
        "p2",
        "simple"
    )
    // item 4004
    gWidgets.createLink(
        "widgets",
        "center",
        "widgets",
        "p2",
        "simple"
    )
    // item 4078
    disconnectOnDestruct(
        widget,
        ["center", "top"]
    )
    // item 2355
    topNode = getProperty(node, "top")
    centerNode = getProperty(node, "center")
    // item 4003
    connect(
        widget,
        "top",
        createWidgetUnder(div, topNode, widget)
    )
    // item 2358
    connect(
        widget,
        "center",
        createWidgetUnder(div, centerNode, widget)
    )
    // item 2356
    widget.setRect = VDock_setRect
    widget.measureHeight = VDock_measureHeight
}

function createVPanel(div, node, widget) {
    var kids
    // item 2377
    kids = getProperty(node, "kids")
    widget.width = node.width
    // item 23740001
    var _ind2374 = 0;
    var _col2374 = kids;
    var _len2374 = _col2374.length;
    while (true) {
        // item 23740002
        if (_ind2374 < _len2374) {
            
        } else {
            break;
        }
        // item 23740004
        var childNode = _col2374[_ind2374];
        // item 2376
        createWidgetUnder(div, childNode, widget)
        // item 23740003
        _ind2374++;
    }
    // item 2373
    widget.setRect = VPanel_setRect
    widget.measureHeight = VPanel_measureHeight
    widget.measureWidth = VPanel_measureWidth
}

function createWLabel(div, node, widget) {
    var align, text, textId
    // item 4148
    align = node.textAlign || "left"
    div.style.textAlign = align
    // item 2441
    //div.style.padding = "8px"
    // item 2440
    div.style.textAlign = "left"
    div.style.lineHeight = "120%"
    div.style.whiteSpace = "normal"
    div.style.width = "100%"
    // item 2439
    copyStyle(node, div)
    // item 2431
    textId = getProperty(node, "text")
    // item 2432
    if (node.raw) {
        // item 2430
        text = textId
    } else {
        // item 2435
        text = translate(textId)
    }
    // item 2436
    HtmlUtils.setDivText(div, text)
    widget.text = text
    widget.div = div
    // item 2438
    widget.setRect = default_setRect
    widget.measureHeight = WTextButton_measureHeight
}

function createWTextButton(div, node, widget) {
    var text
    // item 2406
    div.className = "common_button"
    // item 2415
    widget.padding = node.padding || 10
    div.style.padding = widget.padding + "px"
    div.style.borderRadius = "5px"
    // item 2412
    noContext(div)
    // item 2411
    div.style.textAlign = "center"
    div.style.lineHeight = "120%"
    div.style.whiteSpace = "normal"
    // item 3912
    copyStyle(node, div)
    copyClass(node, div)
    // item 2405
    text = translate(getProperty(node, "text"))
    // item 2410
    HtmlUtils.setDivText(div, text)
    // item 2407
    widget.setRect = default_setRect
    widget.measureHeight = WTextButton_measureHeight
    // item 2414
    addTooltip(div, node.tooltip)
    // item 2413
    bindEvent(
        div,
        "click",
        node.id,
        null,
        null,
        true
    )
}

function createWidget(parentDiv, node) {
    var div, fields, generator, nodeCopy, widget
    // item 2315
    if (node.type) {
        // item 2319
        generator = gGenerators[node.type]
        // item 2320
        if (isUndefined(generator)) {
            // item 2322
            raise("Unknown widget type: \"" + 
            	node.type + "\"")
        } else {
            // item 3839
            nodeCopy = Utils.copyObject(node)
            // item 2324
            fields = {
                signalId : nodeCopy.signalId,
                type : nodeCopy.type
            }
            // item 3913
            widget = gWidgets.insert(
                "widgets",
                nodeCopy.id,
                fields
            )
            // item 3916
            if (widget.signalId) {
                
            } else {
                // item 2325
                widget.signalId = widget.id
            }
            // item 2331
            div = make(parentDiv, "div")
            div.id = widget.id
            nodeCopy.id = widget.id
            // item 2326
            generator(div, nodeCopy, widget)
            // item 2330
            return widget.id
        }
    } else {
        // item 2318
        raise("\"type\" property is missing in node")
    }
}

function createWidgetUnder(parentDiv, node, parent) {
    var id
    // item 3932
    id = createWidget(
        parentDiv,
        node
    )
    // item 3934
    gWidgets.update(
        "widgets",
        id,
        {parent:parent.id}
    )
    // item 3935
    return getWidget(id)
}

function darkLine() {
    // item 3898
    return  "1px solid " + DarkBackground
}

function defaultWrap(action) {
    // item 847
    return action
}

function default_setRect() {
    // item 2473
    setWidgetDiv(this)
}

function deleteDiv(div) {
    // item 1503
    if ((div) && (div.parentNode)) {
        // item 28
        div.parentNode.removeChild(div)
    }
}

function deleteWidget(id) {
    var element, kids, widget
    // item 2340
    element = document.getElementById(id)
    // item 2341
    if (element) {
        // item 2344
        deleteDiv(element)
    }
    // item 2345
    widget = getWidget(id)
    // item 3925
    kids = copyArray(widget.kids)
    // item 4037
    destruct(widget)
    // item 23460001
    var _ind2346 = 0;
    var _col2346 = kids;
    var _len2346 = _col2346.length;
    while (true) {
        // item 23460002
        if (_ind2346 < _len2346) {
            
        } else {
            break;
        }
        // item 23460004
        var kid = _col2346[_ind2346];
        // item 2348
        deleteWidget(kid.id)
        // item 23460003
        _ind2346++;
    }
    // item 2349
    gWidgets.remove("widgets", id)
}

function destruct(widget) {
    // item 4043
    if (widget.destructor) {
        // item 4046
        widget.destructor()
    }
}

function disconnect(widget, field) {
    // item 4057
    gWidgets.set(
        "widgets",
        widget.id,
        field,
        null
    )
}

function disconnectMany(widget, fields) {
    // item 40740001
    var _ind4074 = 0;
    var _col4074 = fields;
    var _len4074 = _col4074.length;
    while (true) {
        // item 40740002
        if (_ind4074 < _len4074) {
            
        } else {
            break;
        }
        // item 40740004
        var field = _col4074[_ind4074];
        // item 4076
        disconnect(widget, field)
        // item 40740003
        _ind4074++;
    }
}

function disconnectOnDestruct(widget, fields) {
    // item 4068
    widget.destructor = function() {
        disconnectMany(
            widget,
            fields
        )
    }
}

function display(id, value) {
    var element
    // item 22
    element = get(id)
    element.style.display = value
}

function divIBlock(div) {
    // item 2076
    div.style.display = "inline-block"
}

function dummy_measureHeight(width) {
    // item 2465
    if ("height" in this) {
        // item 2468
        return this.height
    } else {
        // item 2469
        raise("dummy_measureHeight: height not specified")
    }
}

function dummy_measureWidth(height) {
    // item 2455
    if ("width" in this) {
        // item 2458
        return this.width
    } else {
        // item 2459
        raise("dummy_measureWidth: width not specified")
    }
}

function findChild(widget, id) {
    var i, kids
    // item 3976
    kids = widget.kids
    // item 39690001
    i = 0;
    while (true) {
        // item 39690002
        if (i < kids.length) {
            
        } else {
            // item 3975
            return -1
        }
        // item 3971
        if (kids[i].id == id) {
            // item 3974
            return i
        }
        // item 39690003
        i++;
    }
}

function fireEvent(evt, type, widgetId, rowId, cellId, stopProcessing) {
    var action, wrapped
    // item 2938
    action = function() {
        fireEventCore(
            evt,
            type,
            widgetId,
            rowId,
            cellId,
            stopProcessing
        )
    }
    // item 2939
    wrapped = self.wrapException(action)
    // item 2940
    wrapped()
}

function fireEventCore(evt, type, widgetId, rowId, cellId, stopProcessing) {
    var widget
    // item 2946
    widget = getWidget(widgetId)
    // item 2947
    self.onEvent(
        evt,
        type,
        widget,
        rowId,
        cellId
    )
    // item 2948
    if ((stopProcessing) && (evt.stopPropagation)) {
        // item 2954
        evt.stopPropagation()
    }
}

function foreach(visit) {
    var state
    // item 3926
    state = gWidgets.getState()
    // item 38450001
    var _ind3845 = 0;
    var _col3845 = state.widgets;
    var _keys3845 = Object.keys(_col3845); 
    var _len3845 = _keys3845.length;
    while (true) {
        // item 38450002
        if (_ind3845 < _len3845) {
            
        } else {
            break;
        }
        // item 38450004
        var id = _keys3845[_ind3845]; var widget = _col3845[id];
        // item 3847
        visit(widget)
        // item 38450003
        _ind3845++;
    }
}

function get(id) {
    var element
    // item 14
    element = document.getElementById(id)
    // item 11
    if (element) {
        // item 15
        return element
    } else {
        // item 16
        throw Error("get: element '" + id + "' not found")
    }
}

function getItemOrdinal(items, id) {
    var i, item, result
    // item 2725
    result = -1
    // item 27260001
    i = 0;
    while (true) {
        // item 27260002
        if (i < items.length) {
            
        } else {
            break;
        }
        // item 2731
        item = items[i]
        // item 2728
        if (item.id == id) {
            // item 2732
            result = i
            break;
        }
        // item 27260003
        i++;
    }
    // item 2733
    return result
}

function getLocalCoords(element, evt) {
    var rect
    // item 2290
    rect = element.getBoundingClientRect()
    // item 2291
    return {
        x : evt.clientX - rect.left,
        y : evt.clientY - rect.top
    }
}

function getProperty(node, name) {
    var value
    // item 227
    value = node[name]
    // item 224
    if (value) {
        // item 229
        return value
    } else {
        // item 228
        raise("Missing property \"" +
          name + "\" for \"" + node.type + "\", id: " +
          node.id)
    }
}

function getPropertyOr(node, name, defaultValue) {
    // item 2047
    if (name in node) {
        // item 2052
        return node[name]
    } else {
        // item 2053
        return defaultValue
    }
}

function getTreeItem(widget, id) {
    // item 4012
    return widget.items.get("items", id)
}

function getTreeItems(widget) {
    var items
    // item 4029
    items = widget.items.getState().items
    // item 4030
    return items
}

function getWidget(id) {
    // item 3927
    return gWidgets.get("widgets", id)
}

function hideDiv(div) {
    // item 2090
    div.style.display = "none"
}

function hideWidget(id) {
    var div
    // item 2266
    div = get(id)
    // item 2265
    div.style.display = "none"
}

function init() {
    // item 140
    gGenerators.dummy = createDummy
    gGenerators.vdock = createVDock
    gGenerators.vpanel = createVPanel
    gGenerators.hdock = createHDock
    gGenerators.text_button = createTextButton
    gGenerators.image_button = createImageButton
    gGenerators.page = createPage
    gGenerators.list = createList
    gGenerators.list_grid = createListGrid
    gGenerators.tree = createTreeView
    gGenerators.many = createMany
    gGenerators.label = createLabel
    gGenerators.pane = createPane
    gGenerators.check = createCheck
    gGenerators.search = createSearch
    gGenerators.wbutton = createWTextButton
    gGenerators.wlabel = createWLabel
    gGenerators.custom = createCustom
    gGenerators.edit = createEditBox
    gGenerators.splitter = createSplitter
    gGenerators.path = createPath
    gGenerators.multi_pane = createMultipane
    // item 3914
    gWidgets.createTable("widgets")
    // item 3915
    gWidgets.createLink(
        "widgets",
        "parent",
        "widgets",
        "kids",
        "list"
    )
}

function isUndefined(obj) {
    // item 122
    return (typeof obj == "undefined")
}

function make(parent, tag) {
    var element
    // item 158
    element = document.createElement(tag)
    parent.appendChild(element)
    // item 160
    //element.ontouchstart = prevent
    //element.ontouchmove = prevent
    //element.ontouchend = prevent
    // item 159
    return element
}

function makeCellId(rowId, id) {
    // item 2861
    return rowId + "_" + id
}

function makeFullScreen(div) {
    var style
    // item 2082
    style = div.style
    // item 2083
    style.width = null
    style.display = "inline-block"
    style.position = "absolute"
    style.left = "0px"
    style.top = "0px"
    style.right = "0px"
    style.bottom = "0px"
    // item 2084
    //style.background = "rgba(1, 0, 0, 0.5)"
}

function makeIB(parent) {
    var div
    // item 1460
    div = make(parent, "div")
    div.style.display = "inline-block"
    // item 1461
    return div
}

function makeImagePath(image) {
    // item 439
    return self.imagePath + image
}

function makeImagePathUrl(image) {
    var path
    // item 445
    path = makeImagePath(image)
    // item 446
    return "url('" + path + "')"
}

function makeImg(parent, src, width, height) {
    var img
    // item 800
    img = make(parent, "img")
    // item 801
    img.src = makeImagePath(src)
    img.width = width
    img.height = height
    img.draggable = false
    // item 802
    return img
}

function makeInnerId(widget) {
    // item 2615
    return widget.id + "_inner"
}

function makeInternalButtonStyle(div) {
    // item 2855
    div.className = "internal_button common_button"
}

function makeItemId(widgetId, id) {
    // item 2658
    return widgetId + "_item_" + id
}

function makeListId(id) {
    // item 2641
    return id + "_list"
}

function makeNoItemsId(id) {
    // item 2635
    return id + "_noItems"
}

function noContext(div) {
    // item 452
    HtmlUtils.noContext(div)
}

function onCheckClick(evt, widget) {
    // item 3391
    widget.isChecked = !widget.isChecked
    // item 3392
    setCheckboxImage(widget)
    // item 3390
    fireEvent(
        evt,
        "check",
        widget.id,
        null,
        null,
        true
    )
}

function onLeftSplitterDown(evt, widget) {
    // item 3687
    startResizeSplitter(widget, evt, true)
}

function onPaneChange(widgetId, value) {
    var manyId, multi, widget
    // item 4255
    multi = getWidget(widgetId)
    // item 4254
    multi.active = value
    // item 4252
    manyId = Multipane_makeManyId(widgetId)
    // item 4246
    widget = getWidget(manyId)
    // item 4243
    widget.setActive(value)
    // item 4257
    if (multi.rect) {
        // item 4256
        multi.setRect()
    }
}

function onPlusClick(evt, widget, itemId) {
    var item
    // item 3260
    HtmlUtils.stopPropagation(evt)
    // item 3263
    item = getTreeItem(widget, itemId)
    // item 3264
    if (item.expanded) {
        // item 3267
        widget.collapse(itemId)
        // item 3268
        fireEventCore(
            evt,
            "collapse",
            widget.id,
            itemId,
            null,
            false
        )
    } else {
        // item 3261
        widget.expand(itemId)
        // item 3262
        fireEventCore(
            evt,
            "expand",
            widget.id,
            itemId,
            null,
            false
        )
    }
}

function onRightSplitterDown(evt, widget) {
    // item 3646
    startResizeSplitter(widget, evt, false)
}

function onSearchButtonClick(evt, widget) {
    // item 3452
    if (widget.input.value) {
        // item 3455
        clearSearch(widget)
        // item 3456
        fireEvent(
            evt,
            "input",
            widget.id,
            null,
            null,
            true
        )
    }
}

function onSearchButtonInput(evt, widget) {
    // item 3485
    setSearchIcon(widget)
    // item 3484
    fireEvent(
        evt,
        "input",
        widget.id,
        null,
        null,
        true
    )
}

function onSearchButtonKeyPress(evt, widget) {
    // item 4273
    if ((evt.key == "Escape") || (evt.keyCode == 27)) {
        // item 4276
        HtmlUtils.preventDefaultHandling(evt)
        widget.clear()
        // item 4272
        fireEvent(
            evt,
            "escape",
            widget.id,
            null,
            null,
            true
        )
    }
}

function onSplitterMove(evt, widget) {
    var box, current, div, local, thickness, width
    // item 3658
    if (widget.dragging) {
        // item 3652
        box = widget.rect
        // item 3662
        div = get(widget.id)
        // item 3661
        local = getLocalCoords(div, evt)
        // item 3655
        current = local.x + widget.shift
        // item 3657
        width = box.width
        thickness = widget.splitterWidth
        // item 3656
        current = Math.max(current, thickness)
        current = Math.min(current, width - thickness * 1.5)
        // item 3653
        widget.current = current
        // item 3654
        positionSplitterDummy(widget)
    }
}

function onSplitterTouchMove(evt, widget) {
    var mevt
    // item 3693
    mevt = HtmlUtils.touchToMouse(evt)
    evt.preventDefault()
    onSplitterMove(mevt, widget)
}

function onSplitterUp(evt, widget) {
    var box, current
    // item 3677
    if (widget.dragging) {
        // item 3680
        widget.dragging = false
        // item 3676
        box = widget.rect
        // item 3674
        current = widget.current
        // item 3668
        if (widget.isLeft) {
            // item 3671
            widget.left = current
        } else {
            // item 3675
            widget.right = box.width - current
        }
        // item 3672
        hideDiv(widget.dummy)
        // item 3673
        widget.setRect()
        // item 3681
        fireEvent(
        	evt,
        	"resize",
        	widget.id,
        	null,
        	null,
        	false
        )
    }
}

function positionSplitterDummy(widget) {
    var box, height, thickness
    // item 3618
    box = widget.rect
    height = box.height
    // item 3619
    thickness = widget.splitterWidth
    // item 3617
    setPos(
        widget.dummy,
        widget.current - thickness / 2,
        0,
        thickness,
        height - 2
    )
}

function raise(text) {
    // item 100
    throw new Error(text)
}

function removeAt(array, index) {
    // item 670
    array.splice(index, 1)
}

function removeNode(widget, item) {
    var kids
    // item 4013
    kids = copyArray(item.kids)
    // item 32380001
    var _ind3238 = 0;
    var _col3238 = kids;
    var _len3238 = _col3238.length;
    while (true) {
        // item 32380002
        if (_ind3238 < _len3238) {
            
        } else {
            break;
        }
        // item 32380004
        var kid = _col3238[_ind3238];
        // item 3240
        removeNode(widget, kid)
        // item 32380003
        _ind3238++;
    }
    // item 3236
    deleteDiv(item.div)
    // item 3237
    widget.items.remove(
        "items",
        item.id
    )
}

function resetTreeData(widget) {
    // item 4021
    widget.items = new TabGen4()
    // item 4019
    widget.items.createTable("items")
    // item 4020
    widget.items.createLink(
        "items",
        "parent",
        "items",
        "kids",
        "list"
    )
}

function resizeSplitter() {
    var MIN_MIDDLE, box, centralWidth, height, left, leftThick, middle, overShift, overThick, px, py, right, rightThick, thickness, width, x1
    // item 3771
    setWidgetDiv(this)
    // item 3769
    overShift = this.overShift
    // item 3766
    box = this.rect
    // item 3768
    py = 0
    px = 0
    width = box.width
    height = box.height
    // item 3698
    thickness = this.splitterWidth
    overThick = this.overlayWidth
    left = this.left
    right = this.right
    centralWidth = width - left - right -
      2 * thickness
    // item 3744
    leftThick = thickness
    rightThick = thickness
    // item 3736
    if (this.leftVisible) {
        
    } else {
        // item 3740
        left = 0
        leftThick = 0
    }
    // item 3738
    if (this.rightVisible) {
        
    } else {
        // item 3741
        right = 0
        rightThick = 0
    }
    // item 3745
    middle = width - right - left -
     leftThick/2 - rightThick/2
    // item 3749
    MIN_MIDDLE = 10
    // item 3746
    if (middle >= MIN_MIDDLE) {
        
    } else {
        // item 3759
        if (right == 0) {
            // item 3763
            if (left == 0) {
                // item 3765
                middle = MIN_MIDDLE
            } else {
                // item 3755
                left = width - right - MIN_MIDDLE -
                  leftThick - rightThick
                // item 3756
                if (left >= thickness) {
                    // item 3754
                    middle = width - right - left -
                      leftThick/2 - rightThick/2
                    // item 3770
                    this.left = left
                    this.right = right
                } else {
                    // item 3758
                    left = thickness
                    middle = MIN_MIDDLE
                }
            }
        } else {
            // item 3750
            right = width - left - rightThick - leftThick
            // item 3751
            if (right >= thickness * 1.5) {
                // item 3754
                middle = width - right - left -
                  leftThick/2 - rightThick/2
                // item 3770
                this.left = left
                this.right = right
            } else {
                // item 3762
                right = thickness * 1.5
                // item 3763
                if (left == 0) {
                    // item 3765
                    middle = MIN_MIDDLE
                } else {
                    // item 3755
                    left = width - right - MIN_MIDDLE -
                      leftThick - rightThick
                    // item 3756
                    if (left >= thickness) {
                        // item 3754
                        middle = width - right - left -
                          leftThick/2 - rightThick/2
                        // item 3770
                        this.left = left
                        this.right = right
                    } else {
                        // item 3758
                        left = thickness
                        middle = MIN_MIDDLE
                    }
                }
            }
        }
    }
    // item 3713
    if (left == 0) {
        // item 3716
        hideWidget(this.leftChild.id)
        hideDiv(this.leftSplitter)
        hideDiv(this.leftOverlay)
    } else {
        // item 3715
        showWidget(this.leftChild.id)
        divIBlock(this.leftSplitter)
        divIBlock(this.leftOverlay)
        // item 3697
        resizeWidget(
            this.leftChild.id,
            px,
            py,
            left - thickness / 2,
            height
        )
        // item 3699
        setPos(
            this.leftSplitter,
            px + left - thickness / 2,
            py,
            thickness,
            height
        )
        // item 3718
        setPos(
            this.leftOverlay,
            px + left - overThick / 2 + overShift,
            py,
            overThick,
            height
        )
    }
    // item 3767
    x1 = px + width
    // item 3722
    if (right == 0) {
        // item 3725
        hideWidget(this.rightChild.id)
        hideDiv(this.rightSplitter)
        hideDiv(this.rightOverlay)
    } else {
        // item 3724
        showWidget(this.rightChild.id)
        divIBlock(this.rightSplitter)
        divIBlock(this.rightOverlay)
        // item 3726
        resizeWidget(
            this.rightChild.id,
            x1 - right + thickness / 2,
            py,
            right - thickness / 2,
            height
        )
        // item 3727
        setPos(
            this.rightSplitter,
            x1 - right - thickness / 2,
            py,
            thickness,
            height
        )
        // item 3728
        setPos(
            this.rightOverlay,
            x1 - right - overThick / 2 + overShift,
            py,
            overThick,
            height
        )
    }
    // item 3733
    resizeWidget(
        this.middleChild.id,
        px + left + leftThick / 2,
        py,
        middle,
        height
    )
}

function resizeWidget(id, left, top, width, height) {
    var widget
    // item 2308
    widget = getWidget(id)
    // item 2309
    setRect(
        widget,
        left,
        top,
        width,
        height
    )
}

function scheduleEvent(evt, type, widgetId, rowId, cellId) {
    var action
    // item 2960
    action = function() {
        fireEvent(
            evt,
            type,
            widgetId,
            rowId,
            cellId,
            false
        )
    }
    // item 2961
    window.setTimeout(action, 10)
}

function setCheckboxImage(widget) {
    var image, style, url
    // item 3376
    style = get(widget.id).style
    // item 3373
    if (widget.isChecked) {
        // item 3377
        image = "checked.png"
    } else {
        // item 3378
        image = "unchecked.png"
    }
    // item 3372
    url = makeImagePathUrl(image)
    // item 3371
    style.backgroundImage = url
}

function setHeight(div, height) {
    var bottomBorder, bottomPadding, height2, style, topBorder, topPadding
    // item 50
    style = div.style
    topPadding = stripPx(style.paddingTop)
    bottomPadding = stripPx(style.paddingBottom)
    topBorder = stripPx(style.borderTopWidth)
    bottomBorder = stripPx(style.borderBottomWidth)
    // item 51
    height2 = height - topPadding - bottomPadding -
      topBorder - bottomBorder
    // item 52
    style.height = height2 + "px"
}

function setListRowFormat(row) {
    var style
    // item 2717
    row.className = "list_item"
    // item 2716
    style = row.style
    // item 2718
    //style.whiteSpace = "nowrap"
    // item 2719
    //style.height = "18px"
    style.padding = "6px"
    style.borderBottom = "solid 1px silver"
    style.lineHeight = "120%"
}

function setPos(div, left, top, width, height) {
    var style
    // item 34
    style = div.style
    // item 35
    style.display = "inline-block"
    style.position = "absolute"
    style.left = left + "px"
    style.top = top + "px"
    // item 36
    setWidth(div, width)
    setHeight(div, height)
}

function setRect(widget, left, top, width, height) {
    // item 403
    widget.rect = {
        left : left,
        top : top,
        width : width,
        height : height
    }
    // item 404
    widget.setRect()
}

function setSearchIcon(widget) {
    var img, value
    // item 3462
    img = widget.button
    value = widget.input.value
    value = value.trim()
    // item 3463
    if (value) {
        // item 3465
        img.src = makeImagePath("backspace.png")
        // item 3467
        img.style.cursor = "pointer"
    } else {
        // item 3466
        img.src = makeImagePath("search-s.png")
        // item 3468
        img.style.cursor = "default"
    }
}

function setWidgetDiv(widget) {
    var div, height, left, rect, top, width
    // item 2279
    rect = widget.rect
    left = rect.left
    top = rect.top
    width = rect.width
    height = rect.height
    // item 2277
    div = get(widget.id)
    // item 2278
    setPos(
        div,
        left,
        top,
        width,
        height
    )
}

function setWidth(div, width) {
    var leftBorder, leftPadding, rightBorder, rightPadding, style, width2
    // item 42
    style = div.style
    leftPadding = stripPx(style.paddingLeft)
    rightPadding = stripPx(style.paddingRight)
    leftBorder = stripPx(style.borderLeftWidth)
    rightBorder = stripPx(style.borderRightWidth)
    // item 43
    width2 = width - leftPadding -
      rightPadding - leftBorder - 
      rightBorder
    // item 44
    style.width = width2 + "px"
}

function showWidget(id) {
    var div
    // item 2257
    div = get(id)
    // item 2258
    div.style.display = "inline-block"
}

function startResizeSplitter(widget, evt, isLeft) {
    var box, div, local, old
    // item 3640
    div = get(widget.id)
    // item 3639
    local = getLocalCoords(div, evt)
    // item 3627
    widget.isLeft = isLeft
    widget.dragging = true
    // item 3634
    divIBlock(widget.dummy)
    // item 3631
    box = widget.rect
    // item 3628
    if (isLeft) {
        // item 3632
        old = widget.left
        // item 3637
        makeFullScreen(widget.leftOverlay)
        hideDiv(widget.rightOverlay)
    } else {
        // item 3633
        old = box.width - widget.right
        // item 3638
        makeFullScreen(widget.rightOverlay)
        hideDiv(widget.leftOverlay)
    }
    // item 3635
    widget.current = old
    widget.shift = old - local.x
    // item 3636
    positionSplitterDummy(widget)
}

function stripPx(value) {
    var noPx
    // item 60
    if ((value) && (!(value == "initial"))) {
        // item 65
        if (value == "medium") {
            // item 67
            return 1
        } else {
            // item 58
            noPx = value.substring(0, value.length - 2)
            // item 59
            value = parseFloat(noPx)
            // item 68
            if (isNaN(value)) {
                // item 70
                return 0
            } else {
                // item 71
                return value
            }
        }
    } else {
        // item 63
        return 0
    }
}

function tree_clear() {
    var div
    // item 3000
    div = this.div()
    // item 3001
    div.innerHTML = ""
    // item 4022
    resetTreeData(this)
}

function tree_collapse(itemId) {
    var item
    // item 3126
    item = getTreeItem(this, itemId)
    // item 4121
    if (item.expanded) {
        // item 3125
        item.plusDiv.src = makeImagePath(
            "plus-collapse.png"
        )
        // item 3124
        item.expanded = false
        // item 3128
        clearDiv(item.kidsDiv)
    }
}

function tree_deselect() {
    var items
    // item 4023
    items = getTreeItems(this)
    // item 31010001
    var _ind3101 = 0;
    var _col3101 = items;
    var _keys3101 = Object.keys(_col3101); 
    var _len3101 = _keys3101.length;
    while (true) {
        // item 31010002
        if (_ind3101 < _len3101) {
            
        } else {
            break;
        }
        // item 31010004
        var currentId = _keys3101[_ind3101]; var item = _col3101[currentId];
        // item 3103
        if (item.myDiv) {
            // item 3107
            item.myDiv.style.background = ""
            item.myDiv.style.color = ""
            // item 3106
            item.myDiv.className = "list_item"
        }
        // item 31010003
        _ind3101++;
    }
}

function tree_expand(itemId) {
    var item
    // item 3113
    item = getTreeItem(this, itemId)
    // item 4118
    if (item.expanded) {
        
    } else {
        // item 3112
        item.plusDiv.src = makeImagePath(
            "plus-expand.png"
        )
        // item 3111
        item.expanded = true
        // item 31160001
        var _ind3116 = 0;
        var _col3116 = item.kids;
        var _len3116 = _col3116.length;
        while (true) {
            // item 31160002
            if (_ind3116 < _len3116) {
                
            } else {
                break;
            }
            // item 31160004
            var kid = _col3116[_ind3116];
            // item 3118
            createTreeNode(
            	this,
            	item.kidsDiv,
            	kid
            )
            // item 31160003
            _ind3116++;
        }
    }
}

function tree_getItem(id) {
    // item 4101
    return getTreeItem(this, id)
}

function tree_getParent(id) {
    var item
    // item 3168
    item = getTreeItem(this, id)
    return item.parent.id
}

function tree_hasItem(id) {
    var items
    // item 4031
    items = getTreeItems(this)
    // item 3879
    if (id in items) {
        // item 3882
        return true
    } else {
        // item 3883
        return false
    }
}

function tree_mark(id) {
    var items
    // item 4032
    items = getTreeItems(this)
    // item 31540001
    var _ind3154 = 0;
    var _col3154 = items;
    var _keys3154 = Object.keys(_col3154); 
    var _len3154 = _keys3154.length;
    while (true) {
        // item 31540002
        if (_ind3154 < _len3154) {
            
        } else {
            break;
        }
        // item 31540004
        var currentId = _keys3154[_ind3154]; var item = _col3154[currentId];
        // item 3156
        if (item.myDiv) {
            // item 3159
            if (currentId == id) {
                // item 3161
                item.myDiv.className = "list_item_marked"
            } else {
                // item 3162
                item.myDiv.className = "list_item"
            }
        }
        // item 31540003
        _ind3154++;
    }
}

function tree_remove(id) {
    var item
    // item 4092
    item = this.items.getRowOrNull(
        "items",
        id
    )
    // item 4093
    if (item) {
        // item 3137
        removeNode(this, item)
    }
}

function tree_removeChildren(id) {
    var kids, parent
    // item 3072
    id = id || this.root
    // item 3067
    parent = getTreeItem(this, id)
    // item 4117
    clearDiv(parent.kidsDiv)
    // item 4033
    kids = copyArray(parent.kids)
    // item 30680001
    var _ind3068 = 0;
    var _col3068 = kids;
    var _len3068 = _col3068.length;
    while (true) {
        // item 30680002
        if (_ind3068 < _len3068) {
            
        } else {
            break;
        }
        // item 30680004
        var kid = _col3068[_ind3068];
        // item 3070
        removeNode(this, kid)
        // item 30680003
        _ind3068++;
    }
}

function tree_rename(id, name) {
    var item
    // item 3143
    item = getTreeItem(this, id)
    // item 3144
    item.text = name
    // item 3145
    if (item.textDiv) {
        // item 3148
        HtmlUtils.setDivText(item.textDiv, name)
    }
}

function tree_scrollIntoView(id) {
    var div, item, parent
    // item 3889
    item = getTreeItem(this, id)
    div = item.div
    // item 3892
    parent = get(this.id)
    // item 3891
    HtmlUtils.scrollIntoViewCore(
        parent,
        div
    )
}

function tree_select(id) {
    var items
    // item 3097
    this.deselect()
    // item 4034
    items = getTreeItems(this)
    // item 30890001
    var _ind3089 = 0;
    var _col3089 = items;
    var _keys3089 = Object.keys(_col3089); 
    var _len3089 = _keys3089.length;
    while (true) {
        // item 30890002
        if (_ind3089 < _len3089) {
            
        } else {
            break;
        }
        // item 30890004
        var currentId = _keys3089[_ind3089]; var item = _col3089[currentId];
        // item 3091
        if ((item.myDiv) && (currentId == id)) {
            // item 3096
            item.myDiv.style.background = DarkBackground
            item.myDiv.style.color = "white"
        }
        // item 30890003
        _ind3089++;
    }
}

function tree_setChildren(parentId, kids) {
    var parent
    // item 3219
    parentId = parentId || this.root
    // item 3192
    parent = getTreeItem(this, parentId)
    // item 3197
    this.removeChildren(parentId)
    // item 31930001
    var _ind3193 = 0;
    var _col3193 = kids;
    var _len3193 = _col3193.length;
    while (true) {
        // item 31930002
        if (_ind3193 < _len3193) {
            
        } else {
            break;
        }
        // item 31930004
        var kidInfo = _col3193[_ind3193];
        // item 3198
        createTreeNodeItem(
            this,
            parentId,
            kidInfo.id,
            kidInfo.isFolder || false,
            kidInfo.icon,
            kidInfo.text,
            kidInfo.rank
        )
        // item 31930003
        _ind3193++;
    }
    // item 3195
    kids = parent.kids
    // item 3201
    kids.sort(compareTreeItems)
    // item 32080001
    var _ind3208 = 0;
    var _col3208 = kids;
    var _len3208 = _col3208.length;
    while (true) {
        // item 32080002
        if (_ind3208 < _len3208) {
            
        } else {
            break;
        }
        // item 32080004
        var kid = _col3208[_ind3208];
        // item 3215
        if (parent.expanded) {
            // item 3210
            createTreeNode(
                this,
                parent.kidsDiv,
                kid
            )
        }
        // item 32080003
        _ind3208++;
    }
}

function tree_setIcon(id, image) {
    var item
    // item 3057
    item = getTreeItem(this, id)
    // item 3058
    if (item.iconDiv) {
        // item 3061
        item.iconDiv.src = makeImagePath(image)
    }
}

function tree_setText(id, text) {
    var div, item, items
    // item 4035
    items = getTreeItems(this)
    // item 3081
    if (id in items) {
        // item 4036
        item = items[id]
        // item 3079
        div = item.textDiv
        // item 3080
        HtmlUtils.setDivText(div, text)
    }
}

function uncheckItem(widget, i) {
    var cell, cellId, id, image, img, item, rowId
    // item 2918
    item = widget.items[i]
    id = item.id
    cell = item.cells[0]
    image = cell.src
    // item 2920
    rowId = makeItemId(widget.id, id)
    cellId = makeCellId(rowId, "0")
    // item 2916
    img = get(cellId)
    // item 2917
    img.src = makeImagePath(image)
    // item 2919
    item.checked = false
}

function wrapTouch(action) {
    var mevt
    // item 2031
    return function(evt, widget) {
    	mevt = HtmlUtils.touchToMouse(evt)
    	evt.preventDefault()
    	action(mevt, widget)
    }
}


this.wrapException = defaultWrap
this.onEvent = function() {}
this.getToolTip = function() { return gToolTip }

init()

this.createWidget = createWidget
this.getWidget = getWidget
this.resizeWidget = resizeWidget
this.deleteWidget = deleteWidget
this.foreach = foreach

}
