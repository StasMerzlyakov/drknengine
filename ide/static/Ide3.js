"use strict";

function Ide3(window, document, translate, gUserId, pagePanic) {

var self = this

var globs = null

var ResizeTimeout = 300
var PollInterval = 1
var MaxSaveItems = 10

var LineHeight = 34
var TitleHeight = 30

var TopPanelHeight = 52
var DockHeaderColor = "#E2EDF5"
var DarkBackground = "#455A64"
var BorderRadius = "4px"
var ImagePath = "images/"

var SearchHeight = 30

var logonCtrl = new Logon(window, document, translate)


// Autogenerated with DRAKON Editor 1.32


function Clipboard() {
    // item 1328
    this.getClipboardType = getClipboardType
    this.copyToClipboard = copyToClipboard
    this.getClipboard = getClipboard
    this.clear = clearClipboard
}

function Storage() {
    // item 1385
    var saveChanges = function(changes) {
    	self.logic.saveChanges(changes)
    }
    // item 877
    this.saveChanges = wrapException(
    	saveChanges,
    	"saveChanges"
    )
}

function addAdmin() {
    // item 1835
    onAddUserClicked("admin")
}

function addCentral(node, centralMachine) {
    // item 2811
    createCentralCore(
    	node,
    	centralMachine
    )
}

function addClickable(popup, text, action, style) {
    // item 3335
    var row = make(popup, "div")
    
    row.style.padding = "10px"
    row.style.background = DarkBackground
    row.style.color = "white"
    // item 4368
    row.style.textAlign = "center"
    row.style.borderRadius = "4px"
    row.style.margin = "5px"
    // item 4209
    if (style) {
        // item 4212
        Utils.mergeSets(row.style, style)
    }
    // item 3337
    row.className = "list_item"
    // item 3336
    HtmlUtils.setDivText(
    	row,
    	text
    )
    // item 3338
    row.onclick = wrapException(
    	action,
    	"searchGroup"
    )
}

function addEmpty(text) {
    // item 4219
    var popup = globs.search.popup
    // item 3240
    var row = make(popup, "div")
    
    row.style.padding = "5px"
    row.style.background = DarkBackground
    row.style.color = "white"
    // item 3241
    HtmlUtils.setDivText(
    	row,
    	text
    )
    // item 4251
    globs.search.empty = row
}

function addExpandedGroup(items) {
    var _sw33580000_ = 0;
    // item 3355
    var list = getOrCreateExpanded()
    // item 33470001
    var _ind3347 = 0;
    var _col3347 = items;
    var _len3347 = _col3347.length;
    while (true) {
        // item 33470002
        if (_ind3347 < _len3347) {
            
        } else {
            break;
        }
        // item 33470004
        var item = _col3347[_ind3347];
        // item 33580000
        _sw33580000_ = item.type;
        // item 33580001
        if (_sw33580000_ === "folder") {
            // item 3353
            addSearchFolder(
            	list,
            	item
            )
        } else {
            // item 33580002
            if (_sw33580000_ === "item") {
                // item 3482
                addSearchItem(
                	list,
                	item
                )
            }
        }
        // item 33470003
        _ind3347++;
    }
}

function addFoundGroup(group, completed, items) {
    var _sw32810000_ = 0;
    // item 3259
    var MaxItems = 8
    // item 3256
    if (items.length == 0) {
        
    } else {
        // item 4237
        var gl = getOrCreateGroupList(group)
        // item 32600001
        var _ind3260 = 0;
        var _col3260 = items;
        var _len3260 = _col3260.length;
        while (true) {
            // item 32600002
            if (_ind3260 < _len3260) {
                
            } else {
                break;
            }
            // item 32600004
            var item = _col3260[_ind3260];
            // item 3262
            if (gl.count < MaxItems) {
                
            } else {
                break;
            }
            // item 3265
            gl.count++
            // item 32810000
            _sw32810000_ = item.type;
            // item 32810001
            if (_sw32810000_ === "folder") {
                // item 3266
                addSearchFolder(
                	gl.div,
                	item
                )
            } else {
                // item 32810002
                if (_sw32810000_ === "item") {
                    // item 3445
                    addSearchItem(
                    	gl.div,
                    	item
                    )
                }
            }
            // item 32600003
            _ind3260++;
        }
    }
}

function addIconText(list, image, text) {
    // item 2027
    var row = {
    	id: text,
    	cells: [
    		{src:image, width:36, height:36},
    		{text: text}
    	]
    }
    // item 2028
    list.push(row)
}

function addMainMenuItems(parent, items, color) {
    // item 3743
    var first = true
    // item 2400
    var makeCallback = function(action) {
    	var onClick = function() {
    		hidePopup()
    		action()
    	}
    	return wrapException(onClick, "main menu")
    }
    // item 23960001
    var _ind2396 = 0;
    var _col2396 = items;
    var _len2396 = _col2396.length;
    while (true) {
        // item 23960002
        if (_ind2396 < _len2396) {
            
        } else {
            break;
        }
        // item 23960004
        var item = _col2396[_ind2396];
        // item 2398
        var row = make(parent, "div")
        row.style.padding = "3px"
        row.style.paddingBottom = "10px"
        row.style.minWidth = "100px"
        row.className = "list_item"
        // item 3738
        if (first) {
            // item 3741
            first = false
        } else {
            // item 3742
            row.style.borderTop = "solid 1px silver"
        }
        // item 2413
        var tpart
        // item 2410
        if (item.link) {
            // item 2415
            tpart = make(row, "a")
            // item 3737
            tpart.className = "white_link"
            // item 2416
            tpart.href = item.link
        } else {
            // item 2414
            tpart = make(row, "div")
            // item 2401
            row.onclick = makeCallback(item.action)
        }
        // item 2399
        tpart.style.display = "inline-block"
        tpart.style.marginTop = "8px"
        HtmlUtils.setDivText(tpart, translate(item.text))
        // item 23960003
        _ind2396++;
    }
}

function addMenuSection(parent, menu) {
    // item 2407
    var colHead = make(parent, "div")
    colHead.style.textAlign = "center"
    colHead.style.fontWeight = "bold"
    colHead.style.fontSize = "110%"
    colHead.style.padding = "5px"
    colHead.style.color = DarkBackground
    colHead.style.borderBottom = "solid 3px " + menu.color
    HtmlUtils.setDivText(colHead, translate(menu.title))
    // item 2408
    var colBody = make(parent, "div")
    // item 2409
    addMainMenuItems(colBody, menu.items, menu.color)
}

function addPopupItem(div, item) {
    // item 1665
    if (item.type == "separator") {
        // item 1668
        var hr = make(div, "hr")
        hr.style.margin = "0px"
    } else {
        // item 1662
        var callback = function(evt) {
        	hidePopup()
        	item.code(evt)
        }
        // item 1663
        var row = make(div, "div")
        row.className = "list_item"
        row.style.height = LineHeight + "px"
        // item 1670
        var textPart = makeIB(row)
        textPart.style.padding = "8px"
        // item 1669
        HtmlUtils.setDivText(
        	textPart,
        	translate(item.text)
        )
        // item 1671
        var itemId = item.id || ""
        // item 1664
        row.onclick = callback
    }
}

function addProjectRow(table, project) {
    // item 3886
    var id = project + " 1"
    // item 3887
    var action = function() {
    	self.logic.goToFolder(id)
    }
    // item 3888
    var td = createIconListRow(
    	table,
    	"workspace-s2.png",
    	action
    )
    // item 3906
    td.style.padding = "5px"
    td.style.overflowWrap = "break-word"
    // item 3889
    HtmlUtils.setDivText(td, project)
}

function addReader() {
    // item 2682
    onAddUserClicked("read")
}

function addRecentRow(table, item) {
    // item 3919
    var action = function() {
    	self.logic.goToFolder(item.id)
    }
    // item 3920
    var td = createIconListRow(
    	table,
    	item.icon,
    	action
    )
    // item 3922
    td.style.padding = "5px"
    // item 3921
    HtmlUtils.setDivText(td, item.text)
}

function addSearchFolder(popup, item) {
    // item 3298
    var size = 30
    // item 3295
    var path = makeImagePath(item.image)
    // item 3294
    var table = make(popup, "table")
    var tr = make(table, "tr")
    var left = make(tr, "td")
    var right = make(tr, "td")
    // item 3302
    table.className = "list_item"
    table.style.borderBottom = 
     "solid 1px silver"
    // item 3296
    left.style.verticalAlign = "middle"
    left.style.width = size + "px"
    right.style.verticalAlign = "middle"
    right.style.width = "100%"
    // item 3297
    var img = make(left, "img")
    img.width = size
    img.height = size
    img.src = path
    // item 3303
    right.style.padding = "2px"
    // item 3311
    table.onclick = makeSearchCallback(item)
    // item 3315
    if (item.path) {
        // item 3299
        var pathDiv = make(right, "div")
        // item 3300
        HtmlUtils.setDivText(pathDiv, item.path)
        // item 3301
        pathDiv.style.color = DarkBackground
    }
    // item 3318
    var nameDiv = make(right, "div")
    // item 3319
    HtmlUtils.setDivText(nameDiv, item.name)
    // item 3320
    nameDiv.style.fontWeight = "normal"
}

function addSearchItem(popup, item) {
    // item 3451
    var row = make(popup, "div")
    // item 3459
    row.className = "list_item"
    row.style.borderBottom = 
     "solid 1px silver"
    row.style.padding = "2px"
    // item 3461
    row.onclick = makeSearchCallback(item)
    // item 3462
    if (item.path) {
        // item 3456
        var pathDiv = make(row, "div")
        // item 3457
        HtmlUtils.setDivText(pathDiv, item.path)
        // item 3458
        pathDiv.style.color = DarkBackground
    }
    // item 3465
    var nameDiv = make(row, "div")
    // item 3466
    HtmlUtils.setDivText(nameDiv, item.name)
    // item 3467
    nameDiv.style.fontWeight = "normal"
    // item 3468
    var contentDiv = make(row, "div")
    // item 3469
    var found = item.found
    var before = found.line.substring(
    	0,
    	found.start
    )
    var selected = found.line.substring(
    	found.start,
    	found.start + found.length
    )
    var after = found.line.substring(
    	found.start + found.length
    )
    // item 3470
    var beforeNode = makeSpan(contentDiv, before)
    beforeNode.style.color = DarkBackground
    // item 3481
    var selectedNode = makeSpan(contentDiv, selected)
    selectedNode.style.fondWeight = "bold"
    selectedNode.style.background = "coral"
    // item 3480
    var afterNode = makeSpan(contentDiv, after)
    afterNode.style.color = DarkBackground
}

function addStyle(content) {
    // item 1322
    var tn = document.createTextNode(content)
    // item 1323
    var style = make(document.head, "style")
    // item 1324
    style.appendChild(tn)
}

function addToSearchList(found) {
    // item 3195
    var defs = globs.search.defs
    var changed = false
    // item 3275
    if (defs) {
        // item 3483
        if (found.completed) {
            // item 3486
            defs.completed = true
        }
        // item 31930001
        var _ind3193 = 0;
        var _col3193 = defs;
        var _len3193 = _col3193.length;
        while (true) {
            // item 31930002
            if (_ind3193 < _len3193) {
                
            } else {
                break;
            }
            // item 31930004
            var group = _col3193[_ind3193];
            // item 3199
            var items = found[group.id]
            // item 3196
            if (items) {
                // item 3200
                Utils.addRange(items, group.items)
            }
            // item 31930003
            _ind3193++;
        }
        // item 3206
        if (globs.search.expanded) {
            // item 4338
            var items = found[globs.search.expanded]
            // item 4339
            if (items) {
                // item 3215
                addExpandedGroup(
                	items
                )
            }
        } else {
            // item 35050001
            var _ind3505 = 0;
            var _col3505 = defs;
            var _len3505 = _col3505.length;
            while (true) {
                // item 35050002
                if (_ind3505 < _len3505) {
                    
                } else {
                    break;
                }
                // item 35050004
                var group = _col3505[_ind3505];
                // item 4281
                var items = found[group.id]
                // item 4307
                if ((items) && (items.length > 0)) {
                    // item 3508
                    addFoundGroup(
                    	group,
                    	defs.completed,
                    	items
                    )
                    // item 4303
                    changed = true
                }
                // item 35050003
                _ind3505++;
            }
            // item 4336
            var total = getTotalFound()
            // item 3534
            if (defs.completed) {
                // item 4335
                removeEmpty()
                // item 4308
                if (total == 0) {
                    // item 3538
                    addEmpty(
                    	translate("MES_NOTHING_FOUND")
                    )
                }
            } else {
                // item 4332
                if (changed) {
                    // item 4337
                    removeEmpty()
                }
            }
        }
    }
}

function addWriter() {
    // item 2683
    onAddUserClicked("write")
}

function applyDashStyle(div) {
    // item 3832
    var style = div.style
    // item 3866
    style.padding = "5px"
}

function bindAddItem(shortcut, type) {
    // item 2540
    var action = function() {
    	getEditor().showSockets(type)
    }
    // item 2541
    bindEditor(shortcut, action)
}

function bindEditor(shortcuts, method) {
    // item 2527
    var callback = function(evt) {
    	runIfEditorVisible(evt, method)
    }
    // item 2526
    bindKey(shortcuts, callback, "keydown")
}

function bindKey(shortcuts, action, aux) {
    // item 2534
    var wrapped = wrapException(action, shortcuts[0])
    // item 2533
    Mousetrap.bind(shortcuts, wrapped, aux)
}

function buildDashboardWidget(div, node, widget) {
    // item 3779
    div.style.overflow = "auto"
    div.style.background = "white"
    // item 3790
    widget.setDashboardRecent = setDashboardRecent
    widget.setDashboardProjects = setDashboardProjects
    // item 3796
    var myPane, recentPane, projectsPane, docs
    // item 3873
    var bStyle =
     "solid 1px " + DarkBackground
    // item 3791
    if (globs.wide) {
        // item 3795
        var table = make(div, "table")
        var row = make(table, "tr")
        table.style.width = "1100px"
        table.style.maxWidth = "1100px"
        // item 3797
        var myTd = make(row, "td")
        myTd.style.width = "300px"
        myTd.style.verticalAlign = "top"
        // item 3798
        recentPane = make(row, "td")
        recentPane.style.width = "400px"
        recentPane.style.maxWidth = "400px"
        recentPane.style.verticalAlign = "top"
        // item 3799
        projectsPane = make(row, "td")
        projectsPane.style.width = "400px"
        projectsPane.style.maxWidth = "400px"
        projectsPane.style.verticalAlign = "top"
        // item 3937
        myPane = make(myTd, "div")
        docs = make(myTd, "div")
    } else {
        // item 3801
        myPane = make(div, "div")
        docs = make(div, "div")
        recentPane = make(div, "div")
        projectsPane = make(div, "div")
        // item 3872
        myPane.style.borderTop = bStyle
        recentPane.style.borderTop = bStyle
        projectsPane.style.borderTop = bStyle
    }
    // item 3935
    myPane.style.padding = "20px"
    myPane.style.paddingTop = "10px"
    docs.style.padding = "20px"
    // item 3810
    createButton(
    	myPane,
    	"MES_MY_PROJECT",
    	goToMyProject,
    	"coral"
    )
    // item 3923
    createButton(
    	myPane,
    	"MES_SPACES",
    	goToSpaces,
    	DarkBackground
    )
    // item 4373
    if (onPremises) {
        
    } else {
        // item 3928
        createButton(
        	myPane,
        	"MES_BUY_SUBSCRIPTION",
        	goToPrices,
        	DarkBackground
        )
    }
    // item 3811
    createLink(
    	myPane,
    	"MES_ACCOUNT",
    	"/account"
    )
    // item 3813
    createLink(
    	myPane,
    	"MES_HOMEPAGE",
    	"/"
    )
    // item 4376
    var host = "https://drakonhub.com"
    // item 3875
    docs.style.borderTop = bStyle
    // item 3945
    createLink(
    	docs,
    	"MES_DOCUMENTATION",
    	host + "/read/docs"
    )
    // item 3940
    createLink(
    	docs,
    	"title-drakon",
    	host + "/drakon"
    )
    // item 4004
    createLink(
    	docs,
    	"title-guidelines",
    	host + "/read/guidelines-for-drawing-drakon"
    )
    // item 3942
    createLink(
    	docs,
    	"title-drakon-reference",
    	host + "/drakon-reference"
    )
    // item 3941
    createLink(
    	docs,
    	"title-video-how-to-flowchart",
    	host + "/video-how-to-flowchart"
    )
    // item 3943
    createLink(
    	docs,
    	"title-video-how-to-mind-map",
    	host + "/video-how-to-mind-map"
    )
    // item 3822
    applyDashStyle(recentPane)
    // item 3821
    createHeader(
    	recentPane,
    	"MES_RECENT"
    )
    // item 3825
    widget.recent = make(
    	recentPane,
    	"div"
    )
    // item 3824
    applyDashStyle(projectsPane)
    // item 3823
    createHeader(
    	projectsPane,
    	"MES_SPACES"
    )
    // item 3826
    widget.projects = make(
    	projectsPane,
    	"div"
    )
}

function buildImageWidget(parent, node, widget) {
    // item 4105
    var img = make(parent, "img")
    // item 4201
    widget.customWidth = node.width
    // item 4107
    img.width = node.width
    img.height = node.height
    img.id = node.id + "_img"
    // item 4189
    img.style.border = "solid 2px " + DarkBackground
}

function buildLogonGui() {
    // item 2849
    var titleStyle = {
    	fontSize: "150%",
    	fontWeight: "bold",
    	textAlign: "center",
    	color: "#990000"
    }
    // item 2848
    var title = {
    	type: "wlabel",
    	text: "MES_LOGIN",
    	style: titleStyle
    }
    // item 2842
    var username = {
    	type: "edit",
    	editType: "text",
    	water: translate("MES_USERNAME"),
    	id: "username"
    }
    // item 2843
    var password = {
    	type: "edit",
    	editType: "password",
    	water: translate("MES_PASSWORD"),
    	id: "password"
    }
    // item 2846
    var forgot = {
    	type: "custom",
    	builder: makeRecoverLink
    }
    // item 2847
    var status = {
    	type: "wlabel",
    	id: "status",
    	text: " "
    }
    // item 2844
    var ok = {
    	signalId: "startLogon",
    	type: "wbutton",
    	text: "MES_LOGIN",
    	style:{background: "Coral", color: "white"}
    }
    // item 2903
    var cancel = {
    	signalId: "cancelMachine",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 2845
    return {
    	type: "page",
    	padding: 10,
    	style: {background: "white"},
    	kids: [title, username, password, 
    		forgot, status, ok, cancel]
    }
}

function buildNormalCheckbox(parent, node) {
    // item 1806
    var label = make(parent, "label")
    var text = translate(node.text)
    var value = node.value ? true : false
    // item 1805
    var checkbox = make(label, "input")
    checkbox.type = "checkbox"
    checkbox.name = "checkbox"
    checkbox.id = node.id + "_check"
    checkbox.style.marginRight = "10px"
    checkbox.checked = value
    // item 1807
    var tnode = document.createTextNode(text)
    label.appendChild(tnode)
    // item 1808
    if (node.onchange) {
        // item 1811
        checkbox.onchange = wrapException(
        	node.onchange, 
        	"normalCheckbox"
        )
    }
}

function buildSignupGui() {
    // item 2940
    var titleStyle = {
    	fontSize: "150%",
    	fontWeight: "bold",
    	textAlign: "center",
    	color: "#990000"
    }
    // item 2939
    var title = {
    	type: "wlabel",
    	text: "MES_SIGNUP",
    	style: titleStyle
    }
    // item 2944
    var chars = {
    	type: "wlabel",
    	text: "MES_CHARACTERS"
    }
    // item 4005
    var chars2 = {
    	type: "wlabel",
    	text: "MES_CHARACTERS2"
    }
    // item 4009
    var shifted = {
    	transform: "translateY(5px)"
    }
    // item 4007
    var userLab = {
    	type: "wlabel",
    	text: "MES_CREATE_USERNAME",
    	style: shifted
    }
    // item 4008
    var emailLab = {
    	type: "wlabel",
    	text: "MES_EMAIL",
    	style: shifted
    }
    // item 4006
    var chars3 = {
    	type: "wlabel",
    	text: "MES_CHARACTERS3",
    	style: {color:"grey", fontSize:"90%",
    	marginTop:"-6px"}
    }
    // item 2933
    var username = {
    	type: "edit",
    	editType: "text",
    	id: "signup_user"
    }
    // item 2941
    var email = {
    	type: "edit",
    	editType: "text",
    	id: "signup_email"
    }
    // item 2934
    var password = {
    	type: "edit",
    	editType: "password",
    	water: translate("MES_PASSWORD"),
    	id: "signup_password"
    }
    // item 2942
    var password2 = {
    	type: "edit",
    	editType: "password",
    	water: translate("MES_REPEAT_PASSWORD"),
    	id: "signup_password2"
    }
    // item 2938
    var status = {
    	type: "wlabel",
    	id: "signup_status",
    	text: " "
    }
    // item 2937
    var accept = {
    	type: "custom",
    	builder: makeAccept
    }
    // item 2935
    var ok = {
    	signalId: "startSignup",
    	id: "signupOk",
    	type: "wbutton",
    	text: "MES_CREATE_FREE",
    	className: "disabled_button"
    }
    // item 3007
    var cancel = {
    	signalId: "cancelMachine",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 3749
    var kids
    // item 3750
    if (Config.EMAIL_SIGNUP) {
        // item 3753
        kids = [title,
        	userLab, username, 
        	chars3, emailLab, email, status]
    } else {
        // item 2943
        kids = [title,
        	userLab, username, chars3,
        	emailLab, email,
        	password, password2, status]
    }
    // item 2947
    if (onPremises) {
        
    } else {
        // item 2946
        kids.push(accept)
    }
    // item 2945
    kids.push(ok)
    kids.push(cancel)
    // item 2936
    return {
    	type: "page",
    	padding: 10,
    	style: {background: "white"},
    	kids: kids
    }
}

function buildUrlForFolder(spaceId, folderId) {
    // item 2177
    var host = location.hostname
    // item 2178
    return "https://" + host + "/ide/doc/" + 
      spaceId + "/" + folderId
}

function canDefQueryFrom(item) {
    var _sw36150000_ = 0;
    // item 3610
    if (item.content) {
        // item 36150000
        _sw36150000_ = item.type;
        // item 36150001
        if ((((_sw36150000_ === "beginend") || (_sw36150000_ === "end")) || (_sw36150000_ === "branch")) || (_sw36150000_ === "address")) {
            // item 3627
            return false
        } else {
            // item 3614
            return true
        }
    } else {
        // item 3613
        return false
    }
}

function cancelMachine() {
    // item 2636
    var count = globs.centralMachines.length
    // item 2631
    if (count == 0) {
        // item 2660
        hideCentral()
    } else {
        // item 2635
        var machine = globs.centralMachines[count - 1]
        // item 2634
        machine.cancel()
    }
}

function cancelSearch() {
    // item 3526
    var search = findSearch()
    // item 3522
    if (search) {
        // item 3525
        search.clear()
    }
    // item 3175
    globs.search.defs = null
    // item 3176
    globs.search.widgetId = null
    globs.search.popup = null
    globs.search.groups = {}
    // item 3177
    HtmlUtils.hideSoftPopup()
    HtmlUtils.unfocus()
}

function changeId(node, id) {
    // item 500
    var copy = Utils.copyObject(node)
    // item 501
    copy.id = id
    // item 502
    return copy
}

function clearClipboard() {
    // item 1362
    setLsItem("clipboard type", "");
    setLsItem("clipboard", "");
}

function clearMachines() {
    // item 27760001
    var _ind2776 = 0;
    var _col2776 = globs.centralMachines;
    var _len2776 = _col2776.length;
    while (true) {
        // item 27760002
        if (_ind2776 < _len2776) {
            
        } else {
            break;
        }
        // item 27760004
        var machine = _col2776[_ind2776];
        // item 2775
        machine.state = null
        // item 27760003
        _ind2776++;
    }
    // item 2778
    globs.centralMachines = []
}

function clearTimeout(timerId) {
    // item 2786
    window.clearTimeout(timerId)
}

function confirmExit() {
    // item 3052
    return translate("MES_SURE_EXIT")
}

function copyToClipboard(type, subgraph) {
    // item 1338
    var text = JSON.stringify(subgraph);
    setLsItem("clipboard type", type);
    setLsItem("clipboard", text);
    // item 1339
    scheduleClipboardClear()
}

function createButton(parent, textId, action, color) {
    // item 3838
    var div = make(parent, "div")
    // item 3839
    var text = translate(textId)
    // item 3840
    HtmlUtils.setDivText(div, text)
    // item 3841
    div.onclick = wrapException(
    	action,
    	"buttonClick"
    )
    // item 3870
    div.className = "common_button"
    // item 3871
    div.style.color = "white"
    div.style.background = color
    div.style.marginTop = "10px"
    div.style.marginBottom = "20px"
    div.style.padding = "10px"
    div.style.borderRadius = "8px"
    div.style.textAlign = "center"
}

function createCentral(node, centralMachine) {
    // item 2779
    clearMachines()
    // item 2812
    createCentralCore(
    	node,
    	centralMachine
    )
}

function createCentralBack() {
    // item 1497
    var central = get("central")
    // item 1496
    var back = make(central, "div")
    var style = back.style
    // item 1498
    style.display = "inline-block"
    style.position = "absolute"
    style.zIndex = 25
    // item 1499
    style.left = "0px"
    style.top = "0px"
    style.right = "0px"
    style.bottom = "0px"
    // item 1500
    style.background = "black"
    style.opacity = 0.3
    // item 1501
    back.onclick = wrapException(
    	killCentral,
    	"killCentral"
    )
    // item 1502
    back.oncontextmenu = function() { return false }
}

function createCentralCore(node, centralMachine) {
    // item 3129
    if (globs.central) {
        
    } else {
        // item 3132
        pushTempIfMobile()
    }
    // item 2808
    if (centralMachine) {
        // item 2807
        globs.centralMachines.push(centralMachine)
    }
    // item 2804
    hideCentralCore()
    // item 2799
    createCentralBack()
    // item 2792
    var central = get("central")
    // item 2795
    showDiv(central, "block")
    // item 2798
    var id = globs.widgets.createWidget(
    	central,
    	node
    )
    // item 2796
    var widget = getWidget(id)
    var div = get(id)
    // item 2797
    div.style.background = "white"
    div.style.zIndex = 26
    div.style.overflow = "hidden"
    // item 2793
    globs.central = id
    // item 2794
    resizeCentral()
}

function createEditor() {
    // item 830
    var editor = new EditorCtrl(window, document, "middle_diagram", gUserId)
    // item 835
    var inputBox = {
    	show: function(title, text, onSave, validate, x, y) {
    		showInputBox(
    			false,
    			title,
    			text,
    			onSave,
    			validate,
    			false, x, y
    		)
    	}
    }
    // item 831
    var cfg = {
    	imageBase: ImagePath,
    	translate: translate,
    	tooltip: globs.widgets.getToolTip(),
    	inputBox: inputBox,
    	context: showContextMenu,
    	storage: new Storage(),
    	status: wrapException(saveStatus, "saveStatus"),
    	warning: showNotification,
    	panic: panic,
    	saveUserSettings: wrapException(
    		saveUserSettings,
    		"saveUserSettings"
    	),
    	clipboard: new Clipboard(),
    	loadFont: loadFont,
    	findReferences: findReferences
    }
    // item 832
    editor.init(cfg)
    // item 833
    globs.editor = editor
    // item 834
    getWidget("middle_diagram").setRect = resizeEditor
}

function createFeedbackButton() {
    // item 511
    if ((globs.wide) && (!(globs.tryMe))) {
        // item 507
        var rootDiv = get("wide")
        // item 508
        var button = document.createElement("div")
        HtmlUtils.insertAfter(button, rootDiv)
        button.id = "feedback"
        // item 509
        HtmlUtils.setDivText(
        	button,
        	translate("MES_SEND_FEEDBACK")
        )
        // item 510
        setButtonStyle(
        	button,
        	"black",
        	"coral",
        	"3px"
        )
        // item 515
        button.style.position = "absolute"
        button.style.right = "50px"
        button.style.bottom = "2px"
        button.style.zIndex = 20
        // item 516
        button.onclick = sendFeedback
    }
}

function createHeader(parent, textId) {
    // item 3856
    var div = make(parent, "div")
    // item 3857
    var text = translate(textId)
    // item 3858
    HtmlUtils.setDivText(div, text)
    // item 3867
    div.style.color = DarkBackground
    div.style.marginBottom = "20px"
    // item 3869
    div.style.marginTop = "5px"
}

function createIconListRow(table, icon, action) {
    // item 3895
    var tr = make(table, "tr")
    tr.className = "list_item"
    // item 3896
    var iconTd = make(tr, "td")
    var td = make(tr, "td")
    // item 3899
    var size = 30
    // item 3900
    var path = makeImagePath(icon)
    // item 3898
    var img = make(iconTd, "img")
    img.width = size
    img.height = size
    img.src = path
    // item 3902
    if (action) {
        // item 3905
        tr.onclick = wrapException(
        	action,
        	"listClick"
        )
    }
    // item 3897
    return td
}

function createLink(parent, textId, url) {
    // item 3847
    var div = make(parent, "div")
    var link = make(div, "a")
    // item 3848
    var text = translate(textId)
    // item 3849
    HtmlUtils.setDivText(link, text)
    // item 3850
    link.href = url
    // item 3868
    div.style.marginBottom = "20px"
}

function createPopup() {
    // item 3150
    return HtmlUtils.createPopup(null)
}

function createPopupList(items) {
    // item 1689
    var div = createPopup()
    // item 1690
    div.className = "popup"
    div.style.background = "white"
    // item 16910001
    var _ind1691 = 0;
    var _col1691 = items;
    var _len1691 = _col1691.length;
    while (true) {
        // item 16910002
        if (_ind1691 < _len1691) {
            
        } else {
            break;
        }
        // item 16910004
        var item = _col1691[_ind1691];
        // item 1693
        addPopupItem(div, item)
        // item 16910003
        _ind1691++;
    }
    // item 1694
    return div
}

function createSearchList(defs, found) {
    // item 4274
    globs.search = {}
    // item 3551
    var search = findSearch()
    // item 3172
    globs.search.defs = Utils.copyObjectDeep(
    	defs
    )
    // item 3173
    globs.search.widgetId = search.id
    globs.search.expanded = null
    // item 4217
    createSearchPopup()
    // item 3174
    addToSearchList(found)
}

function createSearchPopup() {
    // item 4311
    var width = 400
    // item 3547
    var popup = HtmlUtils.getSoftPopup()
    // item 3548
    if (popup) {
        // item 4314
        HtmlUtils.hideSoftPopup()
    }
    // item 3544
    var searchWidget = getWidget(
    	globs.search.widgetId
    )
    // item 3546
    var tellLogic = function() {
    	self.logic.resetSearch()
    }
    // item 3542
    popup = HtmlUtils.createSoftPopup(
    	searchWidget.rect,
    	tellLogic
    )
    // item 3543
    popup.style.background = "white"
    popup.style.maxWidth = width + "px"
    popup.style.width = width + "px"
    popup.className = "popup"
    // item 3554
    var top = searchWidget.rect.top +
    	searchWidget.rect.height
    var start = top + 50
    // item 4312
    popup.style.top = top + "px"
    popup.style.right= "0px"
    // item 4216
    var closeStyle = {
    	background:"coral"
    }
    // item 4215
    addClickable(
    	popup,
    	translate("MES_CLOSE"),
    	cancelSearch,
    	closeStyle
    )
    // item 4318
    var popupList = make(popup, "div")
    // item 3555
    popupList.style.maxHeight = 
    	"calc(100vh - " + start + "px)"
    popupList.style.overflowY = "auto"
    // item 4313
    popup.style.display = "inline-block"
    popup.style.position = "fixed"
    // item 4290
    globs.search.popup = popupList
    // item 4291
    addEmpty(
    	translate("MES_SEARCHING")
    )
}

function createState() {
    // item 578
    var state = {
    	tt: new ToolTip(window, document),
    	pop: new Popup(window, document),
    	logon: new Logon(window, document, translate),
    	widgets: new DraWidgets(window, document, translate, 1, ImagePath),
    	loadedFonts: {},
    	clip: {},
    	myHandlers: {},
    	centralMachines: [],
    	search: {},
    	initCompleted: false,
    	demo: {}
    }
    // item 1723
    state.myHandlers.createDrakon = function() {
    	sendToCentralMachine("drakon")
    }
    // item 1724
    state.myHandlers.createFree = function() {
    	sendToCentralMachine("free")
    }
    // item 3591
    state.myHandlers.createMind = function() {
    	sendToCentralMachine("mind")
    }
    // item 2428
    state.myHandlers.sendToCentralMachine = function() {
    	sendToCentralMachine()
    }
    // item 2813
    state.myHandlers.accessForShare = function() {
    	getMachine().access()
    }
    // item 2901
    state.myHandlers.login = function(data) {
    	getMachine().login(data)
    }
    // item 2902
    state.myHandlers.signup = function(data) {
    	getMachine().signup(data)
    }
    // item 2122
    state.myHandlers.removeLimit = removeLimit
    state.myHandlers.sendFeedback = sendFeedback
    state.myHandlers.showHelp = showHelp
    state.myHandlers.hideHelp = hideHelp
    state.myHandlers.hideCentral = hideCentral
    state.myHandlers.cancelMachine = cancelMachine
    state.myHandlers.startLogon = startLogon
    state.myHandlers.startSignup = startSignup
    state.myHandlers.saveMobileInput = saveMobileInput
    // item 1830
    state.myHandlers.addWriter = addWriter
    state.myHandlers.addAdmin = addAdmin
    state.myHandlers.addReader = addReader
    // item 1985
    state.myHandlers.searchUsers = searchUsers
    state.myHandlers.removeAdmin = removeAdmin
    state.myHandlers.removeReader = removeReader
    state.myHandlers.removeWriter = removeWriter
    // item 2003
    state.myHandlers.foundUser = foundUser
    // item 2004
    state.myHandlers.saveAccess = saveAccess
    state.myHandlers.hideDemo = hideDemo
    // item 807
    state.widgets.wrapException = wrapException
    // item 579
    return state
}

function createUserList(id, userSet) {
    // item 1869
    var node = {
    	id: id,
    	type: "list_grid",
    	noScroll: true,
    	columns: [
    		{type:"image", width:"36px", clickable:true},
    		{type:"text", width:"100%"}
    	],
    	rows: []
    }
    // item 1871
    var users = Object.keys(userSet)
    // item 1872
    users.sort()
    // item 18730001
    var _ind1873 = 0;
    var _col1873 = users;
    var _len1873 = _col1873.length;
    while (true) {
        // item 18730002
        if (_ind1873 < _len1873) {
            
        } else {
            break;
        }
        // item 18730004
        var user = _col1873[_ind1873];
        // item 1876
        addIconText(
        	node.rows,
        	"delete.png",
        	user
        )
        // item 18730003
        _ind1873++;
    }
    // item 1870
    return node
}

function destroyDemoWindow() {
    // item 4195
    var id = globs.demo.widgetId
    // item 4197
    if (id) {
        // item 4196
        self.widgets.deleteWidget(id)
        globs.demo.widgetId = null
    }
    // item 4193
    var root = get("demo")
    root.innerHTML = ""
    // item 4194
    root.style.display = "none"
}

function disableSignupOk() {
    // item 2976
    var button = get("signupOk")
    // item 2977
    button.className = "disabled_button"
}

function display(id, value) {
    // item 572
    var element = get(id)
    element.style.display = value
}

function doSendFeedback(text) {
    // item 2293
    CallTrace.add("doSendFeedback", [text])
    // item 2294
    var success = function() {
    	hideWorking()
    	hideInputBox()
    	showNotification("MES_MESSAGE_SENT")
    }
    // item 2297
    var error = function() {
    	hideWorking()
    	setInputBoxError(translate("MES_MESSAGE_NOT_SENT"))
    }
    // item 2295
    var data = {
    	type: "feedback",
    	message: text
    }
    // item 2298
    showWorking()
    // item 2296
    sendFeedbackCore(
    	data,
    	success,
    	error
    )
}

function enableSignupOk() {
    // item 2971
    var button = get("signupOk")
    // item 2972
    button.className = "default_button"
}

function endPan() {
    // item 3578
    getEditor().endPan()
    // item 3587
    globs.panning = false
}

function enforceNotEmpty(name) {
    // item 2282
    name = name || ""
    name = name.trim()
    // item 2283
    if (name) {
        // item 2286
        return null
    } else {
        // item 2287
        return translate("ERR_EMPTY_TEXT")
    }
}

function exportMethod(self, method, name) {
    // item 176
    self[name] = wrapException(method, name)
}

function findReferences(name) {
    // item 4207
    self.logic.findReferences(name)
}

function findSearch() {
    // item 3418
    var top = getWidget("top")
    var topPanel = top.active
    // item 3440
    if (topPanel) {
        // item 3438
        var isSearch = function(widget) {
        	return widget.type == "search"
        }
        // item 3439
        return findWidgetInTree(
        	topPanel,
        	isSearch
        )
    } else {
        // item 3443
        return null
    }
}

function findSearchGroup(groupId) {
    // item 3383
    var defs = globs.search.defs
    // item 33840001
    var _ind3384 = 0;
    var _col3384 = defs;
    var _len3384 = _col3384.length;
    while (true) {
        // item 33840002
        if (_ind3384 < _len3384) {
            
        } else {
            // item 3390
            throw Error("Group '" + groupId + "' not found")
        }
        // item 33840004
        var group = _col3384[_ind3384];
        // item 3386
        if (group.id == groupId) {
            // item 3389
            return group
        }
        // item 33840003
        _ind3384++;
    }
}

function findWidgetInTree(root, criterion) {
    // item 3424
    if (criterion(root)) {
        // item 3427
        return root
    } else {
        // item 3428
        if (root.kids) {
            // item 34320001
            var _ind3432 = 0;
            var _col3432 = root.kids;
            var _len3432 = _col3432.length;
            while (true) {
                // item 34320002
                if (_ind3432 < _len3432) {
                    
                } else {
                    // item 3437
                    return null
                }
                // item 34320004
                var kid = _col3432[_ind3432];
                // item 3434
                if (findWidgetInTree(kid, criterion)) {
                    // item 3436
                    return kid
                }
                // item 34320003
                _ind3432++;
            }
        } else {
            // item 3431
            return null
        }
    }
}

function focusSearch(evt) {
    // item 3401
    if (((((HtmlUtils.hasPopup()) || (HtmlUtils.hasSoftPopup())) || (isCentralVisible())) || (!(globs.wide))) || (globs.helpOn)) {
        
    } else {
        // item 3397
        var search = findSearch()
        // item 3444
        if (search) {
            // item 3413
            search.focus()
        }
    }
    // item 3398
    HtmlUtils.preventDefaultHandling(evt)
}

function foundUser(evt, type, widget, rowId, cellId) {
    // item 2040
    getMachine().choose(rowId)
}

function get(id) {
    // item 484
    var element = document.getElementById(id)
    // item 481
    if (element) {
        // item 485
        return element
    } else {
        // item 486
        throw Error("Element '" + id + "' not found")
    }
}

function getClipboard() {
    // item 1343
    var text = getLsItem("clipboard");
    var obj = JSON.parse(text);
    return obj;
}

function getClipboardType() {
    // item 1332
    return getLsItem("clipboard type");
}

function getDateString() {
    // item 2242
    var date = new Date()
    // item 2243
    var yyyy = String(date.getFullYear())
    var mm = String(date.getMonth() + 1)
    var dd = String(date.getDate())
    var hh = String(date.getHours())
    var m = String(date.getMinutes())
    var s = String(date.getSeconds())
    // item 2244
    return pad1(yyyy) + pad1(mm) + pad1(dd)
     + pad1(hh) + pad1(m) + pad1(s)
}

function getDrakosha() {
    // item 2375
    return "drakosha132.png"
}

function getEditor() {
    // item 1398
    return globs.editor
}

function getExample() {
    // item 3045
    var search = Utils.parseSearch(window.location.search)
    // item 3046
    var example = search.example || "example01"
    // item 3047
    return "" + example + ".json"
}

function getHeight() {
    // item 812
    return window.innerHeight
}

function getItemLines(content) {
    // item 3642
    var txt = content.txt || ""
    var txt2 = content.txt2 || ""
    // item 3643
    var lines1 = txt.split("\n")
    var lines2 = txt2.split("\n")
    // item 3644
    var allLines = lines1.concat(lines2)
    // item 3645
    var isNotEmpty = function(text) {
    	return text.trim() != ""
    }
    // item 3646
    return allLines.filter(isNotEmpty)
}

function getItemUrls(content) {
    // item 3633
    var txt = content.txt || ""
    var txt2 = content.txt2 || ""
    // item 3634
    var urls = Utils.extractUrls(txt)
    var urls2 = Utils.extractUrls(txt2)
    // item 3635
    var all = urls.concat(urls2)
    // item 3636
    return all
}

function getLeftSplitterWidth() {
    // item 465
    return 200
}

function getLsItem(key) {
    // item 1356
    var result
    // item 1355
    try {
    	result = window.localStorage.getItem(key)
    } catch (e) {
    	result = globs.clip[key]
    }
    // item 1358
    DTools.print(result)
    // item 1357
    return result
}

function getMachine() {
    // item 2679
    var count = globs.centralMachines.length
    // item 2678
    var machine = globs.centralMachines[count - 1]
    // item 2680
    return machine
}

function getMyUrl() {
    // item 1628
    return window.location.href
}

function getOrCreateExpanded(group) {
    // item 4263
    if (globs.search.expandedList) {
        // item 4266
        return globs.search.expandedList
    } else {
        // item 4279
        var popup = globs.search.popup
        // item 4275
        var caption = translate("MES_SHOW_ALL_RESULTS")
        // item 4277
        var toAllResults = function() {
        	toSearchResults(null)
        }
        // item 4276
        addClickable(
        	popup,
        	caption,
        	toAllResults
        )
        // item 4280
        var listDiv = make(popup, "div")
        // item 4272
        globs.search.expandedList = listDiv
        // item 4273
        return listDiv
    }
}

function getOrCreateGroupList(group) {
    // item 4230
    var groups = globs.search.groupLists
    // item 4284
    if (groups) {
        
    } else {
        // item 4287
        groups = {}
        globs.search.groupLists = groups
    }
    // item 4226
    if (group.id in groups) {
        
    } else {
        // item 4278
        var popup = globs.search.popup
        // item 4231
        var caption = translate("MES_SHOW_MORE") +
         ": " + group.name
        // item 4233
        var toGroup = function() {
        	toSearchResults(group.id)
        }
        // item 4234
        var groupDiv = make(popup, "div")
        var listDiv = make(groupDiv, "div")
        // item 4232
        addClickable(
        	groupDiv,
        	caption,
        	toGroup
        )
        // item 4235
        groups[group.id] = {div:listDiv, count:0}
    }
    // item 4229
    return groups[group.id]
}

function getPath() {
    // item 674
    return window.location.pathname.toLowerCase()
}

function getRightSplitterWidth() {
    // item 470
    return 200
}

function getTextMenu() {
    // item 2383
    return "logo-text-s-hub.png"
}

function getTotalFound() {
    // item 4325
    var defs = globs.search.defs
    var count = 0
    // item 43260001
    var _ind4326 = 0;
    var _col4326 = defs;
    var _len4326 = _col4326.length;
    while (true) {
        // item 43260002
        if (_ind4326 < _len4326) {
            
        } else {
            break;
        }
        // item 43260004
        var group = _col4326[_ind4326];
        // item 4328
        count += group.items.length
        // item 43260003
        _ind4326++;
    }
    // item 4331
    return count
}

function getUrl() {
    // item 664
    return window.location.href.toLowerCase()
}

function getWidget(id) {
    // item 546
    return globs.widgets.getWidget(id)
}

function getWidth() {
    // item 669
    return window.innerWidth
}

function goToMyProject() {
    // item 3863
    var id = gUserId + " 1"
    // item 3864
    self.logic.goToFolder(id)
}

function goToPrices() {
    // item 3934
    goToUrl("/drakonhub-source?ref=dashboard")
}

function goToSpaces() {
    // item 3927
    self.logic.goToProjectsNoArg()
}

function goToUrl(url) {
    // item 763
    window.location.href = url
}

function hideCentral() {
    // item 2622
    if (globs.centralMachines.length == 0) {
        
    } else {
        // item 2625
        globs.centralMachines.pop()
    }
    // item 1507
    hideCentralCore()
}

function hideCentralCore() {
    // item 2607
    var id = globs.central
    // item 2613
    if (id) {
        // item 2611
        globs.central = null
        // item 2609
        self.widgets.deleteWidget(id)
        // item 2608
        var central = get("central")
        // item 2606
        central.innerHTML = ""
        // item 2610
        hideDiv(central)
        // item 2612
        globs.mobileInput = false
        globs.mobileSubmit = false
        globs.search = {}
    }
}

function hideDemo() {
    // item 4091
    var check = document.getElementById("demoShowOnStart_check")
    // item 4369
    if (check) {
        // item 4184
        if (check.checked) {
            // item 4187
            HtmlUtils.deleteCookie(
            	"demo-discarded"
            )
        } else {
            // item 4095
            HtmlUtils.setCookie(
            	"demo-discarded",
            	"discarded",
            	20
            )
        }
        // item 4086
        destroyDemoWindow()
    }
}

function hideDiv(div) {
    // item 1537
    div.style.display = "none"
}

function hideHelp() {
    // item 168
    show("help_wide", "none")
    // item 169
    show("help_narrow", "none")
    // item 3411
    globs.helpOn = false
}

function hideInputBox() {
    // item 1176
    if (globs.wide) {
        // item 1174
        InputBox.hide()
    } else {
        // item 1175
        hideCentral()
    }
}

function hidePopup() {
    // item 1648
    HtmlUtils.hidePopup()
}

function hideWorking() {
    // item 820
    display("working", "none")
}

function init() {
    // item 808
    globs.widgets.onEvent = onEvent
    // item 744
    self.logic.init()
    // item 2441
    registerShortcuts()
    // item 1473
    Nav.stateCallback = self.logic.onStateChange
    // item 3053
    if (globs.isTryMe) {
        // item 3056
        //window.onbeforeunload = confirmExit
        window.onbeforeunload = null
    }
}

function initControls(wide, isTryMe) {
    // item 739
    globs.wide = wide
    globs.isTryMe = isTryMe
    // item 711
    var tops
    var topHeight = TopPanelHeight
    // item 712
    if (globs.wide) {
        // item 709
        tops = makeTopWidgetsDesc()
    } else {
        // item 715
        tops = makeTopWidgetsDescMob()
    }
    // item 718
    var folders = makeFolderListDesc()
    folders.id = "middle_folder"
    // item 719
    var diagram = makeDiagramDesc()
    diagram.id = "middle_diagram"
    // item 722
    var trash = makeRubbishListDesc()
    trash.id = "middle_trash"
    // item 3754
    var dashboard = makeDashboardDesc()
    dashboard.id = "middle_dashboard"
    // item 721
    var spacesGrid = {
    	id: "middle_spaces",
    	type: "list_grid",
    	columns: [
    		{type:"image", width:"36px", clickable:false},
    		{type:"text", width:"100%"},
    		{type:"image", width:"36px", clickable:true}
    	]
    }
    // item 723
    var mrecentGrid = {
    	id: "middle_recent",
    	type: "list_grid",
    	columns: [
    		{type:"image", width:"36px", clickable:false},
    		{type:"text", width:"100%"}
    	]
    }
    // item 720
    var middles = [folders, diagram, spacesGrid,
       trash, mrecentGrid, dashboard]
    // item 727
    var rootNode = {
    	type: "vdock",
    	id: "root",
    	top: {
    		id: "top",
    		type: "many",
    		height: topHeight,
    		kids: tops
    	},
    	center: {
    		"id": "splitter",
    		type: "splitter",
    		left: getLeftSplitterWidth(),
    		right: getRightSplitterWidth(),
    		leftChild: {
    			type: "pane",
    			id: "left_pane",
    			text: "MES_SPACES",
    			kid: {
    				type: "tree",
    				id: "tree"
    			}
    		},
    		middleChild:{
    			id: "middle",
    			type: "many",
    			kids: middles
    		},
    		rightChild: {
    			type: "pane",
    			id: "right_pane",
    			text: "MES_RECENT",
    			kid: {
    				type: "list",
    				id: "recent"
    			}
    		}
    	}
    }
    // item 731
    var rootDiv = get("wide")
    // item 732
    globs.root = globs.widgets.createWidget(
    	rootDiv,
    	rootNode
    )
    // item 733
    createFeedbackButton()
    // item 1392
    createEditor()
    // item 735
    getWidget("top").setActive("top_diagram")
    getWidget("middle").setActive("middle_folder")
    // item 745
    //registerShortcuts()
}

function isCentralVisible() {
    // item 2557
    return !!globs.central
}

function isDemoDiscarded() {
    // item 4182
    var discarded = HtmlUtils.getCookie(
    	"demo-discarded"
    )
    // item 4183
    return !!discarded
}

function isDrakon() {
    // item 2328
    var current = self.logic.getCurrent()
    // item 2327
    return (current.type == "drakon")
}

function isEditorOn() {
    // item 2552
    var current = self.logic.getCurrent()
    // item 2546
    if (((current.screen == "middle_diagram") && (!(HtmlUtils.hasPopup()))) && (!(isCentralVisible()))) {
        // item 3136
        var editor = getEditor()
        // item 3135
        if (editor.isDragOn()) {
            // item 2549
            return false
        } else {
            // item 2545
            return true
        }
    } else {
        // item 2549
        return false
    }
}

function isMind() {
    // item 3950
    var current = self.logic.getCurrent()
    // item 3949
    return (current.type == "mind")
}

function isReadonly() {
    // item 2578
    var current = self.logic.getCurrent()
    // item 2572
    if ((current.screen == "middle_diagram") && (!(current.isReadonly))) {
        // item 2575
        return false
    } else {
        // item 2571
        return true
    }
}

function killCentral() {
    // item 2780
    clearMachines()
    // item 2621
    hideCentralCore()
}

function loadFont(italic, bold, family, file, onLoaded) {
    // item 862
    try {
    // item 857
    var spec = {
    	italic: italic,
    	bold: bold,
    	family: family,
    	file: file
    }
    // item 860
    var target = {
    	onData: function() {
    		hideWorking()
    		onLoaded()
    	},
    	onError: function(e) {
    		panicOnFont(e, spec)
    	}
    }
    // item 859
    showWorking()
    // item 858
    loadFontCore(
    	spec,
    	target
    )
    // item 861
    
    } catch (e) {
    	CallTrace.error(e)
    	panic(e)
    }
}

function loadFontCore(font, target) {
    // item 1419
    var file = font.file
    // item 1425
    if (file in globs.loadedFonts) {
        // item 1424
        console.log(
        	"Font already loaded ",
        	file
        )
        // item 1428
        scheduleNextState(
        	target,
        	null
        )
    } else {
        // item 1413
        var onSuccess = function() {
        	try {
        		onFontLoaded(file, target, font)
        	} catch (e) {
        		panicOnFont(e, font)
        	}
        }
        // item 1423
        var onError = function() {
        	onFontNotLoaded(file, target)
        }
        // item 1414
        var ruleText = makeFontFaceRule(
        	font.italic,
        	font.bold,
        	font.family,
        	file
        )
        // item 1416
        addStyle(ruleText)
        // item 1417
        var fontSpec = makeFontSpec2(
        	font.italic,
        	font.bold
        )
        // item 1418
        var font2 = new FontFaceObserver(
        	font.family,
        	fontSpec
        )
        // item 2436
        var timeout = Config.FONT_TIMEOUT * 1000
        // item 1415
        font2.load(null, timeout).then(
        	onSuccess,
        	onError
        )
    }
}

function logout() {
    // item 2269
    globs.logon.logout()
}

function make(parent, tag) {
    // item 492
    var element = document.createElement(tag)
    parent.appendChild(element)
    // item 494
    //element.ontouchstart = prevent
    //element.ontouchmove = prevent
    //element.ontouchend = prevent
    // item 493
    return element
}

function makeAccept(div) {
    // item 2957
    var table = make(div, "table")
    var tr = make(table, "tr")
    var td1 = make(tr, "td")
    var td2 = make(tr, "td")
    table.style.marginTop = "10px"
    table.style.marginBottom = "10px"
    td2.style.paddingLeft = "10px"
    // item 2955
    var check = make(td1, "input")
    check.type = "checkbox"
    // item 2959
    //check.onchange = updateSignupButton
    // item 2958
    var span = make(td2, "div")
    span.innerHTML = translate("MES_I_AGREE")
    span.style.marginLeft = "10px"
    span.style.display = "inline-block"
    // item 2956
    check.id = "signup_agree"
}

function makeAccessSubheader(header, actionId) {
    // item 1817
    var headerStyle = {
    	color: DarkBackground,
    	fontWeight: "bold"
    }
    // item 1818
    var header = {
    	type: "label",
    	text: header,
    	style: headerStyle
    }
    // item 1819
    var add = {
    	type: "text_button",
    	text: "MES_ADD",
    	signalId: actionId,
    	style: {
    		background: DarkBackground,
    		color: "white",
    		padding: "8px",
    		textAlign: "center",
    		borderRadius: "5px"
    	}
    }
    // item 1820
    var stack = {
    	type: "hdock",
    	height: 31,
    	lefts: [header],
    	rights: [add]
    }
    // item 1821
    return stack
}

function makeBigPictureButton(div, node, widget) {
    // item 1583
    div.className = "big_picture_button"
    div.style.padding = "5px"
    div.style.borderWidth = "2px"
    // item 4010
    var table = make(div, "table")
    var tr = make(table, tr)
    // item 4011
    var left = make(tr, "td")
    var right = make(tr, "td")
    right.style.height = "100px"
    // item 1584
    var img = make(left, "img")
    img.draggable = false
    // item 1585
    img.src = ImagePath + node.image
    img.style.width = "80px"
    // item 1587
    var label = make(right, "div")
    label.style.fontSize = "110%"
    label.style.fontWeight = "bold"
    label.style.margin = "5px"
    // item 1588
    HtmlUtils.setDivText(label, translate(node.text))
    // item 4012
    var desc = make(right, "p")
    desc.style.textAlign = "center"
    desc.style.color = DarkBackground
    desc.style.fontSize = "90%"
    desc.style.margin = "5px"
    // item 4013
    HtmlUtils.setDivText(desc, translate(node.desc))
    // item 1586
    registerEvent(
    	div,
    	widget,
    	"click"
    )
}

function makeDashboardDesc() {
    // item 3759
    return {
    	type: "custom",
    	builder: buildDashboardWidget
    }
}

function makeDemoButtons(items) {
    // item 4144
    var result = []
    // item 4135
    globs.demo.buttons = {}
    // item 4136
    var i = 1
    // item 41370001
    var _ind4137 = 0;
    var _col4137 = items;
    var _len4137 = _col4137.length;
    while (true) {
        // item 41370002
        if (_ind4137 < _len4137) {
            
        } else {
            break;
        }
        // item 41370004
        var item = _col4137[_ind4137];
        // item 4141
        var id = "demoButton_" + i
        // item 4142
        var image = item[1]
        var text = item[0]
        // item 4140
        result.push({
        	id: id,
        	type: "wbutton",
        	text: text,
        	style: {
        		background: DarkBackground,
        		color: "white",
        		fontSize:"80%"
        	}
        })
        // item 4143
        globs.demo.buttons[id] = {
        	image: image
        }
        // item 4146
        globs.myHandlers[id] = onDemoButton
        // item 4139
        i++
        // item 41370003
        _ind4137++;
    }
    // item 4145
    return result
}

function makeDemoListDrakon() {
    // item 4188
    var result = [
    	["MES_INSERT_ICONS", "demo_drakon_insert.gif"],
    	["MES_RELOCATE", "demo_drakon_join.gif"],
    	["MES_APPLY_THEME", "demo_drakon_theme.gif"],
    	["MES_FORMAT_ICON", "demo_drakon_format.gif"]
    ]
    // item 4113
    return result
}

function makeDemoListMind() {
    // item 4117
    var result = [
    	["MES_BUILD_LADDER", "demo_graf_vertical.gif"],
    	["MES_BUILD_MIXED", "demo_graf_horizontal.gif"],
    	["MES_APPLY_THEME", "demo_drakon_theme.gif"],
    	["MES_FORMAT_ICON", "demo_drakon_format.gif"]
    ]
    // item 4118
    return result
}

function makeDiagramDesc() {
    // item 447
    return {
    	type: "dummy"
    }
}

function makeErrorMessage(data) {
    // item 23
    var message = Utils.makeErrorMessage(data)
    // item 24
    return translate(message)
}

function makeFolderListDesc() {
    // item 441
    var margin = 6
    var searchHeight = SearchHeight
    var height = margin * 2
     + searchHeight
    // item 440
    var search = {
    	id: "folderSearch",
    	vPadding: margin,
    	hPadding: margin,
    	type: "search",
    	height: searchHeight,
    	width: 150
    }
    // item 442
    var check = {
    	id: "check_all",
    	hPadding:4,
    	vPadding:5,
    	type: "check",
    	width: 30,
    	height: 30
    }
    // item 437
    
    var actions = {
    	id: "actions",
    	vPadding: 6,
    	hPadding: 8,
    	type: "text_button",
    	text:"MES_ACTIONS",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "6px",
    		borderRadius: BorderRadius
    	}
    }
    // item 3141
    var rights = []
    // item 3142
    rights.push(search)
    // item 436
    var topStack = {
    	type: "hdock",
    	height: height,
    	lefts: [check, actions],
    	rights: rights,
    	style: {background: DockHeaderColor}
    }
    // item 438
    var grid = {
    	id: "folder_grid",
    	type: "list_grid",
    	columns: [
    		{type:"image", width:"36px", clickable:true},
    		{type:"text", width:"100%"}
    	]
    }
    // item 439
    var page = {
    	type: "vdock",
    	top: topStack,
    	center: grid
    }
    // item 443
    return page
}

function makeFontFaceRule(italic, bold, family, file) {
    // item 1290
    var text = "@font-face {\n"
    // item 1288
    text += "    font-family: '" + family + "';\n"
    text += "    src: url('fonts/" + file + "');\n"
    // item 1291
    if (italic) {
        // item 1294
        text += "    font-style: italic;\n"
    }
    // item 1295
    if (bold) {
        // item 1298
        text += "    font-weight: bold;\n"
    }
    // item 1299
    text += "}"
    // item 1300
    return text
}

function makeFontSpec2(italic, bold) {
    // item 1306
    var result = {
    }
    // item 1307
    var style = ""
    // item 1308
    if (italic) {
        // item 1311
        result.style = "italic"
    }
    // item 1312
    if (bold) {
        // item 1315
        result.weight = "bold"
    }
    // item 1316
    return result
}

function makeGoOutside(url) {
    // item 3713
    return function() {
    	window.open(url)
    }
}

function makeGotoText(name) {
    // item 3706
    var text = "> " + Utils.truncateText(name, 40)
    // item 3707
    return text
}

function makeIB(parent) {
    // item 1711
    var div = make(parent, "div")
    div.style.display = "inline-block"
    // item 1712
    return div
}

function makeImagePath(image) {
    // item 2390
    return ImagePath + image
}

function makeNavFolder(spaceId, folderId) {
    // item 3721
    var id = spaceId + " " + folderId
    // item 3719
    var go = function() {
    	self.logic.goToFolder(id)
    }
    // item 3720
    return go
}

function makePngName() {
    // item 2258
    var s1 = getEditor().getName()
    var sanitized = s1.replace(/,| |:|\\|\/|\r|\n|\t/g, "-");
    // item 2260
    if (sanitized) {
        
    } else {
        // item 2263
        sanitized = "diagram"
    }
    // item 2259
    return sanitized + ".png";
}

function makeRecoverLink(div) {
    // item 2855
    var a = make(div, "a")
    // item 2856
    a.href = "/reset"
    // item 2857
    HtmlUtils.setDivText(
    	a,
    	translate("MES_FORGOT_PASSWORD")
    )
}

function makeRubbishListDesc() {
    // item 455
    var margin = 4
    var searchHeight = 30
    var height = margin * 2 + searchHeight
    // item 452
    
    var upButton = {
    	vPadding: margin,
    	hPadding: margin,
    	signalId: "goToProjects",
    	type: "text_button",
    	text:"MES_TO_SPACES",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		borderRadius: BorderRadius,
    		padding: "6px"
    	}
    }
    // item 456
    
    var clearButton = {
    	vPadding: margin,
    	hPadding: margin,
    	signalId: "clearTrash",
    	type: "text_button",
    	text:"MES_CLEAR_TRASH",
    	style: {
    		color: "white",
    		background: "#c00000",
    		borderRadius: BorderRadius,
    		padding: "6px"
    	}
    }
    // item 2437
    var topStack = {
    	type: "hdock",
    	height: height,
    	lefts: [upButton],
    	rights: [clearButton],
    	style: {background: DockHeaderColor}
    }
    // item 2438
    var grid = {
    	id: "trash_grid",
    	type: "list_grid",
    	columns: [
    		{type:"image", width:"36px", clickable:false},
    		{type:"text", width:"100%"},
    		{type:"button"}
    	]
    }
    // item 2439
    var page = {
    	type: "vdock",
    	top: topStack,
    	center: grid
    }
    // item 2440
    return page
}

function makeSearchCallback(item) {
    // item 4214
    var type = item.type
    var target = item.target
    // item 3309
    var action = function() {
    	hidePopup()
    	hideCentral()
    	hideHelp()
    	hideDemo()
    	self.logic.onSearchItem(
    		type,
    		target
    	)
    }
    // item 3310
    return wrapException(
    	action,
    	"searchItem:" + type + ":" + target
    )
}

function makeSeparator(list) {
    // item 1684
    var item = {
    	type: "separator"
    }
    // item 1685
    list.push(item)
}

function makeSpan(div, text) {
    // item 3478
    var span = make(div, "span")
    HtmlUtils.setDivText(span, text)
    // item 3479
    return span
}

function makeTextArea(parent) {
    // item 2185
    var editor = make(parent, "textarea")
    // item 2186
    editor.style.fontSize = "12pt"
    editor.style.fontFamily = Config.FONT_FAMILY
    // item 2187
    editor.style.boxSizing = "border-box"
    editor.style.resize = "none"
    editor.style.outline = "none"
    editor.style.width = "100%"
    editor.style.padding = "10px"
    editor.style.border = "none"
    editor.style.height = "60px"
    editor.style.margin = "0px"
    editor.style.border = "solid 1px #707070"
    editor.style.verticalAlign = "top"
    // item 2590
    editor.className = "mousetrap"
    // item 2188
    return editor
}

function makeTextListItem(list, textId, action, id, image) {
    // item 1677
    var item = {
    	text: translate(textId),
    	code: action,
    	id: id,
    	image: image
    }
    // item 1678
    list.push(item)
}

function makeTopWidgetsDesc() {
    // item 302
    var buttonMargin = 6
    var buttonMargin2 = 10
    var createFont = "80%"
    var createPadding = "30px"
    var radius = "5px"
    // item 320
    var createStyle = {
    	fontSize: createFont,
    	padding: "12px",
    	width: "100px",
    	textAlign: "center",
    	paddingLeft: "0px",
    	paddingRight: "0px",
    	borderRadius: BorderRadius,
    	color: DarkBackground,
    	background: "white"
    }
    // item 282
    var mainMenu = {
    	signalId: "showMainMenu",
    	type: "image_button",
    	image:"drakosha-menu-104.png",
    	width:80,
    	height:52,
    	tooltip: "MES_MENU"
    }
    // item 317
    var create = {
    	signalId : "create_diagram",
    	hPadding:8, vPadding:8,
    	type: "text_button",
    	text:"new_diagram",
    	tooltip: "MES_CREATE_DIAGRAM",
    	style: {
    		color: "white",
    		background: "coral",
    		fontSize: createFont,
    		padding: "12px",
    		paddingLeft: "0px",
    		paddingRight: "0px",
    		textAlign: "center",
    		borderRadius: BorderRadius
    	},
    	customWidth: 100
    }
    // item 316
    var share = {
    	hPadding:1, vPadding:buttonMargin,
    	signalId: "share",
    	type: "image_button",
    	image:"share.png",
    	width:40,
    	height:40,
    	tooltip: "MES_SHARE",
    	style: {
    		background: "white",
    		borderRadius: radius
    	}
    }
    // item 293
    var undoButton = {
    	signalId: "undo",
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	type: "image_button",
    	image:"undo.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_UNDO"
    }
    
    var redoButton = {
    	signalId: "redo",
    	hPadding:1, vPadding:buttonMargin,
    	type: "image_button",
    	image:"redo.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_REDO"
    }
    // item 299
    var exp = {
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	signalId: "exportButton",
    	type: "image_button",
    	image:"export.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_SAVE_AS_IMAGE"
    }
    // item 300
    var folder = {
    	signalId: "up",
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	type: "image_button",
    	image:"arrow-up.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_UP"
    }
    // item 3143
    var search = {
    	signalId: "globalSearch",
    	hPadding:buttonMargin,
    	vPadding:buttonMargin,
    	type: "search",
    	height: SearchHeight,
    	width: 150
    }
    // item 303
    var sSpacer = {
    	type: "dummy",
    	width: 25
    }
    // item 314
    var createFolderButton = {
    	hPadding:8, vPadding:8,
    	signalId: "create_folder",
    	type: "text_button",
    	text:"new_folder",
    	style: createStyle,
    	tooltip: translate("MES_CREATE_FOLDER"),
    	customWidth: 100
    }
    // item 315
    var createProject = {
    	hPadding:8, vPadding:8,
    	type: "text_button",
    	signalId: "createProject",
    	text:"new_project",	
    	style: {
    		color: "white",
    		background: "coral",
    		fontSize: createFont,
    		padding: "12px",
    		textAlign: "center",
    		borderRadius:radius
    	},
    	tooltip: "MES_CREATE_SPACE"
    }
    // item 319
    var projects = {
    	hPadding:10, vPadding:10,
    	type: "text_button",
    	text:"MES_SPACES",
    	style: {background: DarkBackground},
    	background: "white"
    }
    // item 283
    var help = 
    {
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	type: "image_button",
    	signalId: "showHelp",
    	image:"help.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: translate("MES_HELP")
    }
    var user = {
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	signalId: "accountButton",
    	type: "image_button",
    	image:"user.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: translate("MES_ACCOUNT")
    }
    // item 321
    var rights = [user, help, search]
    // item 281
    var spacesTop = {
    	id: "top_spaces",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, createProject],
    	rights: [user, search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path",
    		id: "spacesTopPath"
    	}
    }
    // item 301
    var diagramTop = {
    	id: "top_diagram",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, create, undoButton, 
    redoButton, exp, share, folder],
    	rights: rights,
    	style:{background:DarkBackground},
    	center: {
    		type: "path",
    		id: "foldersTopPath"
    	}
    }
    // item 310
    var fSpacer = {
    	type: "dummy",
    	width: 87
    }
    // item 304
    var folderTop = {
    	id: "top_folder",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, create, createFolderButton, sSpacer,
    share, folder],
    	rights: [user, search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 318
    var empty = {
    	id: "top_empty",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu],
    	rights: [user, search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 327
    var exp2 = Utils.copyObject(exp)
    // item 328
    exp2.id = "export_button_ro"
    // item 329
    var oneButtSpace = {
    	type: "dummy",
    	width: 46
    }
    // item 325
    var diagramTopRo = {
    	id: "top_diagram_ro",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, exp2, share, folder],
    	rights: rights,
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 326
    var folderTopRo = {
    	id: "top_folder_ro",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, oneButtSpace, share, folder],
    	rights: [user, search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 333
    var exp3 = Utils.copyObject(exp)
    // item 334
    exp3.id = "export_button_nu"
    // item 335
    var nuSpace = {
    	type: "dummy",
    	width: 154
    }
    // item 3938
    var saveStyle = {
    	fontSize: createFont,
    	padding: "12px",
    	width: "100px",
    	textAlign: "center",
    	paddingLeft: "0px",
    	paddingRight: "0px",
    	borderRadius: BorderRadius,
    	color: "white",
    	background: "coral"
    }
    // item 336
    var saveButton = {
    	hPadding:8, vPadding:8,
    	signalId: "saveDiagram",
    	type: "text_button",
    	text:"MES_SAVE",
    	style: saveStyle,
    	tooltip: translate("MES_SAVE_OWN"),
    	customWidth: 100
    }
    // item 337
    var diagramTopNu = {
    	id: "top_diagram_nu",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, saveButton, exp3, share, folder],
    	rights: [help, search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 338
    var folderTopNu = {
    	id: "top_folder_nu",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, nuSpace, share, folder],
    	rights: [search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 339
    var spacesTopNu = {
    	id: "top_spaces_nu",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu],
    	rights: [search],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 343
    var exp4 = Utils.copyObject(exp)
    // item 344
    exp4.id = "export_button_try"
    // item 345
    var diagramTopTry = {
    	id: "top_diagram_try",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, saveButton, undoButton, 
    		redoButton, exp4],
    	rights: [help],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 284
    var dummy = {
    	id: "dummy",
    	type: "dummy",
    	height: TopPanelHeight,
    	style:{background: "#ffd0d0"}
    }
    // item 285
    return [dummy, spacesTop, folderTop, diagramTop, 
      empty, folderTopRo, diagramTopRo, 
      folderTopNu, diagramTopNu, spacesTopNu,
      diagramTopTry]
}

function makeTopWidgetsDescMob() {
    // item 424
    var buttonMargin = 6
    var buttonMargin2 = 10
    var createFont = "80%"
    var createPadding = "30px"
    var radius = "5px"
    // item 385
    var createStyle = {
    	fontSize: createFont,
    	padding: "12px",
    	textAlign: "center",
    	paddingLeft: "5px",
    	paddingRight: "5px",
    	color: DarkBackground,
    	background: "white",
    	borderRadius:radius
    }
    // item 350
    var mainMenu = {
    	signalId: "showMainMenu",
    	type: "image_button",
    	image:"menu.png",
    	width:52,
    	height:52,
    	tooltip: "MES_MENU"
    }
    // item 382
    var create = {
    	signalId : "create_diagram",
    	hPadding:0, vPadding:8,
    	type: "text_button",
    	text:"+",
    	tooltip: "MES_CREATE_DIAGRAM",
    	style: {
    		color: "white",
    		background: "coral",
    		fontSize: createFont,
    		padding: "12px",
    		paddingLeft: "0px",
    		paddingRight: "0px",
    		textAlign: "center",
    		borderRadius:radius
    	},
    	customWidth: 40
    }
    // item 381
    var share = {
    	hPadding:8, vPadding:buttonMargin,
    	signalId: "share",
    	type: "image_button",
    	image:"share.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_SHARE"
    }
    // item 361
    var undoButton = {
    	signalId: "undo",
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	type: "image_button",
    	image:"undo.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_UNDO"
    }
    
    var redoButton = {
    	signalId: "redo",
    	hPadding:1, vPadding:buttonMargin,
    	type: "image_button",
    	image:"redo.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_REDO"
    }
    // item 367
    var exp = {
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	signalId: "exportButton",
    	type: "image_button",
    	image:"export.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_SAVE_AS_IMAGE"
    }
    // item 368
    var up = {
    	signalId: "up",
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	type: "image_button",
    	image:"arrow-up.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: "MES_UP"
    }
    // item 379
    var createFolderButton = {
    	hPadding:8, vPadding:buttonMargin,
    	type: "image_button",
    	signalId: "create_folder",
    	image:"folder-s3.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: translate("MES_CREATE_FOLDER")
    }
    // item 380
    var createProject = {
    	hPadding:8, vPadding:8,
    	type: "text_button",
    	text:"new_project",	
    	signalId: "createProject",
    	style: {
    		color: "white",
    		background: "coral",
    		fontSize: createFont,
    		padding: "12px",
    		textAlign: "center",
    		borderRadius:radius
    	},
    	tooltip: "MES_CREATE_SPACE"
    }
    // item 384
    var projects = {
    	hPadding:10, vPadding:10,
    	type: "text_button",
    	text:"MES_SPACES",
    	style: {background: DarkBackground},
    	background: "white"
    }
    // item 391
    var spacesLabel = {
    	hPadding:8,
    	vPadding: 10,
    	type: "label",
    	text: "MES_SPACES",
    	style: {
    		color: "white"
    	}
    }
    // item 351
    var help = 
    {
    	hPadding:buttonMargin, vPadding:buttonMargin,
    	type: "image_button",
    	signalId: "showHelp",
    	image:"help.png",
    	width:40,
    	height:40,
    	style:{borderRadius:radius},
    	tooltip: translate("MES_HELP")
    }
    // item 386
    var rights = [up, help]
    // item 387
    var diaLabel = {
    	id: "diaLabel",
    	type: "wlabel",
    	text: "Ololo!",
    	style: {
    		background: DockHeaderColor,
    		borderBottom: "solid 1px grey",
    		fontSize: "11pt"
    	}
    }
    // item 389
    var folderLabel = {
    	id: "folderLabel",
    	type: "wlabel",
    	text: "Ololo!",
    	style: {
    		background: DockHeaderColor,
    		borderBottom: "solid 1px grey",
    		fontSize: "11pt"
    	}
    }
    // item 349
    var spacesTop = {
    	id: "top_spaces",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, createProject, spacesLabel],
    	rights: [],
    	style:{background: DarkBackground}
    }
    // item 369
    var diagramTop = {
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, create, undoButton, 
    redoButton, exp],
    	rights: rights,
    	style:{background: DarkBackground}
    }
    // item 388
    var diagramHead = {
    	id: "top_diagram",
    	type: "vpanel",
    	kids: [diagramTop, diaLabel]
    }
    // item 371
    var folderTop = {
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, create, createFolderButton, share],
    	rights: [up],
    	style:{background: DarkBackground}
    }
    // item 390
    var folderHead = {
    	id: "top_folder",
    	type: "vpanel",
    	kids: [folderTop, folderLabel]
    }
    // item 383
    var empty = {
    	id: "top_empty",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu],
    	rights: [],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 395
    var exp2 = Utils.copyObject(exp)
    // item 396
    exp2.id = "export_button_ro"
    // item 401
    var diaLabelRo = Utils.copyObject(diaLabel)
    diaLabelRo.id = "diaLabelRo"
    // item 402
    var folderLabelRo = Utils.copyObject(folderLabel)
    folderLabelRo.id = "folderLabelRo"
    // item 399
    var diagramTopRo = {
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, exp2],
    	rights: rights,
    	style:{background: DarkBackground}
    }
    // item 397
    var diagramHeadRo = {
    	id: "top_diagram_ro",
    	type: "vpanel",
    	kids: [diagramTopRo, diaLabelRo]
    }
    // item 400
    var folderTopRo = {
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, share],
    	rights: [up],
    	style:{background: DarkBackground}
    }
    // item 398
    var folderHeadRo = {
    	id: "top_folder_ro",
    	type: "vpanel",
    	kids: [folderTopRo, folderLabelRo]
    }
    // item 406
    var exp3 = Utils.copyObject(exp)
    // item 407
    exp3.id = "export_button_nu"
    // item 415
    var diaLabelNu = Utils.copyObject(diaLabel)
    diaLabelNu.id = "diaLabelNu"
    // item 416
    var folderLabelNu = Utils.copyObject(folderLabel)
    folderLabelNu.id = "folderLabelNu"
    // item 414
    var spacesLabelNu = Utils.copyObject(spacesLabel)
    spacesLabelNu.id = "spacesLabelNu"
    // item 3939
    var saveStyle = Utils.copyObject(createStyle)
    saveStyle.color = "white"
    saveStyle.background = "coral"
    // item 408
    var saveButton = {
    	hPadding:8, vPadding:8,
    	type: "text_button",
    	text:"MES_SAVE",
    	signalId: "saveDiagram",	
    	style: saveStyle,
    	tooltip: translate("MES_SAVE_OWN")
    }
    // item 409
    var diagramTopNu = {
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, saveButton, exp3, share],
    	rights: rights,
    	style:{background: DarkBackground}
    }
    // item 411
    var diagramHeadNu = {
    	id: "top_diagram_nu",
    	type: "vpanel",
    	kids: [diagramTopNu, diaLabelNu]
    }
    // item 410
    var folderTopNu = {
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, share],
    	rights: [up],
    	style:{background: DarkBackground}
    }
    // item 412
    var folderHeadNu = {
    	id: "top_folder_nu",
    	type: "vpanel",
    	kids: [folderTopNu, folderLabelNu]
    }
    // item 413
    var spacesTopNu = {
    	id: "top_spaces_nu",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, spacesLabelNu],
    	rights: [],
    	style:{background: DarkBackground}
    }
    // item 420
    var exp4 = Utils.copyObject(exp)
    // item 421
    exp4.id = "export_button_try"
    // item 422
    var diagramTopTry = {
    	id: "top_diagram_try",
    	type: "hdock",
    	height: TopPanelHeight,
    	lefts: [mainMenu, saveButton, undoButton, 
    		redoButton, exp4],
    	rights: [help],
    	style:{background:DarkBackground},
    	center: {
    		type: "path"
    	}
    }
    // item 352
    var dummy = {
    	id: "dummy",
    	type: "dummy",height: TopPanelHeight,
    	style:{background: "#ffd0d0"}
    }
    // item 353
    return [dummy, spacesTop, folderHead, diagramHead, empty,
    folderHeadRo, diagramHeadRo,
    folderHeadNu, diagramHeadNu, spacesTopNu,
    diagramTopTry]
}

function noContext(div) {
    // item 529
    HtmlUtils.noContext(div)
}

function onAddUserClicked(role) {
    // item 2676
    var machine = getMachine()
    // item 2681
    machine.addUser(role)
}

function onClearClipboard(timer) {
    // item 1376
    if (timer == globs.clipboardTimer) {
        // item 1373
        clearClipboard()
    }
}

function onCtrlA() {
    // item 2512
    getEditor().selectAll()
}

function onCtrlEnter() {
    // item 2492
    if (InputBox.isVisible()) {
        // item 2491
        InputBox.submit()
    } else {
        // item 2495
        if (globs.mobileInput) {
            // item 2497
            saveMobileInput()
        }
    }
}

function onCtrlY() {
    // item 2516
    self.logic.redo()
}

function onCtrlZ() {
    // item 2520
    self.logic.undo()
}

function onData(target, data, requestId) {
    // item 2754
    if (target.requestId == requestId) {
        // item 2757
        target.onData(data)
    }
}

function onDefResult(cx, cy, queryId, current, data) {
    // item 3698
    var extended = globs.extended
    // item 3658
    if ((extended) && (queryId == extended.queryId)) {
        // item 3674
        var menuItems = []
        // item 3660
        if (data.items) {
            // item 36620001
            var _ind3662 = 0;
            var _col3662 = data.items;
            var _len3662 = _col3662.length;
            while (true) {
                // item 36620002
                if (_ind3662 < _len3662) {
                    
                } else {
                    break;
                }
                // item 36620004
                var item = _col3662[_ind3662];
                // item 3694
                if ((item.space_id == current.spaceId) && (!(item.folder_id == current.folderId))) {
                    // item 3665
                    var text = makeGotoText(item.name)
                    // item 3666
                    var action = makeNavFolder(item.space_id, item.folder_id)
                    // item 3667
                    menuItems.push({
                    	type: "item",
                    	text: text,
                    	code: action
                    })
                }
                // item 36620003
                _ind3662++;
            }
        }
        // item 36900001
        var _ind3690 = 0;
        var _col3690 = extended.urls;
        var _len3690 = _col3690.length;
        while (true) {
            // item 36900002
            if (_ind3690 < _len3690) {
                
            } else {
                break;
            }
            // item 36900004
            var url = _col3690[_ind3690];
            // item 3692
            var text = makeGotoText(url)
            // item 3680
            var action = makeGoOutside(url)
            // item 3693
            menuItems.push({
            	type: "item",
            	text: text,
            	code: action
            })
            // item 36900003
            _ind3690++;
        }
        // item 3685
        if (menuItems.length == 0) {
            
        } else {
            // item 3664
            var items = menuItems.slice(0, 7)
            // item 3657
            ContextMenu.addItem({
            	type: "separator"
            })
            // item 36830001
            var _ind3683 = 0;
            var _col3683 = items;
            var _len3683 = _col3683.length;
            while (true) {
                // item 36830002
                if (_ind3683 < _len3683) {
                    
                } else {
                    break;
                }
                // item 36830004
                var item = _col3683[_ind3683];
                // item 3697
                ContextMenu.addItem(item)
                // item 36830003
                _ind3683++;
            }
            // item 3661
            ContextMenu.repos(
            	cx,
            	cy
            )
        }
    }
}

function onDeleteKey(evt) {
    // item 2501
    if ((isEditorOn()) && (!(isReadonly()))) {
        // item 2504
        getEditor().deleteSelection()
        // item 2505
        HtmlUtils.preventDefaultHandling(evt)
    }
}

function onDemoButton(evt, type, widget, id, cellId) {
    // item 4151
    selectDemoButton(widget.id)
}

function onEnter(evt) {
    // item 2483
    startEdit(evt)
    // item 2480
    if (globs.enterSave) {
        // item 2579
        onCtrlEnter(evt)
    }
}

function onError(errorMsg, url, lineNumber, column, errorObj) {
    // item 161
    reportError(
    	errorMsg,
    	url,
    	lineNumber,
    	column,
    	errorObj
    )
    // item 160
    pagePanic(errorMsg)
}

function onEscape(evt) {
    // item 2461
    if (isCentralVisible()) {
        // item 2464
        cancelMachine()
    }
    // item 2465
    if (HtmlUtils.hasPopup()) {
        // item 2468
        hidePopup()
    }
    // item 3273
    HtmlUtils.hideSoftPopup()
    // item 2469
    hideHelp()
}

function onEvent(evt, type, widget, rowId, cellId) {
    // item 1721
    var myHandler = globs.myHandlers[widget.signalId]
    // item 1734
    if (myHandler) {
        // item 1829
        myHandler(
        	evt,
        	type,
        	widget,
        	rowId,
        	cellId
        )
    } else {
        // item 1738
        self.logic.onEvent(
        	evt,
        	type,
        	widget,
        	rowId,
        	cellId
        )
    }
}

function onFontLoaded(file, target, font) {
    // item 3748
    CallTrace.add("font ready", [file])
    // item 3747
    var face = Utils.buildFontFace(
    	font.italic,
    	font.bold,
    	font.family
    )
    // item 1269
    console.log(
    	"Font ready",
    	file,
    	face
    )
    // item 3746
    HtmlUtils.fontFaceLoaded(face)
    // item 1270
    globs.loadedFonts[file] = true
    scheduleNextStateAfter(target, null, 200)
}

function onFontNotLoaded(file, target) {
    // item 3727
    console.log(
    	"Font NOT loaded",
    	file
    )
    // item 3728
    CallTrace.add("font NOT loaded", [file])
    scheduleNextStateAfter(target, null, 200)
}

function onInitCompleted() {
    // item 695
    display("loading", "none")
    display("wide", "block")
    // item 3956
    globs.initCompleted = true
    // item 696
    onResize()
}

function onIsPublicChange() {
    // item 1797
    var div = get("access_is_public_check")
    // item 1798
    getMachine().togglePublic()
}

function onPassDown(evt) {
    var _sw28780000_ = 0;
    // item 28780000
    _sw28780000_ = evt.keyCode;
    // item 28780001
    if (_sw28780000_ === 13) {
        // item 2886
        startLogon()
    } else {
        // item 28780002
        if (_sw28780000_ === 27) {
            // item 2887
            cancelMachine()
        }
    }
}

function onResize() {
    // item 103
    var border = 0
    // item 102
    var top = border
    var left = border
    var width = HtmlUtils.width() - border * 2
    var height = HtmlUtils.height() - border * 2
    // item 104
    globs.widgets.resizeWidget(
    	globs.root,
    	left,
    	top,
    	width,
    	height
    )
    // item 1565
    resizeCentral()
    // item 105
    //resizeCentral()
}

function onSignupError(data) {
    // item 3033
    var message = makeErrorMessage(data)
    // item 3031
    HtmlUtils.setText("signup_status", message)
    // item 3034
    resizeCentral()
    // item 3032
    hideWorking()
}

function onSignupSuccess(data) {
    // item 3025
    getMachine().signup(data)
}

function onStateChange(state) {
    // item 3957
    if (globs.initCompleted) {
        // item 1466
        killCentral()
        hidePopup()
        hidePopup()
        hideHelp()
        // item 1471
        Nav.onStateChange(state)
    }
}

function onUserDown(evt) {
    var _sw28630000_ = 0;
    // item 28630000
    _sw28630000_ = evt.keyCode;
    // item 28630001
    if (_sw28630000_ === 13) {
        // item 2871
        get("password_edit").focus()
    } else {
        // item 28630002
        if (_sw28630000_ === 27) {
            // item 2872
            cancelMachine()
        }
    }
}

function orderResize() {
    // item 109
    var existing = globs.resizeTimer
    // item 110
    if (existing) {
        // item 113
        clearTimeout(existing)
    }
    // item 116
    var callback = function() {
    	globs.resizeTimer = null
    	onResize()
    }
    // item 114
    var timer = setTimeout(
    	callback,
    	ResizeTimeout,
    	"orderResize"
    )
    // item 115
    globs.resizeTimer = timer
}

function pad1(text) {
    // item 2250
    if (text.length == 1) {
        // item 2253
        text = "0" + text
    }
    // item 2254
    return text
}

function panic(data) {
    // item 1635
    var rawMessage = Utils.makeErrorMessage(data)
    // item 1636
    var message = translate(rawMessage)
    // item 1633
    var url, lineNumber
    var column, errorObj
    // item 1634
    url = null
    lineNumber = null
    column = null
    errorObj = null
    // item 1629
    if (data.name == "Error") {
        // item 1632
        errorObj = data
    }
    // item 1617
    if (shouldReport(rawMessage)) {
        // item 1616
        reportError(
        	message,
        	url,
        	lineNumber,
        	column,
        	errorObj
        )
        // item 1615
        pagePanic(message)
    } else {
        // item 1638
        if (rawMessage == "ERR_NOT_LOGGED_ON") {
            // item 1623
            var url = "/logon?target=" +
             getMyUrl()
            // item 1624
            goToUrl(url)
        } else {
            // item 1615
            pagePanic(message)
        }
    }
}

function panicOnFont(data, font) {
    // item 3731
    var error = makeErrorMessage(data)
    // item 3733
    if (font) {
        // item 3736
        error += (" family:" + font.family)
        error += (" italic:" + font.italic)
        error += (" bold:" + font.bold)
    }
    // item 1227
    panic(error)
}

function placeFeedback(right) {
    // item 1440
    var button = get("feedback")
    button.style.right = right + "px"
}

function positionSearchResults() {
    // item 4310
    var popup = globs.search.popup
    // item 4296
    var widget = get(globs.search.widgetId)
    // item 4295
    HtmlUtils.showUnder(
    	widget,
    	popup
    )
}

function preventQuestion() {
    // item 3062
    window.onbeforeunload = null
}

function promiseError(ex) {
    // item 1263
    onError(
    	ex.message,
    	ex.fileName,
    	ex.lineNumber,
    	null,
    	ex
    )
}

function pushState(onState, title, url) {
    // item 1472
    Nav.pushState(
    	onState,
    	title,
    	window.location.origin + url
    )
}

function pushTempIfMobile() {
    // item 2420
    if ((globs.wide) || (globs.isTryMe)) {
        
    } else {
        // item 2423
        pushTempState()
    }
}

function pushTempState() {
    // item 3133
    var state = {
    	type: "tmp"
    }
    // item 3134
    //Nav.pushState(null, "", "")
}

function registerEvent(div, widget, eventName) {
    // item 1594
    var fullname = "on" + eventName
    // item 1595
    var action = function(evt) {
    	onEvent(evt, eventName, widget)
    }
    // item 1597
    div[fullname] = wrapException(action, "registerEvent")
}

function registerShortcuts() {
    // item 2445
    bindKey(["escape"], onEscape)
    bindKey(["enter"], onEnter)
    bindKey(["mod+enter"], onCtrlEnter)
    bindKey(["backspace", "del"], onDeleteKey)
    // item 3568
    bindKey(["space"], startPan, "keydown")
    bindKey(["space"], endPan, "keyup")
    // item 3392
    bindKey(["mod+f"], focusSearch)
    // item 2446
    bindEditor(["mod+z"], onCtrlZ)
    bindEditor(["mod+y"], onCtrlY)
    bindEditor(["mod+a"], onCtrlA)
    // item 2448
    var editor = getEditor()
    // item 2451
    bindEditor("f2", startEdit)
    // item 2447
    bindEditor("mod+c", editor.copy)
    bindEditor("mod+x", editor.cut)
    bindEditor("mod+v", editor.paste)
    // item 2452
    bindEditor("up", function() {editor.arrowUp(false, false, false)})
    bindEditor("mod+up", function() {editor.arrowUp(true, false, false)})
    bindEditor("shift+up", function() {editor.arrowUp(false, true, false)})
    bindEditor("alt+up", function() {editor.arrowUp(false, false, true)})
    // item 2453
    bindEditor("down", function() {editor.arrowDown(false, false, false)})
    bindEditor("mod+down", function() {editor.arrowDown(true, false, false)})
    bindEditor("shift+down", function() {editor.arrowDown(false, true, false)})
    bindEditor("alt+down", function() {editor.arrowDown(false, false, true)})
    // item 2454
    bindEditor("left", function() {editor.arrowLeft(false, false, false)})
    bindEditor("mod+left", function() {editor.arrowLeft(true, false, false)})
    bindEditor("shift+left", function() {editor.arrowLeft(false, true, false)})
    bindEditor("alt+left", function() {editor.arrowLeft(false, false, true)})
    // item 2455
    bindEditor("right", function() {editor.arrowRight(false, false, false)})
    bindEditor("mod+right", function() {editor.arrowRight(true, false, false)})
    bindEditor("shift+right", function() {editor.arrowRight(false, true, false)})
    bindEditor("alt+right", function() {editor.arrowRight(false, false, true)})
    // item 2449
    bindAddItem("a", "action")
    bindAddItem("q", "question")
    bindAddItem("l", "foreach")
    bindAddItem("n", "insertion")
    bindAddItem("f", "shelf")
    bindAddItem("m", "comment")
    // item 2450
    bindAddItem("s", "select")
    bindAddItem("c", "case")
    bindAddItem("b", "branch")
    bindAddItem("r", "raction")
}

function removeAdmin(evt, type, widget, user, cellId) {
    // item 1881
    if (cellId == 0) {
        // item 1841
        getWidget("removeAdmin").remove(user)
        // item 1885
        resizeCentral()
        // item 2769
        var msg = {
        	role: "admin",
        	user: user
        }
        // item 2768
        getMachine().removeUser(msg)
    }
}

function removeEmpty() {
    // item 4283
    var popup = globs.search.popup
    // item 4252
    if (globs.search.empty) {
        // item 4255
        popup.removeChild(globs.search.empty)
        // item 4256
        globs.search.empty = null
    }
}

function removeLimit() {
    // item 2131
    var url = "/buy"
    // item 3972
    if (trialAllowed()) {
        // item 4014
        if (globs.plan == "team") {
            // item 3975
            url = "/trial"
        } else {
            // item 4017
            url = "/prices"
        }
    }
    // item 2137
    var query = []
    // item 2128
    if (globs.plan) {
        // item 2127
        query.push("product=" + globs.plan)
    }
    // item 2134
    if (globs.ref) {
        // item 2133
        query.push("ref=" + globs.ref)
    }
    // item 2138
    if (query.length == 0) {
        
    } else {
        // item 2141
        var qstring = query.join("&")
        url += ("?" + qstring)
    }
    // item 2142
    goToUrl(url)
}

function removeReader(evt, type, widget, user, cellId) {
    // item 1888
    if (cellId == 0) {
        // item 1886
        getWidget("removeReader").remove(user)
        // item 1892
        resizeCentral()
        // item 2763
        var msg = {
        	role: "read",
        	user: user
        }
        // item 1891
        getMachine().removeUser(msg)
    }
}

function removeWriter(evt, type, widget, user, cellId) {
    // item 1895
    if (cellId == 0) {
        // item 1893
        getWidget("removeWriter").remove(user)
        // item 1899
        resizeCentral()
        // item 2767
        var msg = {
        	role: "write",
        	user: user
        }
        // item 2765
        getMachine().removeUser(msg)
    }
}

function reportError(errorMsg, url, lineNumber, column, errorObj) {
    // item 53
    var stack = null
    // item 50
    if (errorObj) {
        // item 54
        stack = errorObj.stack
    }
    // item 44
    console.log(errorMsg, url, lineNumber, column, errorObj)
    // item 45
    DTools.print(errorMsg, errorObj, url, lineNumber)
    // item 46
    var trace = CallTrace.reset()
    // item 47
    console.log(trace)
    // item 48
    var crashData = {
    	type: "crash",
    	errorMsg: errorMsg,
    	errorUrl: url,
    	errorObj: errorObj,
    	trace: trace,
    	stack: stack,
    	clientDiagram: self.logic.getDiagram()
    }
    // item 49
    sendFeedbackCore(
    	crashData,
    	function(){},
    	function(){}
    )
}

function resizeCentral() {
    // item 1518
    var id = globs.central
    // item 1562
    if (id) {
        // item 1524
        var topMargin = 10
        // item 1522
        var width = 320
        var height = window.innerHeight - topMargin
        var winWidth = window.innerWidth
        // item 1523
        var x = Math.floor((winWidth - width) / 2)
        var y = topMargin
        // item 1877
        var requested = getWidget(id).measureHeight(width)
        // item 1878
        height = Math.min(height, requested)
        // item 1561
        globs.widgets.resizeWidget(
        	id,
        	x,
        	y,
        	width,
        	height
        )
    }
}

function resizeEditor() {
    // item 840
    var rect = this.rect
    // item 839
    globs.editor.resize(
    	rect.left,
    	rect.top,
    	rect.width,
    	rect.height
    )
}

function runIfEditorVisible(evt, method) {
    // item 2567
    if (isEditorOn()) {
        // item 2565
        method(evt)
        // item 2566
        HtmlUtils.preventDefaultHandling(evt)
    }
}

function saveAccess() {
    // item 2762
    sendToCentralMachine(null)
}

function saveAsPng(zoom) {
    // item 2216
    var exportCanvas = make(
    	document.body,
    	"canvas"
    )
    // item 2215
    var image = getEditor().exportPng(exportCanvas, zoom)
    // item 2225
    if (globs.wide) {
        // item 2221
        var filename = getDateString() + ".png"
        // item 2220
        var success = function(data) {
        	hideWorking()
        	var url = "/api/download/" + data.download_id
        	window.location.href = url
        }
        // item 2222
        showWorking()
        // item 2219
        HtmlUtils.sendRawPost(
        	"/api/download/" + filename,
        	image,
        	success,
        	panic
        )
    } else {
        // item 2217
        var name = makePngName()
        // item 2218
        var w = window.open('about:blank', "");
        if (!w) return
        
        w.document.write("<img src='" + image + "' alt='" + name + "'/>");
    }
    // item 2228
    document.body.removeChild(exportCanvas)
}

function saveAsSvg() {
    // item 2235
    var filename = getDateString() + ".svg"
    // item 2232
    var image = getEditor().exportSvg()
    // item 2237
    var fonts = getEditor().getFontsFromEditor()
    // item 2238
    var data = {
    	filename: filename,
    	image: image,
    	fonts: fonts
    }
    // item 2234
    var success = function(data) {
    	hideWorking()
    	var url = "/api/download/" + data.download_id
    	window.location.href = url
    }
    // item 2236
    showWorking()
    // item 2233
    HtmlUtils.sendPost(
    	"/api/download_svg",
    	data,
    	success,
    	panic
    )
}

function saveMobileInput() {
    // item 3106
    var isAsync = globs.mobileIsAsync
    var onSave = globs.mobileOnSave
    var validate = globs.mobileValidate
    // item 3111
    var text = get("mob_input_edit").value
    // item 3107
    if (validate) {
        // item 3110
        var error = validate(text)
        // item 3112
        if (error) {
            // item 3115
            setMobileInputError(translate(error))
        } else {
            // item 3117
            if (isAsync) {
                
            } else {
                // item 3120
                hideCentral()
            }
            // item 3116
            onSave(text)
        }
    } else {
        // item 3117
        if (isAsync) {
            
        } else {
            // item 3120
            hideCentral()
        }
        // item 3116
        onSave(text)
    }
}

function saveStatus(status) {
    
}

function saveUserSettings(settings) {
    // item 1391
    self.logic.saveUserSettings(settings)
}

function schedule(target, ms) {
    // item 2435
    var callback = function() {
    	target.timeout()
    }
    // item 2434
    return setTimeout(
    	callback,
    	ms,
    	"schedule"
    )
}

function scheduleClipboardClear() {
    // item 1369
    var CLIPBOARD_TTL = 5 * 60 * 1000
    // item 1368
    var timer = Math.floor(Math.random() * 100000).toString()
    // item 1367
    globs.clipboardTimer = timer
    // item 1366
    window.setTimeout(
    	function() { onClearClipboard(timer) },
    	CLIPBOARD_TTL
    )
}

function scheduleNextState(machine, data) {
    // item 1276
    scheduleNextStateAfter(
    	machine,
    	data,
    	1
    )
}

function scheduleNextStateAfter(machine, data, delay) {
    // item 3040
    var delayed = function() {
    	machine.onData(data)
    }
    // item 3041
    window.setTimeout(delayed, delay)
}

function searchUsers() {
    // item 2047
    var search = getWidget("searchUsers")
    var value = search.getValue()
    // item 2048
    value = value.trim()
    // item 2770
    getMachine().onInput(value)
}

function selectDemoButton(id) {
    // item 41670001
    var _ind4167 = 0;
    var _col4167 = globs.demo.buttons;
    var _keys4167 = Object.keys(_col4167); 
    var _len4167 = _keys4167.length;
    while (true) {
        // item 41670002
        if (_ind4167 < _len4167) {
            
        } else {
            break;
        }
        // item 41670004
        var buttonId = _keys4167[_ind4167]; var rec = _col4167[buttonId];
        // item 4169
        var div = get(buttonId)
        div.style.background = DarkBackground
        // item 41670003
        _ind4167++;
    }
    // item 4173
    var div = get(id)
    div.style.background = "black"
    // item 4172
    var rec = globs.demo.buttons[id]
    // item 4171
    var image = makeImagePath(rec.image)
    // item 4170
    get("demoViewport_img").src = image
}

function sendDelete(url, target) {
    // item 796
    CallTrace.add("sendDelete", [url])
    // item 794
    var success = wrapException(function(data) {
    	target.onData(data)
    }, "sendDelete:success")
    // item 795
    var error = wrapException(function(data) {
    	sendError(target, data)
    }, "sendDelete:error")
    // item 797
    HtmlUtils.sendRequest(
    	"DELETE",
    	url,
    	{},
    	success,
    	error
    )
}

function sendError(machine, error) {
    // item 3326
    if (machine.onError) {
        // item 3329
        machine.onError(error)
    }
}

function sendFeedback() {
    // item 2273
    var title = translate("MES_SEND_FEEDBACK_TO_DEV")
    // item 2274
    var onSave = function(name) {
    	doSendFeedback(
    		name
    	)
    }
    // item 2275
    showInputBox(
    	true,
    	translate(title),
    	"",
    	onSave,
    	enforceNotEmpty,
    	false
    )
}

function sendFeedbackCore(data, success, error) {
    // item 62
    data.url = window.location.href
    // item 63
    var current = self.logic.getCurrent()
    data.screen = current.screen
    data.spaceId = current.spaceId
    data.folderId = current.folderId
    data.doc_type = current.type
    // item 60
    var url = "/api/feedback/"
    // item 61
    HtmlUtils.sendPost(
    	url,
    	data,
    	success,
    	error
    )
}

function sendGet(url, target) {
    // item 779
    CallTrace.add("sendGet", [url])
    // item 2748
    var requestId = Utils.randomString(10)
    target.requestId = requestId
    // item 776
    var success = wrapException(function(data) {
    	onData(target, data, requestId)
    }, "sendGet:success")
    // item 777
    var error = wrapException(function(data) {
    	sendError(target, data)
    }, "sendGet:error")
    // item 778
    HtmlUtils.sendGet(
    	url,
    	success,
    	error
    )
}

function sendPost(url, payload, target) {
    // item 788
    CallTrace.add("sendPost", [url])
    // item 2759
    var requestId = Utils.randomString(10)
    target.requestId = requestId
    // item 2758
    var success = wrapException(function(data) {
    	onData(target, data, requestId)
    }, "sendPost:success")
    // item 786
    var error = wrapException(function(data) {
    	sendError(target, data)
    }, "sendPost:error")
    // item 787
    HtmlUtils.sendPost(
    	url,
    	payload,
    	success,
    	error
    )
}

function sendPut(url, payload, target) {
    // item 806
    CallTrace.add("sendPut", [url])
    // item 2761
    var requestId = Utils.randomString(10)
    target.requestId = requestId
    // item 2760
    var success = wrapException(function(data) {
    	onData(target, data, requestId)
    }, "sendPut:success")
    // item 804
    var error = wrapException(function(data) {
    	sendError(target, data)
    }, "sendPut:error")
    // item 805
    HtmlUtils.sendRequest(
    	"PUT",
    	url,
    	payload,
    	success,
    	error
    )
}

function sendToCentralMachine(message) {
    // item 2602
    var count = globs.centralMachines.length
    // item 1730
    if (count == 0) {
        
    } else {
        // item 2601
        var machine = globs.centralMachines[count - 1]
        // item 1733
        machine.onData(message)
    }
}

function setAccessError(message) {
    // item 2732
    var label = get("access_error")
    // item 2733
    HtmlUtils.setDivText(
    	label,
    	message
    )
    // item 2734
    resizeCentral()
}

function setButtonStyle(div, color, background, padding) {
    // item 522
    var style = div.style
    div.className = "common_button"
    noContext(div)
    style.cursor = "pointer"
    // item 523
    style.display = "inline-block"
    style.color = color
    style.background = background
    style.padding = padding
    style.borderRadius = BorderRadius
}

function setDashboardProjects(projects) {
    // item 3901
    var widget = this
    // item 3877
    widget.projects.innerHTML = ""
    // item 3878
    var table = make(widget.projects, "table")
    // item 38790001
    var _ind3879 = 0;
    var _col3879 = projects;
    var _len3879 = _col3879.length;
    while (true) {
        // item 38790002
        if (_ind3879 < _len3879) {
            
        } else {
            break;
        }
        // item 38790004
        var project = _col3879[_ind3879];
        // item 3876
        addProjectRow(table, project)
        // item 38790003
        _ind3879++;
    }
}

function setDashboardRecent(recent) {
    // item 3913
    var widget = this
    // item 3909
    widget.recent.innerHTML = ""
    // item 3910
    var table = make(widget.recent, "table")
    // item 39110001
    var _ind3911 = 0;
    var _col3911 = recent;
    var _len3911 = _col3911.length;
    while (true) {
        // item 39110002
        if (_ind3911 < _len3911) {
            
        } else {
            break;
        }
        // item 39110004
        var item = _col3911[_ind3911];
        // item 3908
        addRecentRow(table, item)
        // item 39110003
        _ind3911++;
    }
}

function setFoundUsers(users) {
    // item 2745
    var rows = []
    // item 27420001
    var _ind2742 = 0;
    var _col2742 = users;
    var _len2742 = _col2742.length;
    while (true) {
        // item 27420002
        if (_ind2742 < _len2742) {
            
        } else {
            break;
        }
        // item 27420004
        var user = _col2742[_ind2742];
        // item 2744
        addIconText(
        	rows,
        	"user-s.png",
        	user
        )
        // item 27420003
        _ind2742++;
    }
    // item 2739
    getWidget("foundUser").setItems(rows)
    // item 2747
    resizeCentral()
}

function setInputBoxError(message) {
    // item 1185
    if (globs.wide) {
        // item 1184
        InputBox.setError(message)
    } else {
        // item 1188
        setMobileInputError(message)
    }
}

function setLsItem(key, value) {
    // item 1349
    try {
    	window.localStorage.setItem(key, value)
    } catch (e) {
    	globs.clip[key] = value
    }
}

function setMobileHeader(text) {
    // item 3092
    if (globs.wide) {
        
    } else {
        // item 3095
        var widgets = [
        	"folderLabel",
        	"diaLabel",
        	"folderLabelRo",
        	"diaLabelRo",
        	"folderLabelNu",
        	"diaLabelNu"
        ]
        // item 30960001
        var _ind3096 = 0;
        var _col3096 = widgets;
        var _len3096 = _col3096.length;
        while (true) {
            // item 30960002
            if (_ind3096 < _len3096) {
                
            } else {
                break;
            }
            // item 30960004
            var id = _col3096[_ind3096];
            // item 3098
            HtmlUtils.setText(id, text)
            // item 30960003
            _ind3096++;
        }
    }
}

function setMobileInputError(message) {
    // item 3126
    HtmlUtils.setText(
    	"mobile_input_error",
    	message
    )
    // item 3127
    resizeCentral()
}

function setTimeout(delayed, delay, src) {
    // item 769
    var wrapped = wrapException(delayed, src)
    // item 770
    return window.setTimeout(wrapped, delay)
}

function setTitle(title) {
    // item 826
    document.title = title
}

function shouldReport(message) {
    // item 1608
    if ((((((((message == "ERR_ACCESS_DENIED") || (message == "ERR_BAD_PATH")) || (message == "ERR_NOT_FOUND")) || (message == "ERR_COMMUNICATION")) || (message == "ERR_DIAGRAM_LIMIT")) || (message == "ERR_USER_LIMIT")) || (message == "ERR_SPACE_LIMIT")) || (message == "ERR_NOT_LOGGED_ON")) {
        // item 1607
        return false
    } else {
        // item 1606
        return true
    }
}

function show(id, display) {
    // item 1644
    var div = get(id)
    showDiv(div, display)
}

function showAccessScreen(access, machine) {
    // item 2713
    var cancel = {
    	signalId: "cancelMachine",
    	type: "text_button",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center",
    		borderRadius: "5px"
    	}
    }
    // item 2714
    var save = {
    	signalId: "saveAccess",
    	type: "text_button",
    	text: "MES_SAVE",
    	style: {
    		color: "white",
    		background: "coral",
    		padding: "12px",
    		textAlign: "center",
    		borderRadius: "5px"
    	}
    }
    // item 2709
    var buttons = {
    	type: "hdock",
    	height: 40,
    	lefts: [cancel],
    	rights: [save]
    }
    // item 2711
    var label = {
    	type: "custom",
    	builder: function(div) {
    		var top = make(div, "div")
    		HtmlUtils.setDivText(top, translate("MES_ACCESS_TO"))
    		top.style.textAlign = "center"
    		var name = make(div, "div")
    		HtmlUtils.setDivText(name, access.spaceId)
    		name.style.textAlign = "center"
    		name.style.fontWeight = "bold"
    	}
    }
    // item 2710
    var error = {
    	type: "custom",
    	id: "access_error",
    	builder: function(div) {
    		div.style.color = "#900000"
    	}
    }
    // item 2717
    var check = {
    	type: "custom",
    	id: "access_is_public",
    	builder: buildNormalCheckbox,
    	text: "All can read",
    	value: access.isPublic,
    	onchange: onIsPublicChange
    }
    // item 2718
    var readHead = makeAccessSubheader("Read", "addReader")
    // item 2723
    var writeHead = makeAccessSubheader("Write", "addWriter")
    // item 2724
    var adminHead = makeAccessSubheader("Admin", "addAdmin")
    // item 2712
    var read = createUserList("removeReader", access.roles.read)
    // item 2719
    var write = createUserList("removeWriter", access.roles.write)
    // item 2720
    var admin = createUserList("removeAdmin", access.roles.admin)
    // item 2721
    var topPage = {
    	type: "page",
    	padding: 10,
    	kids: [buttons, label, error, check]
    }
    // item 2716
    var bottomPage = {
    	type: "page",
    	padding: 10,
    	kids: [readHead, read, 
    	writeHead, write, 
    	adminHead, admin]
    }
    // item 2722
    var root = {
    	type: "vdock",
    	top: topPage,
    	center: bottomPage
    }
    // item 2715
    addCentral(root, machine)
}

function showAddUserScreen(machine) {
    // item 2691
    var label = {
    	type: "label",
    	text: "MES_ADD_USER",
    	style: {
    		textAlign: "center"
    	}
    }
    // item 2694
    var cancel = {
    	signalId: "cancelMachine",
    	type: "text_button",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center",
    		borderRadius: "5px"
    	}
    }
    // item 2693
    var buttons = {
    	type: "hdock",
    	height: 40,
    	lefts: [cancel],
    	rights: []
    }
    // item 2689
    var search = {
    	id: "searchUsers",
    	type: "search",
    	height: 30,
    	width: 300
    }
    // item 2698
    var list = {
    	id: "foundUser",
    	type: "list_grid",
    	noScroll: true,
    	columns: [
    		{type:"image", width:"36px", clickable:false},
    		{type:"text", width:"100%"}
    	]
    }
    // item 2696
    var topPage = {
    	type: "page",
    	padding: 10,
    	kids: [buttons, label, search]
    }
    // item 2695
    var bottomPage = {
    	type: "page",
    	padding: 10,
    	kids: [list]
    }
    // item 2697
    var root = {
    	type: "vdock",
    	top: topPage,
    	center: bottomPage
    }
    // item 2690
    addCentral(root, machine)
    // item 2692
    getWidget("searchUsers").focus()
}

function showChooseTypeDialog(centralMachine) {
    // item 1576
    var lab = {
    	type: "wlabel",
    	text: "Choose diagram type",
    	textAlign: "center",
    	style: {
    		fontWeight: "bold",
    		fontSize: "120%"
    	}
    }
    // item 1574
    var drakon = {
    	signalId: "createDrakon",
    	type: "custom",
    	builder: makeBigPictureButton,
    	text: "DRAKON diagram",
    	desc: "DRAKON diagram desc",
    	image: "logo-drakon.png",
    	width: 90,
    	height: 100
    }
    // item 3592
    var mind = {
    	signalId: "createMind",
    	type: "custom",
    	builder: makeBigPictureButton,
    	text: "GRAF mindmap",
    	desc: "GRAF mindmap desc",
    	image: "logo-graf.png",
    	width: 117,
    	height: 77
    }
    // item 1577
    var free = {
    	signalId: "createFree",
    	type: "custom",
    	builder: makeBigPictureButton,
    	text: "Free-form diagram",
    	desc: "Free-form diagram desc",
    	image: "logo-free.png",
    	width: 117,
    	height: 70
    }
    // item 1598
    var cancel = {
    	signalId: "cancelMachine",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 1570
    var d3 = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 5,
    	kids: [lab, drakon, mind, free, cancel]
    //	kids: [lab, drakon, free, cancel]
    }
    // item 1571
    createCentral(d3, centralMachine)
}

function showContextMenu(x, y, menu, onBackground, item) {
    // item 17450001
    var _ind1745 = 0;
    var _col1745 = menu.rows;
    var _len1745 = _col1745.length;
    while (true) {
        // item 17450002
        if (_ind1745 < _len1745) {
            
        } else {
            break;
        }
        // item 17450004
        var it = _col1745[_ind1745];
        // item 1749
        var itemId = it.id || "<none>"
        // item 1747
        var wrapped = wrapException(
        	it.code,
        	"context-menu:" + itemId
        )
        // item 1748
        it.code = wrapped
        // item 17450003
        _ind1745++;
    }
    // item 1744
    ContextMenu.show(
    	x,
    	y,
    	menu,
    	onBackground
    )
    // item 3602
    var extended = {}
    globs.extended = extended
    // item 3593
    if (((item) && (!(globs.tryMe))) && (canDefQueryFrom(item))) {
        // item 3598
        var lines = getItemLines(item.content)
        // item 3599
        if (lines.length == 0) {
            
        } else {
            // item 3600
            var queryId = Utils.randomString(10)
            // item 3603
            extended.urls = getItemUrls(item.content)
            extended.queryId = queryId
            extended.item = item
            // item 3648
            var url = "/api/def_query"
            var current = self.logic.getCurrent()
            var spaceId = current.spaceId
            // item 3647
            var onSuccess = function(data) {
            	onDefResult(
            		x,
            		y,
            		queryId,
            		current,
            		data
            	)
            }
            // item 3650
            var body = {
            	space_id: spaceId,
            	lines: lines
            }
            // item 3651
            var target = {
            	onData: onSuccess,
            	onError: function(){}
            }
            // item 3649
            sendPost(
            	url,
            	body,
            	target
            )
        }
    }
}

function showDemo(type) {
    // item 4099
    var videoMargin = 5
    // item 4098
    var panelWidth = 200
    var videoWidth = 600
    var videoHeight = 500
    var lowerHeight = 50
    // item 4073
    var upperHeight = videoMargin * 2 + videoHeight
    var width = videoMargin * 2 + 
    	panelWidth + videoWidth
    var height = lowerHeight + upperHeight
    // item 4200
    destroyDemoWindow()
    // item 4038
    var root = get("demo")
    // item 4053
    root.style.display = "inline-block"
    root.style.position = "fixed"
    // item 4052
    var back = make(root, "div")
    // item 4070
    back.style.background = "black"
    back.style.opacity = 0.3
    //back.style.zIndex = 25
    // item 4047
    back.onclick = wrapException(
    	hideDemo,
    	"hideDemo"
    )
    // item 4069
    showFullscreen(back)
    // item 4048
    var dialog = make(root, "div")
    // item 4062
    showInCenter(dialog, width, height)
    // item 4100
    //dialog.style.zIndex = 26
    // item 4176
    var show = !isDemoDiscarded()
    // item 4080
    var check = {
    	id: "demoShowOnStart",
    	type: "custom",
    	text: "MES_SHOW_ON_START",
    	value: show,
    	builder: buildNormalCheckbox,
    	hPadding:10, vPadding:15
    }
    // item 4081
    var close = {
    	type: "text_button",
    	text: "MES_CLOSE",
    	signalId: "hideDemo",
    	style: {
    		background: "Coral",
    		color: "white",
    		padding: "6px",
    		textAlign: "center",
    		borderRadius: "5px"
    	},
    	hPadding:10, vPadding:10
    }
    // item 4076
    var bottomHalf = {
    	type: "hdock",
    	lefts: [],
    	rights: [close, check],
    	height: lowerHeight,
    	padding:10
    }
    // item 4125
    var items
    // item 4122
    if (type == "drakon") {
        // item 4126
        items = makeDemoListDrakon()
    } else {
        // item 4127
        items = makeDemoListMind()
    }
    // item 4133
    var buttons = makeDemoButtons(items)
    // item 4134
    var buttonsPanel = {
    	type: "page",
    	kids: buttons,
    	padding: 5,
    	width: panelWidth,
    	style: {background:"#d0d0ff"},
    	hPadding:videoMargin
    }
    // item 4096
    var viewport = {
    	type: "custom",
    	id: "demoViewport",
    	builder: buildImageWidget,
    	width: videoWidth,
    	height: videoHeight,
    	hPadding:videoMargin, vPadding:videoMargin
    }
    // item 4074
    var topHalf = {
    	type: "hdock",
    	height: upperHeight,
    	lefts: [viewport, buttonsPanel],
    	rights: []
    }
    // item 4075
    var node = {
    	type: "vpanel",
    	kids: [topHalf, bottomHalf]
    }
    // item 4071
    var id = globs.widgets.createWidget(
    	dialog,
    	node
    )
    // item 4085
    globs.demo.widgetId = id
    // item 4072
    globs.widgets.resizeWidget(
    	id,
    	0,
    	0,
    	width,
    	height
    )
    // item 4174
    selectDemoButton("demoButton_1")
}

function showDiv(div, display) {
    // item 1559
    div.style.display = display
}

function showFullscreen(div) {
    // item 4068
    div.style.display = "inline-block"
    div.style.position = "fixed"
    div.style.left = "0px"
    div.style.right = "0px"
    div.style.top = "0px"
    div.style.bottom = "0px"
}

function showHelp() {
    // item 2316
    if (isDrakon()) {
        // item 2319
        showMany("drakon_only", "block")
    } else {
        // item 2320
        showMany("drakon_only", "none")
    }
    // item 3951
    if (isMind()) {
        // item 3954
        showMany("mind_only", "block")
    } else {
        // item 3955
        showMany("mind_only", "none")
    }
    // item 2313
    if (globs.wide) {
        // item 2312
        show("help_wide", "block")
    } else {
        // item 2322
        pushTempIfMobile()
        // item 2321
        show("help_narrow", "block")
    }
    // item 3410
    globs.helpOn = true
}

function showInCenter(dialog, width, height) {
    // item 4061
    var hw = Math.floor(width / 2).toString()
    var hh = Math.floor(height / 2).toString()
    // item 4059
    dialog.style.display = "inline-block"
    dialog.style.position = "fixed"
    // item 4060
    dialog.style.background = "white"
    dialog.style.left = "calc(50% - " + hw + "px)"
    dialog.style.top = "calc(50vh - " + hh + "px)"
    dialog.style.width = width + "px"
    dialog.style.height = height + "px"
}

function showInputBox(isAsync, header, old, onSave, validate, enterSave, x, y) {
    // item 1170
    globs.enterSave = enterSave
    // item 1166
    if (globs.wide) {
        // item 1164
        InputBox.show(
        	isAsync,
        	header,
        	old,
        	onSave,
        	validate,
        	x,
        	y
        )
    } else {
        // item 1169
        showMobileInput(
        	isAsync,
        	header,
        	old,
        	onSave,
        	validate
        )
    }
}

function showLogon(machine) {
    // item 2893
    var ui = buildLogonGui()
    // item 2894
    addCentral(ui, machine)
    // item 2895
    get("username_edit").onkeydown = onUserDown
    get("password_edit").onkeydown = onPassDown
}

function showLogonSignup(machine) {
    // item 2822
    var titleLabel = {
    	type: "wlabel",
    	text: "MES_SAVE_OWN",
    	textAlign: "center",
    	style: {
    		fontSize: "110%",
    		fontWeight: "bold"
    	}
    }
    // item 2823
    var login = {
    	signalId: "login",
    	type: "wbutton",
    	text: "MES_LOGIN",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 2825
    var signup = {
    	signalId: "signup",
    	type: "wbutton",
    	text: "MES_SIGNUP",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 2826
    var cancel = {
    	type: "custom",
    	builder: function(div) {
    		div.style.textAlign = "center"
    		div.style.padding = "10px"
    		var a = make(div, "a")
    		HtmlUtils.setDivText(a, translate("MES_CANCEL"))
    		a.onclick = cancelMachine
    		a.href="javascript:;"
    	}
    }
    // item 2819
    var root = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 10,
    	kids: [titleLabel, signup, login, cancel]
    }
    // item 2824
    addCentral(root, machine)
}

function showMainMenu(menus) {
    // item 2343
    var main = createPopup()
    main.style.opacity = 0
    main.style.transform = "translate(0px, -50px)"
    main.style.background = "white"
    main.style.color = "black"
    // item 3744
    main.className = "popup appearing"
    // item 2344
    var header = make(main, "div")
    header.style.paddingLeft = "5px"
    header.style.paddingRight = "5px"
    header.style.paddingTop = "5px"
    // item 2345
    var logo = make(header, "img")
    logo.draggable = false
    logo.width = 66
    logo.height = 66
    logo.src = getDrakosha()
    logo.style.verticalAlign = "middle"
    logo.style.cursor = "pointer"
    logo.onclick = hidePopup
    // item 2363
    if (globs.wide) {
        // item 2346
        var tlogo = make(header, "img")
        tlogo.draggable = false
        tlogo.width = 100
        tlogo.height = 40
        tlogo.src = getTextMenu()
        tlogo.style.verticalAlign = "middle"
    }
    // item 2350
    var close = make(header, "img")
    close.draggable = false
    close.width = 30
    close.height = 30
    close.src = makeImagePath("cross.png")
    close.className = "common_button"
    close.style["float"] = "right"
    close.onclick = hidePopup
    close.style.cursor = "pointer"
    close.style.background = DarkBackground
    close.style.verticalAlign = "middle"
    // item 2354
    if (globs.wide) {
        // item 2349
        var menusDiv = make(main, "table")
        menusDiv.style.marginRight = "2px"
        var row = make(menusDiv, "tr")
        // item 23470001
        var _ind2347 = 0;
        var _col2347 = menus;
        var _len2347 = _col2347.length;
        while (true) {
            // item 23470002
            if (_ind2347 < _len2347) {
                
            } else {
                break;
            }
            // item 23470004
            var menu = _col2347[_ind2347];
            // item 2352
            var td = make(row, "td")
            td.style.verticalAlign = "top"
            td.style.paddingLeft = "5px"
            td.style.paddingBottom = "4px"
            td.style.maxWidth="300px"
            // item 2353
            addMenuSection(
            	td,
            	menu
            )
            // item 23470003
            _ind2347++;
        }
    } else {
        // item 2357
        main.style.overflowY = "auto"
        // item 23590001
        var _ind2359 = 0;
        var _col2359 = menus;
        var _len2359 = _col2359.length;
        while (true) {
            // item 23590002
            if (_ind2359 < _len2359) {
                
            } else {
                break;
            }
            // item 23590004
            var menu = _col2359[_ind2359];
            // item 2361
            var section = make(main, "div")
            section.style.paddingLeft = "5px"
            section.style.paddingRight = "5px"
            section.style.paddingBottom = "4px"
            // item 2362
            addMenuSection(
            	section,
            	menu
            )
            // item 23590003
            _ind2359++;
        }
    }
    // item 2366
    pushTempIfMobile()
    // item 2351
    HtmlUtils.setPosCorrected(
    	0,
    	0,
    	main
    )
    // item 3745
    main.style.opacity = 1
    main.style.transform = "translate(0px, 0px)"
}

function showMany(className, display) {
    // item 2305
    display = display || "block"
    // item 2306
    var elements = document.getElementsByClassName(className)
    // item 23070001
    var _ind2307 = 0;
    var _col2307 = elements;
    var _len2307 = _col2307.length;
    while (true) {
        // item 23070002
        if (_ind2307 < _len2307) {
            
        } else {
            break;
        }
        // item 23070004
        var element = _col2307[_ind2307];
        // item 2304
        element.style.display = display
        // item 23070003
        _ind2307++;
    }
}

function showMobileInput(isAsync, header, old, onSave, validate) {
    // item 3081
    var cancel = {
    	signalId: "cancelMachine",
    	type: "text_button",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center",
    		borderRadius: "5px"
    	}
    }
    // item 3082
    var save = {
    	signalId: "saveMobileInput",
    	type: "text_button",
    	text: "MES_SAVE",
    	style: {
    		color: "white",
    		background: "coral",
    		padding: "12px",
    		textAlign: "center",
    		borderRadius: "5px"
    	}
    }
    // item 3100
    var header = {
    	type: "label",
    	text: header,
    	raw: true,
    	style: {fontSize: "80%"}
    }
    // item 3080
    var buttons = {
    	type: "hdock",
    	height: 40,
    	lefts: [cancel],
    	rights: [save],
    	center: header
    }
    // item 3085
    var error = {
    	type: "custom",
    	id: "mobile_input_error",
    	builder: function(div) {
    		div.style.color = "#900000"
    	}
    }
    // item 3083
    var edit = {
    	type: "custom",	
    	builder: function(div) {
    		var input = makeTextArea(div)
    		input.style.height = "180px"
    		input.value = old
    		input.focus()
    		input.select()
    		input.id = "mob_input_edit"
    	}
    }
    // item 3086
    var kids = [buttons, error, edit]
    // item 3084
    var root = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 10,
    	kids: kids
    }
    // item 3075
    createCentral(root, null)
    // item 3079
    globs.mobileInput = true
    globs.mobileIsAsync = isAsync
    globs.mobileOnSave = onSave
    globs.mobileValidate = validate
}

function showNotification(text) {
    // item 1434
    globs.pop.show(
    	translate(text)
    )
}

function showPopupList(parentId, items) {
    // item 1705
    var parentDiv = get(parentId)
    // item 1656
    new ToolTip(window, document).hideTooptip()
    // item 1655
    var div = createPopupList(items)
    // item 1654
    HtmlUtils.showUnder(parentDiv, div)
}

function showPopupListAt(x, y, items) {
    // item 1704
    new ToolTip(window, document).hideTooptip()
    // item 1703
    var div = createPopupList(items)
    // item 1702
    HtmlUtils.setPosCorrected(x, y, div)
}

function showShareScreen(spaceId, folderId, type, isPublic, isAdmin, machine) {
    // item 2179
    var url = buildUrlForFolder(
    	spaceId,
    	folderId
    )
    // item 2158
    var title
    // item 2155
    if (type == "folder") {
        // item 2160
        title = "MES_FOLDER_LINK"
    } else {
        // item 2159
        title = "MES_DIAGRAM_LINK"
    }
    // item 2154
    var titleLabel = {
    	type: "wlabel",
    	text: title,
    	textAlign: "center",
    	style: {
    		fontSize: "110%",
    		fontWeight: "bold"
    	}
    }
    // item 2171
    var edit = {
    	type: "custom",
    	builder: function(div) {
    		var input = makeTextArea(div)
    		input.value = url
    		input.focus()
    		input.select()
    	}
    }
    // item 2150
    var lab = {
    	type: "wlabel",
    	text: "MES_UNREGISTERED_CANT",
    	style: {
    		fontSize: "100%",
    		textAlign: "left"
    	}
    }
    // item 2161
    var access = {
    	signalId: "accessForShare",
    	type: "wbutton",
    	text: "MES_ACCESS",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 2151
    var cancel = {
    	signalId: "cancelMachine",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 2189
    var kids = [titleLabel, edit]
    // item 2190
    if (isPublic) {
        
    } else {
        // item 2193
        kids.push(lab)
    }
    // item 2194
    if (isAdmin) {
        // item 2197
        kids.push(access)
    }
    // item 2198
    kids.push(cancel)
    // item 2149
    var root = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 10,
    	kids: kids
    }
    // item 2148
    addCentral(root, machine)
}

function showSignup(machine) {
    // item 2998
    var ui = buildSignupGui()
    // item 2999
    addCentral(ui, machine)
    // item 3004
    enableSignupOk()
}

function showWorking() {
    // item 816
    display("working", "block")
}

function startEdit(evt) {
    // item 2583
    if (isEditorOn()) {
        // item 2587
        HtmlUtils.preventDefaultHandling(evt)
        // item 2586
        getEditor().startEdit()
    }
}

function startLogon() {
    // item 2907
    logonCtrl.logon(
    	"username_edit",
    	"password_edit",
    	"status",
    	globs.myHandlers.login
    )
}

function startPan() {
    // item 3584
    if ((globs.panning) || (!(isEditorOn()))) {
        
    } else {
        // item 3565
        getEditor().startPan()
        // item 3583
        globs.panning = true
    }
}

function startSignup() {
    // item 3017
    if ((onPremises) || (get("signup_agree").checked)) {
        // item 3011
        globs.signup = new Signup(
        	window, document, translate,
        	"signup_user", "signup_email",
        	"signup_password", "signup_password2",
        	"signup_status",
        	showWorking,
        	onSignupSuccess,
        	onSignupError,
        	false
        )
        // item 3016
        globs.signup.update = resizeCentral
        // item 3015
        globs.signup.signup("example")
    } else {
        // item 4372
        onSignupError({error:"MES_AGREE"})
    }
}

function suggest(message, plan, ref) {
    // item 2119
    var lab = {
    	type: "wlabel",
    	text: message,
    	style: {
    		fontSize: "100%",
    		textAlign: "left"
    	}
    }
    // item 2121
    var buy = {
    	signalId: "removeLimit",
    	type: "wbutton",
    	text: "MES_GET_BETTER_PRODUCT",
    	style: {
    		color: "white",
    		background: "Coral",
    		fontSize:"120%",
    		padding: "12px",
    		textAlign: "center",
    		fontWeight: "bold"
    	}
    }
    // item 2120
    var cancel = {
    	signalId: "hideCentral",
    	type: "wbutton",
    	text: "MES_CANCEL",
    	style: {
    		color: "white",
    		background: DarkBackground,
    		padding: "12px",
    		textAlign: "center"
    	}
    }
    // item 2118
    var root = {
    	type: "page",
    	style: {
    		background: "white"
    	},
    	padding: 10,
    	kids: [lab, buy, cancel]
    }
    // item 2132
    globs.plan = plan
    globs.ref = ref
    // item 2117
    createCentral(root, null)
}

function toSearchResults(groupId) {
    // item 3373
    globs.search.expanded = groupId
    // item 4342
    globs.search.popup.innerHTML = ""
    // item 4345
    if (groupId) {
        // item 4367
        globs.search.expandedList = null
        // item 4344
        var group = findSearchGroup(groupId)
        // item 4343
        addExpandedGroup(
        	group.items
        )
    } else {
        // item 4366
        globs.search.groupLists = {}
        // item 4357
        var defs = globs.search.defs
        // item 43480001
        var _ind4348 = 0;
        var _col4348 = defs;
        var _len4348 = _col4348.length;
        while (true) {
            // item 43480002
            if (_ind4348 < _len4348) {
                
            } else {
                break;
            }
            // item 43480004
            var group = _col4348[_ind4348];
            // item 4353
            if (group.items.length > 0) {
                // item 4350
                addFoundGroup(
                	group,
                	defs.completed,
                	group.items
                )
            }
            // item 43480003
            _ind4348++;
        }
    }
}

function trialAllowed() {
    // item 3979
    if (((ServerVars.userId) && (!(ServerVars.hadTrial))) && (ServerVars.currentPlan == "basic")) {
        // item 3984
        return true
    } else {
        // item 3985
        return false
    }
}

function updateSignupButton() {
    // item 2963
    if (get("signup_agree").checked) {
        // item 2966
        enableSignupOk()
    } else {
        // item 2967
        disableSignupOk()
    }
}

function validateFolderName(name) {
    // item 189
    name = name || ""
    name = name.trim()
    // item 190
    if (name) {
        // item 193
        return null
    } else {
        // item 194
        return translate("ERR_EMPTY_NAME")
    }
}

function validateSpaceName(name) {
    // item 200
    name = name || ""
    name = name.trim()
    // item 201
    if (name) {
        // item 206
        var error = Utils.checkSpaceName(name)
        // item 207
        if (error) {
            // item 209
            return translate(error)
        } else {
            // item 204
            return null
        }
    } else {
        // item 205
        return translate("ERR_EMPTY_NAME")
    }
}

function wrapException(action, actionName) {
    // item 182
    var wrapped = function(arg1, arg2, arg3) {
    	try {
    		CallTrace.add(actionName, [])
    		action(arg1, arg2, arg3)
    	} catch (e) {
    		CallTrace.error(e)
    		panic(e)
    	}
    }
    // item 183
    return wrapped
}


globs = createState()
self.widgets = globs.widgets

logonCtrl.onError = resizeCentral


exportMethod(this, init, "init")
exportMethod(this, onResize, "onResize")
exportMethod(this, orderResize, "orderResize")
exportMethod(this, onStateChange, "onStateChange")
exportMethod(this, onError, "onError")
exportMethod(this, hideHelp, "hideHelp")



this.getUrl = getUrl
this.getWidth = getWidth
this.getHeight = getHeight
this.getPath = getPath
this.onInitCompleted = onInitCompleted
this.initControls = initControls

this.panic = panic
this.goToUrl = goToUrl
this.setTimeout = setTimeout

this.sendGet = sendGet
this.sendPost = sendPost
this.sendDelete = sendDelete
this.sendPut = sendPut

this.showWorking = showWorking
this.hideWorking = hideWorking
this.setTitle = setTitle

this.showInputBox = showInputBox
this.hideInputBox = hideInputBox
this.setInputBoxError = setInputBoxError
this.getEditor = getEditor
this.loadFontCore = loadFontCore
this.showNotification = showNotification
this.placeFeedback = placeFeedback

this.pushState = pushState

this.createCentral = createCentral
this.addCentral = addCentral
this.hideCentral = hideCentral
this.resizeCentral = resizeCentral

this.showChooseTypeDialog = showChooseTypeDialog

this.showPopupList = showPopupList
this.showPopupListAt = showPopupListAt
this.Clipboard = Clipboard
this.showContextMenu = showContextMenu
this.showAccessScreen = showAccessScreen

this.suggest = suggest
this.showShareScreen = showShareScreen

this.saveAsPng = saveAsPng
this.saveAsSvg = saveAsSvg
this.logout = logout

this.hideHelp = hideHelp
this.showHelp = showHelp
this.showMainMenu = showMainMenu
this.schedule = schedule
this.killCentral = killCentral
this.showAddUserScreen = showAddUserScreen
this.setAccessError = setAccessError
this.setFoundUsers = setFoundUsers
this.clearTimeout = clearTimeout
this.showLogonSignup = showLogonSignup
this.showLogon = showLogon
this.startLogon = startLogon
this.showSignup = showSignup
this.scheduleNextStateAfter = scheduleNextStateAfter
this.getExample = getExample
this.preventQuestion = preventQuestion
HtmlUtils.setErrorReporter(panic)
this.setMobileHeader = setMobileHeader
this.cancelSearch = cancelSearch
this.createSearchList = createSearchList
this.addToSearchList = addToSearchList
this.trialAllowed = trialAllowed
this.showDemo = showDemo
this.isDemoDiscarded = isDemoDiscarded
}
