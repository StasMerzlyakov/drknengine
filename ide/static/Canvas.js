function Canvas(window, document, undefined) {
	var USE_SIMPLE_MEASURE = true
	var SHADOW_SHIFT_X = 5
	var SHADOW_SHIFT_Y = 7
	var SHADOW_STYLE = "rgba(0, 0, 0, 0.3)"

	var Q_PADDING = 20

	var self = this

	this.zoom = 1;
	this.retina = 1;

	var TEXTURE_BORDER = 4;
	var SHADOW_BORDER = 10

	var ARROW_WIDTH = 20;
	var ARROW_HEIGHT = 5;
	var CANDY_SIZE = 10;


	var gContext = null;
	var gBackground = ""

	var gFont = null
	var gDefaultFont = null

	this.renderToTexture = true

	

	var gNextItem = 0;
	var gItems = {};
	var gPlanes = makePlanes();

	var gDoc = document;
	var gTextCanvas = gDoc.createElement("canvas");
	var gTextContext = gTextCanvas.getContext("2d");

	var gMoveAllImage = null
	var gMoveAllImageReady = false
	var gVideoImage = null
	var gLinkImage = null
	var gPictureImage = null

	var moreCallbacks = {}

	// updateFontMetrics();

// Autogenerated with DRAKON Editor 1.32


function FontRecord(font, italic, bold, size, family) {
    // item 2874
    this.font = font
    // item 2873
    this.italic = italic
    this.bold = bold
    this.size = size
    this.family = family
    // item 2875
    this.face = italic + "-" + bold + "-" + family
}

function SafePath(ctx, ox, oy, scaleX, scaleY) {
    // item 2626
    this.ctx = ctx
    this.moveTo = sp_moveTo
    this.lineTo = sp_lineTo
    this.arc = sp_arc
    this.transformX = sp_x
    this.transformY = sp_y
    // item 2627
    this.ox = ox
    this.oy = oy
    this.scaleX = scaleX
    this.scaleY = scaleY
}

function addDirect(textureItem, draw) {
    // item 1091
    var obj = {
    	draw: draw
    }
    // item 1092
    textureItem.primitives.push(obj)
}

function addSocket(x, y) {
    // item 420
    var item = {
    	x: x, y: y, active: false,
    	draw: drawSocket
    };
    return createItem(item, "sockets");
}

function buildBeginPath(ctx, x, y, w, h, points) {
    // item 1620
    var x0 = x - w;
    var x1 = x0 + h;
    var x3 = x + w;
    var x2 = x3 - h;
    var top = y - h;
    var bottom = y + h;
    // item 1621
    ctx.beginPath();
    ctx.arc(x1, y, h, Math.PI * 0.5, Math.PI * 1.5);
    ctx.lineTo(x2, top);
    ctx.arc(x2, y, h, Math.PI * 1.5, Math.PI * 0.5);
    ctx.closePath();
}

function buildCloudPath(ctx, x, y, w, h, points) {
    // item 2560
    var r1 = Math.round(h * 2 / 3)
    var bottom = y + h
    var w2 = Math.round(h * 490 / 260)
    var leftX = x - w2 + r1
    var rightX = x + w2 - r1
    var midY = bottom - r1 * 2
    var x0 = x - w2 / 2
    var y0 = y - h
    var x1 = x - w2 / 4
    var y1 = y - h + r1 / 2
    var x2 = x + 0.34 * w2
    var y2 = y - h - r1 * 1.3
    var x3 = rightX
    var y3 = midY
    var rleft = r1 * 0.8
    var rright = r1 * 1.4
    // item 2565
    var scale = w / h / 2
    // item 2561
    /*
    ctx.beginPath();
    ctx.moveTo(leftX, bottom)
    ctx.arc(leftX, bottom - r1, r1, Math.PI / 2, Math.PI * 3 / 2)
    ctx.lineTo(x0, y0)
    ctx.lineTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.lineTo(x3, y3)
    ctx.arc(rightX, bottom - r1, r1, -Math.PI / 2, Math.PI / 2)
    ctx.closePath();
    */
    // item 2562
    /*
    ctx.beginPath();
    ctx.moveTo(leftX, bottom)
    ctx.arc(leftX, bottom - r1, r1, Math.PI / 2, Math.PI * 3 / 2)
    ctx.arcTo(x0, y0, x1, y1, rleft)
    ctx.arcTo(x2, y2, x3, y3, rright)
    ctx.arc(rightX, bottom - r1, r1, -Math.PI / 2, Math.PI / 2)
    ctx.closePath();
    */
    // item 2567
    var clx = x - w2 * 0.34
    var cly = midY + h * 0.16
    var clbegin = -0.9 * Math.PI
    var clend = -0.25 * Math.PI
    
    var crx = x + w2 * 0.2
    var cry = midY
    var crbegin = -0.9 * Math.PI
    var crend = 0
    rright = r1
    // item 2628
    var useSafe = true
    // item 2629
    if (ctx.ellipse) {
        // item 2563
        ctx.save()
        ctx.translate(x, y)
        ctx.scale(scale, 1)
        ctx.translate(-x, -y)
        // item 2566
        ctx.beginPath();
        ctx.moveTo(leftX, bottom)
        ctx.arc(leftX, bottom - r1, r1, Math.PI / 2, Math.PI * 3 / 2)
        ctx.arc(clx, cly, rleft, clbegin, clend)
        ctx.arc(crx, cry, rright, crbegin, crend)
        ctx.arc(rightX, bottom - r1, r1, -Math.PI / 2, Math.PI / 2)
        ctx.closePath();
        // item 2564
         ctx.restore()
    } else {
        // item 2632
        var sp = new SafePath(
        	ctx,
        	x, y,
        	scale, 1
        )
        // item 2633
        ctx.beginPath();
        sp.moveTo(leftX, bottom)
        sp.arc(leftX, bottom - r1, r1, Math.PI / 2, Math.PI * 3 / 2)
        sp.arc(clx, cly, rleft, clbegin, clend)
        sp.arc(crx, cry, rright, crbegin, crend)
        sp.arc(rightX, bottom - r1, r1, -Math.PI / 2, Math.PI / 2)
        ctx.closePath();
    }
}

function buildDbLidPath(ctx, x, y, w, h) {
    // item 2699
    var h2 = makeCylinderHeight(w)
    var scale = h / h2
    // item 2706
    var ctop = y - h2 + w
    // item 2700
    if (ctx.ellipse) {
        // item 2703
        ctx.save()
        ctx.translate(x, y)
        ctx.scale(1, scale)
        ctx.translate(-x, -y)
        // item 2705
        ctx.beginPath();
        ctx.arc(x, ctop, w, 0, Math.PI)
        // item 2704
         ctx.restore()
    } else {
        // item 2716
        var sp = new SafePath(
        	ctx,
        	x, y,
        	1, scale
        )
        // item 2715
        ctx.beginPath();
        sp.moveTo(x + w, ctop)
        sp.arc(x, ctop, w, 0, Math.PI)
    }
}

function buildDbPath(ctx, x, y, w, h) {
    // item 2723
    var h2 = makeCylinderHeight(w)
    var scale = h / h2
    // item 2692
    var ctop = y - h2 + w
    var cbottom = y + h2 - w
    // item 2686
    if (ctx.ellipse) {
        // item 2689
        ctx.save()
        ctx.translate(x, y)
        ctx.scale(1, scale)
        ctx.translate(-x, -y)
        // item 2691
        ctx.beginPath();
        ctx.arc(x, ctop, w, -Math.PI, 0)
        ctx.arc(x, cbottom, w, 0, Math.PI)
        ctx.closePath()
        // item 2690
         ctx.restore()
    } else {
        // item 2711
        var sp = new SafePath(
        	ctx,
        	x, y,
        	1, scale
        )
        // item 2713
        ctx.beginPath();
        sp.arc(x, ctop, w, -Math.PI, 0)
        sp.arc(x, cbottom, w, 0, Math.PI)
        ctx.closePath()
    }
}

function buildEllipsePath(ctx, x, y, w, h) {
    // item 2655
    ctx.beginPath()
    // item 2235
    safeEllipse(
    	ctx,
    	x,
    	y,
    	w,
    	h
    )
}

function buildEndPath(ctx, x, y, w, h, points) {
    // item 1724
    var radius = points[2]
    // item 1725
    var left = x - w;
    var top = y - h;
    var right = x + w;
    var bottom = y + h;
    // item 1727
    var x0 = left;
    var x1 = x0 + radius;
    var x3 = right;
    var x2 = x3 - radius;
    // item 1728
    var y0 = top;
    var y1 = bottom - radius;
    var y2 = bottom;
    // item 1729
    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x3, y0);
    ctx.lineTo(x3, y1);
    ctx.arc(x2, y1, radius, Math.PI * 0, Math.PI * 0.5);
    ctx.lineTo(x1, y2);
    ctx.arc(x1, y1, radius, Math.PI * 0.5, Math.PI * 1.0);
    ctx.closePath();
}

function buildPolyPath(ctx, x, y, points, format) {
    // item 1660
    ctx.beginPath();
    // item 1670
    var x0 = points[0] + x
    var y0 = points[1] + y
    // item 1669
    ctx.moveTo(x0, y0)
    // item 1664
    var i = 2
    var length = points.length
    while (true) {
        // item 1666
        if (i < length) {
            
        } else {
            break;
        }
        // item 1665
        x0 = points[i] + x
        i++
        y0 = points[i] + y
        i++
        // item 1671
        ctx.lineTo(x0, y0)
    }
    // item 1661
    ctx.closePath();
}

function buildStartPath(ctx, x, y, w, h, points) {
    // item 1714
    var radius = points[2]
    // item 1709
    var left = x - w;
    var top = y - h;
    var right = x + w;
    var bottom = y + h;
    // item 1712
    var x0 = left;
    var x1 = x0 + radius;
    var x3 = right;
    var x2 = x3 - radius;
    // item 1713
    var y0 = top;
    var y1 = y0 + radius;
    var y2 = bottom;
    // item 1711
    ctx.beginPath();
    ctx.arc(x1, y1, radius, Math.PI * 1.0, Math.PI * 1.5);
    ctx.lineTo(x2, y0);
    ctx.arc(x2, y1, radius, Math.PI * 1.5, Math.PI * 0);
    ctx.lineTo(x3, y2);
    ctx.lineTo(x0, y2);
    ctx.closePath();
}

function buildTabPath(ctx, x, y, w, h, points) {
    // item 2241
    var notch = h / 3;
    var x0 = x - w;
    var x1 = x0 + notch;
    var x3 = x + w;
    var x2 = x3 - notch;
    var y0 = y - h;
    var y1 = y0 + notch
    var y2 = y + h;
    // item 2242
    ctx.beginPath();
    ctx.moveTo(x0, y2)
    ctx.lineTo(x0, y1)
    ctx.lineTo(x1, y0)
    ctx.lineTo(x2, y0)
    ctx.lineTo(x3, y1)
    ctx.lineTo(x3, y2)
}

function cfalse_render(ctx, x, y, w, h, format) {
    // item 2262
    setStyleForMore(ctx, format)
    // item 2264
    ctx.fillStyle = format.fillColor
    // item 2362
    if (shouldShift(ctx.lineWidth)) {
        // item 2365
        x += 0.5
        y += 0.5
    }
    // item 2267
    var xp = w * 0.3
    var yp = h * 0.3
    var x0 = x - w + xp
    var y0 = y - h + yp
    var w2 = w * 2 - xp * 2
    var h2 = h * 2 - yp * 2
    // item 2265
    ctx.fillRect(x0, y0, w2, h2)
    ctx.strokeRect(x0, y0, w2, h2)
}

function check_render(ctx, x, y, w, h, format) {
    // item 2129
    var xp = w * 0.3
    var yp = h * 0.3
    var x0 = x - w + xp
    var x1 = x0 + xp
    var x2 = x + w - xp
    
    var y0 = y - h + yp
    var y1 = y + h - yp
    // item 2130
    setStyleForMore(ctx, format)
    // item 2131
    ctx.beginPath();
    ctx.moveTo(x0, y)
    ctx.lineTo(x1, y1)
    ctx.lineTo(x2, y0)
    ctx.stroke()
}

function circlePath(ctx, x, y, r) {
    // item 2656
    buildEllipsePath(ctx, x, y, r, r)
}

function cleanDirty() {
    // item 503
    this.dirty = false;
}

function clear() {
    // item 414
    gNextItem = 0;
    // item 413
    gPlanes = makePlanes();
    gItems = {};
}

function clearGuides() {
    // item 27300001
    var _ind2730 = 0;
    var _col2730 = gPlanes.guides;
    var _len2730 = _col2730.length;
    while (true) {
        // item 27300002
        if (_ind2730 < _len2730) {
            
        } else {
            break;
        }
        // item 27300004
        var prim = _col2730[_ind2730];
        // item 2729
        delete gItems[prim.id]
        // item 27300003
        _ind2730++;
    }
    // item 2732
    gPlanes.guides = []
}

function clearShadow(ctx) {
    // item 1539
    ctx.shadowColor = "rgba(0, 0, 0, 0)"
}

function close_mac_render(ctx, x, y, w, h, format) {
    // item 2346
    setStyleForMore(ctx, format)
    // item 2348
    var h2 = h * 0.5
    var c0 = x - 3 * h2
    var c1 = x
    var c2 = x + 3 * h2
    
    var m = h2 * Math.cos(Math.PI / 4)
    
    var x0 = c0 - m
    var x1 = c0 + m
    
    var y0 = y - m
    var y1 = y + m
    // item 2359
    circlePath(ctx, c0, y, h2)
    ctx.stroke()
    circlePath(ctx, c1, y, h2)
    ctx.stroke()
    circlePath(ctx, c2, y, h2)
    ctx.stroke()
    // item 2351
    line1(ctx, x0, y0, x1, y1)
    // item 2352
    line1(ctx, x0, y1, x1, y0)
}

function close_render(ctx, x, y, w, h, format) {
    // item 2338
    setStyleForMore(ctx, format)
    // item 2370
    if (shouldShift(ctx.lineWidth)) {
        // item 2373
        x += 0.5
        y += 0.5
    }
    // item 2341
    var h2 = Math.round(h * 0.5)
    var c0 = x - 3 * h2
    var c1 = x
    var c2 = x + 3 * h2
    
    var x0 = c0 - h2
    var x1 = c0 + h2
    
    var x2 = c1 - h2
    var x3 = c2 - h2
    var x4 = c2 + h2
    
    var y0 = y - h2
    var y1 = y + h2
    var s = h2 * 2
    // item 2342
    ctx.strokeRect(x2, y0, s, s)
    // item 2343
    line1(ctx, x0, y, x1, y)
    // item 2344
    line1(ctx, x3, y0, x4, y1)
    // item 2345
    line1(ctx, x3, y1, x4, y0)
}

function combo_render(ctx, x, y, w, h, format) {
    // item 2158
    var xp = w * 0.5
    var yp = h * 0.6
    var x0 = x - w + xp
    var x1 = x + w - xp
    var y0 = y - h + yp
    var y1 = y + h - yp
    // item 2167
    setStyleForMore(ctx, format)
    // item 2160
    tri(ctx, x0, y0, x1, y0, x, y1)
}

function createCalloutArrow(x, y, w, h, cx, cy, format, layer) {
    // item 934
    var item = {
    	x: x, y: y, w: w, h: h,
    	cx: cx, cy: cy,
    	format: format,
    	draw: drawCalloutArrow
    };
    
    return createItem(item, layer);
}

function createFreeHorizontal(x, y, w, style, format, layer) {
    // item 1979
    if (style == "dashed") {
        // item 1982
        format.lineStyle = "s-2"
    }
    // item 912
    var item = {
    	x: x, y: y, w: w, h:0,
    	style: style,
    	format: format,
    	draw: drawFreeHorizontal
    };
    
    return createItem(item, layer);
}

function createHCandy(x, y, w, valence, left, right, layer) {
    // item 442
    var item = {
    	x: x, y: y, w: w, h: 10,
    	valence: valence,
    	left: left, right: right,
    	draw: drawHCandy
    };
    
    return createItem(item, layer);
}

function createHorizontal(x, y, w, role, format, layer) {
    // item 1996
    var parallel = false
    var thickness = format.lineThickness
    // item 19890001
    if (role === "arrow") {
        // item 2000
        format.arrowStart = "arrow"
        // item 2003
        x += thickness
        w -= thickness
    } else {
        // item 19890002
        if (role === "rarrow") {
            // item 2001
            format.arrowEnd = "arrow"
            // item 2004
            w -= thickness
        } else {
            // item 19890003
            if (role === "parallel") {
                // item 2002
                parallel = true
            }
        }
    }
    // item 187
    var item = {
    	x: x, y: y, w: w, h:0,
    	format: format,
    	parallel: parallel,
    	draw: drawHorizontal
    };
    
    return createItem(item, layer);
}

function createItem(item, layer) {
    // item 76
    var plane = getPlane(layer);
    var id = nextId();
    // item 75
    item.id = id;
    item.layer = layer;
    // item 88
    plane.push(item);
    gItems[id] = item;
    // item 77
    return id;
}

function createJCandy(x, y, color, layer) {
    // item 443
    var item = {
    	x: x, y: y,
    	color: color,
    	draw: drawJCandy
    };
    
    return createItem(item, layer);
}

function createLine(x, y, w, h, format, layer) {
    // item 1830
    var item = {
    	x:x, y:y, w:w, h:h,
    	format: format,
    	draw: drawLinePrim
    };
    
    return createItem(item, layer);
}

function createMoveAll(x, y, layer) {
    // item 2097
    var item = {
    	x: x, y: y,
    	draw: drawMoveAll
    };
    
    return createItem(item, layer);
}

function createRCorner(x, y, format, direction, radius, layer) {
    // item 881
    var item = {
    	x: x, y: y,
    	format: format,
    	direction: direction,
    	radius: radius,
    	draw: drawRCorner
    };
    
    return createItem(item, layer);
}

function createRealTexture(x, y, left, top, w, h, layer, angle) {
    // item 1124
    var rScale = self.retina
    // item 1114
    var width = w + 2 * TEXTURE_BORDER + SHADOW_BORDER;
    var height = h + 2 * TEXTURE_BORDER + SHADOW_BORDER;
    // item 1115
    var canvas = document.createElement("canvas");
    // item 1116
    canvas.width = width * self.zoom * rScale;
    canvas.height = height * self.zoom * rScale;
    // item 1119
    var ctx = canvas.getContext("2d");
    ctx.font =  gFont.font
    // item 1538
    //ctx.fillStyle = "red"
    //ctx.fillRect(0, 0, 1000, 1000)
    // item 1118
    var scale = self.zoom * rScale;
    ctx.scale(scale, scale);
    // item 1117
    ctx.translate(
    	-x - left + TEXTURE_BORDER,
    	-y - top + TEXTURE_BORDER
    );
    // item 1113
    var item = {
    	x: x, y: y, 
    	left: left, top: top,
    	width: width, height: height,
    	canvas: canvas, context: ctx,
    	draw: drawTexture,
    	angle: angle
    };
    
    return createItem(item, layer);
}

function createTexture(x, y, left, top, w, h, layer, angle) {
    // item 1050
    if (this.renderToTexture) {
        // item 563
        return createRealTexture(
        	x, y,
        	left, top, w, h,
        	layer, angle
        )
    } else {
        // item 1053
        var item = {
        	x: x, y: y, 
        	left: left, top: top,
        	width: w, height: h,
        	primitives: [],
        	draw: drawFakeTexture,
        	font: gFont.font,
        	angle: angle
        }
        // item 1055
        return createItem(item, layer)
    }
}

function createVCandy(x, y, h, valence, top, bottom, layer) {
    // item 444
    var item = {
    	x: x, y: y, h: h, valence: valence,
    	top: top, bottom: bottom,
    	draw: drawVCandy
    };
    return createItem(item, layer);
}

function createVertical(x, y, h, role, format, layer) {
    // item 175
    var item = {
    	x: x, y: y, h: h, w:0,
    	role: role,
    	format: format,
    	draw: drawVertical
    };
    
    return createItem(item, layer);
}

function cross_render(ctx, x, y, w, h, format) {
    // item 2116
    var xp = w * 0.3
    var yp = h * 0.3
    var x0 = x - w + xp
    var x1 = x + w - xp
    var y0 = y - h + yp
    var y1 = y + h - yp
    // item 2168
    setStyleForMore(ctx, format)
    // item 2118
    ctx.beginPath();
    ctx.moveTo(x0, y0)
    ctx.lineTo(x1, y1)
    ctx.closePath()
    ctx.stroke()
    // item 2123
    ctx.beginPath();
    ctx.moveTo(x1, y0)
    ctx.lineTo(x0, y1)
    ctx.closePath()
    ctx.stroke()
}

function ctrue_render(ctx, x, y, w, h, format) {
    // item 2252
    cfalse_render(ctx, x, y, w, h, format)
    // item 2288
    var xp = w * 0.6
    var yp = h * 0.6
    var x0 = x - w + xp
    var y0 = y - h + yp
    var x1 = x + w - xp
    var y1 = y + h - yp
    // item 2287
    line2(ctx,
    	x0, y0,
    	x, y1,
    	x1, y0
    )
}

function deleteItem(id) {
    // item 399
    if (id in gItems) {
        // item 402
        var item = gItems[id];
        var layer = getPlane(item.layer);
        var length = layer.length;
        // item 408
        delete gItems[id];
        // item 4030001
        var i = 0;
        while (true) {
            // item 4030002
            if (i < length) {
                
            } else {
                break;
            }
            // item 405
            if (layer[i].id == id) {
                // item 407
                layer.splice(i, 1);
                break;
            }
            // item 4030003
            i++;
        }
    }
}

function dots3h_render(ctx, x, y, w, h, format) {
    // item 2317
    var h2 = h * 0.6
    var x0 = x - h2
    var x1 = x + h2
    var r = getThickness(format.lineThickness) || 1
    // item 2315
    setStyleForMore(ctx, format)
    // item 2316
    ctx.beginPath()
    safeEllipse(ctx, x0, y, r, r)
    ctx.fill()
    // item 2318
    ctx.beginPath()
    safeEllipse(ctx, x, y, r, r)
    ctx.fill()
    // item 2319
    ctx.beginPath()
    safeEllipse(ctx, x1, y, r, r)
    ctx.fill()
}

function dots3v_render(ctx, x, y, w, h, format) {
    // item 2307
    var h2 = h * 0.6
    var y0 = y - h2
    var y1 = y + h2
    var r = getThickness(format.lineThickness) || 1
    // item 2305
    setStyleForMore(ctx, format)
    // item 2306
    ctx.beginPath()
    safeEllipse(ctx, x, y0, r, r, 0, 0, Math.PI * 2)
    ctx.fill()
    // item 2308
    ctx.beginPath()
    safeEllipse(ctx, x, y, r, r, 0, 0, Math.PI * 2)
    ctx.fill()
    // item 2309
    ctx.beginPath()
    safeEllipse(ctx, x, y1, r, r, 0, 0, Math.PI * 2)
    ctx.fill()
}

function down_render(ctx, x, y, w, h, format) {
    // item 2529
    setStyleForMore(ctx, format)
    // item 2532
    var padding = w * 0.3
    // item 2530
    var y0 = y - h / 3
    var y1 = y + h / 3
    var x0 = x - w + padding
    var x1 = x + w - padding
    // item 2533
    line2(
    	ctx,
    	x0, y0,
    	x, y1,
    	x1, y0
    )
}

function draw(ctx) {
    // item 2007
    try {
    	gContext = ctx
    	drawItems(true)
    	gContext = null
    
    } catch (ex) {
    	CallTrace.error(ex)
    	throw ex
    }
}

function drawActionCore(ctx, x, y, w, h, format) {
    // item 1581
    var left = x - w;
    var top = y - h;
    var width = w * 2;
    var height = h * 2;
    
    drawRect(
    	ctx,
    	left,
    	top,
    	width,
    	height,
    	format
    )
}

function drawArrowCap(ctx, format) {
    // item 1969
    ctx.setLineDash([])
    ctx.strokeStyle = format.lineColor
    ctx.lineWidth = format.lineThickness
    ctx.lineCap = "round"
    ctx.lineJoin = "round"
    ctx.fillStyle = format.lineColor
    // item 1971
    var thick = format.lineThickness
    // item 1970
    gContext.beginPath();
    gContext.moveTo(-ARROW_WIDTH, -ARROW_HEIGHT - thick)
    gContext.lineTo(0, 0);
    gContext.lineTo(-ARROW_WIDTH, ARROW_HEIGHT + thick)
    gContext.closePath()
    gContext.fill()
    gContext.stroke();
}

function drawArrowCapOld(ctx, format) {
    // item 1933
    ctx.fillStyle = format.lineColor
    // item 1936
    var thick = format.lineThickness
    var shift = thick / 2
    // item 1935
    gContext.beginPath();
    gContext.moveTo(0, -shift)
    gContext.lineTo(-ARROW_WIDTH, -ARROW_HEIGHT - shift);
    gContext.lineTo(-ARROW_WIDTH, ARROW_HEIGHT + thick - shift);    
    gContext.lineTo(0, thick - shift)
    gContext.closePath();
    gContext.fill();
}

function drawCalloutArrow(item) {
    // item 957
    var fore = item.fore
    var back = item.back
    var cx = item.x + item.cx
    var cy = item.y + item.cy
    // item 993
    var w = item.w
    var h = item.h
    var x = item.cx
    var y = item.cy
    var left = item.x - item.w + 1.5
    var right = item.x + item.w - 1.5
    var top = item.y - item.h + 1.5
    var bottom = item.y + item.h - 1.5
    // item 974
    var a = isAboveNWSE(-w, -h, x, y)
    var b = isAboveNESW(-w,  h, x, y)
    var c = isAboveNESW( w, -h, x, y)
    var d = isAboveNWSE( w,  h, x, y)
    // item 998
    var a, b, c
    var t
    // item 1005
    var ex, ey
    // item 975
    if (((a) && (c)) && (y < -item.h)) {
        // item 2936
        t = getTHor(item, y)
        // item 2884
        ex = getEx(item, x)
        // item 999
        a = {x: ex-t, y:top}
        c = {x: ex+t, y:top}
        // item 1026
        a.x = Math.max(a.x, left)
        c.x = Math.min(c.x, right)
    } else {
        // item 979
        if (((c) || (!(d))) || (!(x > item.w))) {
            // item 987
            if (((b) || (d)) || (!(y > item.h))) {
                // item 2943
                t = getTVer(item, x)
                // item 2919
                ey = getEy(item, y)
                // item 1002
                a = {x: left, y:ey-t}
                c = {x: left, y:ey+t}
                // item 1030
                a.y = Math.max(a.y, top)
                c.y = Math.min(c.y, bottom)
            } else {
                // item 2942
                t = getTHor(item, y)
                // item 2918
                ex = getEx(item, x)
                // item 1001
                a = {x: ex-t, y:bottom}
                c = {x: ex+t, y:bottom}
                // item 1029
                a.x = Math.max(a.x, left)
                c.x = Math.min(c.x, right)
            }
        } else {
            // item 2938
            t = getTVer(item, x)
            // item 1019
            ey = getEy(item, y)
            // item 1000
            a = {x: right, y:ey-t}
            c = {x: right, y:ey+t}
            // item 1027
            a.y = Math.max(a.y, top)
            c.y = Math.min(c.y, bottom)
        }
    }
    // item 1747
    var fill = getFillColor(item.format.fillColor)
    // item 1766
    if (fill) {
        // item 1003
        gContext.fillStyle = fill
        gContext.strokeStyle = ""
        // item 1004
        gContext.beginPath();
        gContext.moveTo(a.x, a.y)
        gContext.lineTo(cx, cy)
        gContext.lineTo(c.x, c.y)
        gContext.closePath()
        gContext.fill()
    }
    // item 1746
    var width = setLineStyle(gContext, item.format)
    // item 1743
    if (width == 0) {
        
    } else {
        // item 958
        gContext.beginPath();
        gContext.moveTo(a.x, a.y)
        gContext.lineTo(cx, cy)
        gContext.lineTo(c.x, c.y)
        gContext.stroke();
    }
}

function drawCap(ctx, style, format, x, y, angle) {
    // item 1909
    ctx.save()
    // item 1911
    ctx.translate(x, y)
    ctx.rotate(angle)
    // item 19020001
    if (style === "arrow") {
        // item 1932
        drawArrowCap(ctx, format)
    } else {
        // item 19020002
        if (style === "sarrow") {
            // item 1945
            drawSArrowCap(ctx, format)
        } else {
            // item 19020003
            if (style === "warrow") {
                // item 1963
                drawWArrow(ctx, format)
            } else {
                // item 19020004
                if (style === "paw") {
                    // item 1954
                    drawPaw(ctx, format)
                }
            }
        }
    }
    // item 1910
    ctx.restore()
}

function drawCircle(context, centerX, centerY, radius, thickness, back, fore) {
    // item 462
    gContext.beginPath();
    gContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
    gContext.fillStyle = back;
    gContext.fill();
    gContext.lineWidth = thickness;
    gContext.strokeStyle = fore;
    gContext.stroke();
}

function drawCompleted(ctx, x, y) {
    // item 2828
    ctx.beginPath()
    // item 2846
    var size = 24
    var rad = size / 2
    // item 2827
    circlePath(
    	ctx,
    	x,
    	y,
    	rad
    )
    // item 2829
    ctx.fillStyle = "#00a000"
    ctx.fill()
    // item 2831
    ctx.strokeStyle = "#005000"
    ctx.lineWidth = 1
    ctx.setLineDash([])
    // item 2832
    ctx.stroke()
    // item 2845
    var x0 = x - rad * 0.6
    var y0 = y
    var x1 = x - rad * 0.3
    var y1 = y + rad * 0.3
    var x2 = x + rad * 0.5
    var y2 = y - rad * 0.5
    // item 2843
    line2(
    	ctx,
    	x0, y0,
    	x1, y1,
    	x2, y2
    )
    // item 2847
    ctx.strokeStyle = "white"
    ctx.lineWidth = 2
    ctx.setLineDash([])
    // item 2844
    ctx.stroke()
}

function drawDb(ctx, x, y, points, format) {
    // item 2693
    drawRectStrategy(
    	ctx,
    	x,
    	y,
    	points,
    	format,
    	buildDbPath
    )
    // item 2709
    setStyleForMore(ctx, format)
    // item 2708
    var w = points[0]
    var h = points[1]
    // item 2707
    buildDbLidPath(ctx, x, y, w, h)
    // item 2710
    ctx.stroke()
}

function drawFakeTexture(item) {
    // item 1773
    var ctx = getContext()
    ctx.font = item.font
    // item 2045
    var left = item.x + item.left - TEXTURE_BORDER
    var top = item.y + item.top - TEXTURE_BORDER
    // item 2046
    rotateTexture(ctx, item, left, top)
    // item 10610001
    var _ind1061 = 0;
    var _col1061 = item.primitives;
    var _len1061 = _col1061.length;
    while (true) {
        // item 10610002
        if (_ind1061 < _len1061) {
            
        } else {
            break;
        }
        // item 10610004
        var prim = _col1061[_ind1061];
        // item 1063
        prim.draw()
        // item 10610003
        _ind1061++;
    }
    // item 2047
    restoreContext(ctx, item)
}

function drawFreeHorizontal(item) {
    // item 1983
    drawLine(
    	gContext,
    	item.x,
    	item.y,
    	item.x + item.w,
    	item.y + item.h,
    	item.format
    )
}

function drawHCandy(item) {
    // item 468
    var x = item.x;
    var y = item.y;
    
    var x1 = x;
    var y1 = y - 2;
    var w1 = item.w;
    var h1 = 6;
    
    var x2 = x + 2;
    var y2 = y;
    var w2 = item.w - 4;
    var h2 = 2;
    
    
    gContext.fillStyle = "black";
    gContext.fillRect(x1, y1, w1, h1);
    
    gContext.fillStyle = "#00ff00";
    gContext.fillRect(x2, y2, w2, h2);
    // item 1769
    if (item.valence) {
        // item 1772
        var centerX = (item.left + item.right) / 2
        var centerY = y + 1
        
        var radius = Config.SOCKET_RADIUS;
        drawCircle(
        	gContext,
        	centerX,
        	centerY,
        	radius,
        	2,
        	"#00ff00",
        	"black"
        );
    }
}

function drawHorizontal(item) {
    // item 1972
    drawLine(
    	gContext,
    	item.x,
    	item.y,
    	item.x + item.w,
    	item.y + item.h,
    	item.format
    )
    // item 1985
    if (item.parallel) {
        // item 1988
        var y2 = item.y + 5 + item.format.lineThickness
        // item 1973
        drawLine(
        	gContext,
        	item.x,
        	y2,
        	item.x + item.w,
        	y2,
        	item.format
        )
    }
}

function drawItems(candies) {
    // item 148
    drawLayer("lines");
    // item 142
    if (candies) {
        // item 149
        drawLayer("line_candies");
    }
    // item 150
    drawLayer("icons");
    // item 145
    if (candies) {
        // item 151
        drawLayer("icon_candies");
        drawLayer("sockets");
    }
    // item 871
    drawLayer("free");
    // item 872
    if (candies) {
        // item 875
        drawLayer("free_candies");
    }
    // item 2736
    drawLayer("guides");
}

function drawJCandy(item) {
    // item 651
    var x = item.x;
    var y = item.y;
    var color = item.color
    // item 650
    drawRectAtCenter(x, y, CANDY_SIZE, CANDY_SIZE, color, "black");
}

function drawLayer(layer) {
    // item 165
    var plane = getPlane(layer);
    // item 1660001
    var _ind166 = 0;
    var _col166 = plane;
    var _len166 = _col166.length;
    while (true) {
        // item 1660002
        if (_ind166 < _len166) {
            
        } else {
            break;
        }
        // item 1660004
        var item = _col166[_ind166];
        // item 169
        item.draw(item);
        // item 1660003
        _ind166++;
    }
}

function drawLine(ctx, x1, y1, x2, y2, format) {
    // item 1701
    var width = setLineStyle(ctx, format)
    // item 1695
    if (width == 0) {
        
    } else {
        // item 1698
        if (shouldShift(width)) {
            // item 1693
            x1 += 0.5
            y1 += 0.5
            x2 += 0.5
            y2 += 0.5
        }
        // item 1694
        ctx.beginPath()
        ctx.moveTo(x1, y1)
        ctx.lineTo(x2, y2)
        // item 1702
        ctx.stroke()
        // item 1882
        if ((format.arrowStart) || (format.arrowEnd)) {
            // item 1888
            var angle = Utils.findAngle(x1, y1, x2, y2)
            // item 1889
            drawCap(
            	ctx,
            	format.arrowStart,
            	format,
            	x1,
            	y1,
            	angle + Math.PI
            )
            // item 1890
            drawCap(
            	ctx,
            	format.arrowEnd,
            	format,
            	x2,
            	y2,
            	angle
            )
        }
    }
}

function drawLinePrim(item) {
    // item 1836
    drawLine(
    	gContext,
    	item.x,
    	item.y,
    	item.x + item.w,
    	item.y + item.h,
    	item.format
    )
}

function drawLinkIcon(textureId, type, x, y) {
    // item 2742
    genericRender(
    	drawLinkIconCore,
    	arguments
    )
}

function drawLinkIconCore(ctx, type, x, y) {
    // item 27780001
    if (type === "link") {
        // item 2786
        drawSimpleLink(ctx, x, y)
    } else {
        // item 27780002
        if (type === "video") {
            // item 2787
            drawVideoIcon(ctx, x, y)
        } else {
            // item 27780003
            if (type === "completed") {
                // item 2821
                drawCompleted(ctx, x, y)
            }
        }
    }
}

function drawMoveAll(item) {
    // item 2102
    var SIZE = 30
    // item 2106
    var x = Math.floor(item.x)
    var y = Math.floor(item.y)
    // item 2105
    drawRectAtCenter(x, y, SIZE, SIZE, "white", "black");
    // item 2107
    if (gMoveAllImageReady) {
        // item 2110
        gContext.drawImage(
        	gMoveAllImage,
        	x - SIZE / 2 + 1,
        	y - SIZE / 2 + 1,
        	SIZE - 2,
        	SIZE - 2
        )
    }
}

function drawPaw(ctx, format) {
    // item 1951
    ctx.setLineDash([])
    ctx.strokeStyle = format.lineColor
    ctx.lineWidth = format.lineThickness
    ctx.lineCap = "round"
    ctx.lineJoin = "round"
    // item 1953
    var thick = format.lineThickness
    var height = ARROW_WIDTH / 2
    // item 1952
    gContext.beginPath();
    gContext.moveTo(0, - height - thick)
    gContext.lineTo(-ARROW_WIDTH, 0);
    gContext.lineTo(0, height + thick)
    gContext.stroke();
}

function drawRCorner(item) {
    var _sw8930000_ = 0;
    // item 1984
    setLineStyle(gContext, item.format)
    // item 892
    var radius = item.radius
    // item 902
    var x = item.x + 0.5
    var y = item.y + 0.5
    gContext.beginPath()
    // item 8930000
    _sw8930000_ = item.direction;
    // item 8930001
    if (_sw8930000_ === "left-top") {
        // item 890
        gContext.arc(
        	x + radius,
        	y + radius,
        	radius,
        	Math.PI,
        	Math.PI * 1.5
        )
    } else {
        // item 8930002
        if (_sw8930000_ === "right-top") {
            // item 904
            gContext.arc(
            	x - radius,
            	y + radius,
            	radius,
            	-Math.PI * 0.5,
            	0
            )
        } else {
            // item 8930003
            if (_sw8930000_ === "right-bottom") {
                // item 905
                gContext.arc(
                	x - radius,
                	y - radius,
                	radius,
                	0,
                	Math.PI * 0.5
                )
            } else {
                // item 8930004
                if (_sw8930000_ === "left-bottom") {
                    
                } else {
                    // item 8930005
                    throw "Unexpected switch value: " + _sw8930000_;
                }
                // item 906
                gContext.arc(
                	x + radius,
                	y - radius,
                	radius,
                	Math.PI * 0.5,
                	Math.PI
                )
            }
        }
    }
    // item 889
    gContext.stroke();
}

function drawRect(ctx, x, y, w, h, format) {
    // item 115
    if (format.fillColor) {
        // item 1816
        if (self.renderToTexture) {
            // item 1533
            setShadow(ctx, format.shadow)
            // item 1424
            setFillStyle(
            	ctx,
            	format.fillColor,
            	y,
            	y + h
            )
            // item 118
            ctx.fillRect(x, y, w, h)
            // item 1534
            clearShadow(ctx)
        } else {
            // item 1813
            if (format.shadow) {
                // item 1822
                ctx.fillStyle = SHADOW_STYLE
                // item 1821
                ctx.fillRect(
                	x + SHADOW_SHIFT_X,
                	y + SHADOW_SHIFT_Y,
                	w,
                	h
                )
            }
            // item 1824
            setFillStyle(
            	ctx,
            	format.fillColor,
            	y,
            	y + h
            )
            // item 1823
            ctx.fillRect(x, y, w, h)
        }
    }
    // item 1467
    var width = setLineStyle(ctx, format)
    // item 120
    if (width == 0) {
        
    } else {
        // item 1464
        if (shouldShift(width)) {
            // item 114
            x += 0.5;
            y += 0.5;
        }
        // item 119
        ctx.strokeRect(x, y, w, h);
    }
}

function drawRectAtCenter(cx, cy, w, h, back, fore) {
    // item 1871
    gContext.setLineDash([])
    // item 522
    var x = cx - Math.floor(w / 2);
    var y = cy - Math.floor(h / 2);
    // item 527
    // x += 0.5;
    // y += 0.5;
    // item 528
    if (back) {
        // item 531
        gContext.fillStyle = back;
        gContext.fillRect(x, y, w, h);
    }
    // item 533
    if (fore) {
        // item 532
        gContext.strokeStyle = fore;
        gContext.lineWidth = 2;
        gContext.strokeRect(x, y, w, h);
    }
}

function drawRectStrategy(ctx, x, y, points, format, makeShape) {
    // item 1650
    var w = Math.round(points[0])
    var h = Math.round(points[1])
    // item 1652
    var makeShape2 = function(ctx, xx, yy) {
    	makeShape(ctx, xx, yy, w, h, points)
    }
    // item 1651
    drawStrategy(
    	ctx,
    	x,
    	y,
    	h,
    	h,
    	format,
    	makeShape2
    )
}

function drawSArrowCap(ctx, format) {
    // item 1942
    ctx.setLineDash([])
    ctx.strokeStyle = format.lineColor
    ctx.lineWidth = format.lineThickness
    ctx.lineCap = "round"
    ctx.lineJoin = "round"
    // item 1944
    var thick = format.lineThickness
    // item 1943
    gContext.beginPath();
    gContext.moveTo(-ARROW_WIDTH, -ARROW_HEIGHT - thick)
    gContext.lineTo(0, 0);
    gContext.lineTo(-ARROW_WIDTH, ARROW_HEIGHT + thick)
    gContext.stroke();
}

function drawShape(textureId, x, y, points, format) {
    // item 1550
    genericRender(
    	drawShapeCore,
    	arguments
    )
}

function drawShapeCore(ctx, type, x, y, points, format) {
    // item 15560001
    if (type === "rectangle") {
        // item 1574
        var w = points[0]
        var h = points[1]
        // item 1575
        drawActionCore(
        	ctx,
        	x,
        	y,
        	w,
        	h,
        	format
        )
    } else {
        // item 15560002
        if (type === "db") {
            // item 2665
            drawDb(
            	ctx,
            	x,
            	y,
            	points,
            	format
            )
        } else {
            // item 15560003
            if (type === "beginend") {
                // item 1598
                drawRectStrategy(
                	ctx,
                	x,
                	y,
                	points,
                	format,
                	buildBeginPath
                )
            } else {
                // item 15560004
                if (type === "rounded") {
                    // item 1742
                    drawRectStrategy(
                    	ctx,
                    	x,
                    	y,
                    	points,
                    	format,
                    	roundedRectShape
                    )
                } else {
                    // item 15560005
                    if (type === "ctrlstart") {
                        // item 1730
                        drawRectStrategy(
                        	ctx,
                        	x,
                        	y,
                        	points,
                        	format,
                        	buildStartPath
                        )
                    } else {
                        // item 15560006
                        if (type === "ctrlend") {
                            // item 1731
                            drawRectStrategy(
                            	ctx,
                            	x,
                            	y,
                            	points,
                            	format,
                            	buildEndPath
                            )
                        } else {
                            // item 15560007
                            if (type === "tab") {
                                // item 2245
                                drawRectStrategy(
                                	ctx,
                                	x,
                                	y,
                                	points,
                                	format,
                                	buildTabPath
                                )
                            } else {
                                // item 15560008
                                if (type === "cloud") {
                                    // item 2554
                                    drawRectStrategy(
                                    	ctx,
                                    	x,
                                    	y,
                                    	points,
                                    	format,
                                    	buildCloudPath
                                    )
                                } else {
                                    // item 15560009
                                    if (type === "line") {
                                        // item 1686
                                        var x2 = points[0]
                                        var y2 = points[1]
                                        // item 1687
                                        drawLine(
                                        	ctx,
                                        	x,
                                        	y,
                                        	x2,
                                        	y2,
                                        	format
                                        )
                                    } else {
                                        // item 15560010
                                        if (type === "poly") {
                                            // item 1684
                                            var bounds = findTopBottom(points)
                                            // item 1685
                                            var makeShape = function(ctx0, x0, y0) {
                                            	buildPolyPath(
                                            		ctx0,
                                            		x0,
                                            		y0,
                                            		points,
                                            		format
                                            	)
                                            }
                                            // item 1672
                                            drawStrategy(
                                            	ctx,
                                            	x,
                                            	y,
                                            	-bounds.top,
                                            	bounds.bottom,
                                            	format,
                                            	makeShape
                                            )
                                        } else {
                                            // item 15560011
                                            if (type === "circle") {
                                                // item 2224
                                                var w = points[0]
                                                var h = points[1]
                                                // item 2227
                                                var makeShape = function(ctx0, x0, y0) {
                                                	buildEllipsePath(
                                                		ctx0,
                                                		x0, y0,
                                                		w, h
                                                	)
                                                }
                                                // item 2228
                                                drawStrategy(
                                                	ctx,
                                                	x,
                                                	y,
                                                	h,
                                                	h,
                                                	format,
                                                	makeShape
                                                )
                                            } else {
                                                // item 15560012
                                                if (type === "more") {
                                                    
                                                } else {
                                                    // item 15560013
                                                    throw "Unexpected switch value: " + type;
                                                }
                                                // item 2052
                                                var w = points[0]
                                                var h = points[1]
                                                var subtype = points[2]
                                                // item 2060
                                                var method = moreCallbacks[subtype]
                                                // item 2053
                                                method(
                                                	ctx,
                                                	x,
                                                	y,
                                                	w,
                                                	h,
                                                	format
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function drawSimpleLink(ctx, x, y) {
    // item 2775
    var size = 24
    var radius = size / 2
    var angle = 3
    // item 2788
    var x0 = x - radius
    var x1 = x0 + angle
    var x3 = x + radius
    var x2 = x3 - angle
    // item 2789
    var y0 = y - radius
    var y1 = y0 + angle
    var y3 = y + radius
    var y2 = y3 - angle
    // item 2776
    ctx.beginPath()
    ctx.moveTo(x0, y1)
    ctx.lineTo(x1, y0)
    ctx.lineTo(x2, y0)
    ctx.lineTo(x3, y1)
    ctx.lineTo(x3, y2)
    ctx.lineTo(x2, y3)
    ctx.lineTo(x1, y3)
    ctx.lineTo(x0, y2)
    ctx.closePath()
    // item 2774
    ctx.fillStyle = "#000090"
    ctx.fill()
    // item 2799
    var aradius = radius - 7
    var m = aradius * 1.0
    // item 2800
    x0 = x - aradius
    x1 = x + aradius - m
    x2 = x + aradius
    // item 2801
    y0 = y - aradius
    y1 = y0 + m
    y2 = y + aradius
    // item 2803
    ctx.strokeStyle = "white"
    ctx.lineWidth = 3
    ctx.setLineDash([])
    // item 2802
    line1(ctx, x0, y2, x2, y0)
    // item 2848
    line2(
    	ctx,
    	x, y0,
    	x2, y0,
    	x2, y
    )
}

function drawSocket(item) {
    // item 477
    var border = "black";
    var body = "#ffff00";
    var radius = Config.SOCKET_RADIUS;
    // item 474
    if (item.active) {
        // item 478
        drawCircle(
        	gContext,
        	item.x,
        	item.y,
        	radius,
        	2,
        	border,
        	body
        );
    } else {
        // item 479
        drawCircle(
        	gContext,
        	item.x,
        	item.y,
        	radius,
        	2,
        	body,
        	border
        );
    }
}

function drawStrategy(ctx, x, y, h1, h2, format, makeShape) {
    // item 1794
    if (format.fillColor) {
        // item 1777
        if (self.renderToTexture) {
            // item 1641
            setShadow(ctx, format.shadow)
            // item 1793
            fillShape(
            	ctx,
            	x,
            	y,
            	h1,
            	h2,
            	format,
            	makeShape
            )
            // item 1642
            clearShadow(ctx)
        } else {
            // item 1774
            if (format.shadow) {
                // item 1812
                simpleShadow(
                	ctx,
                	x,
                	y,
                	makeShape
                )
            }
            // item 1797
            fillShape(
            	ctx,
            	x,
            	y,
            	h1,
            	h2,
            	format,
            	makeShape
            )
        }
    }
    // item 1640
    var width = setLineStyle(ctx, format)
    // item 1633
    if (width == 0) {
        
    } else {
        // item 1637
        if (shouldShift(width)) {
            // item 1627
            x += 0.5
            y += 0.5
        }
        // item 1632
        makeShape(ctx, x, y)
        // item 1644
        ctx.stroke()
    }
}

function drawText(textureId, text, x, y, color) {
    // item 1362
    genericRender(
    	drawTextCore,
    	arguments
    )
}

function drawTextCore(ctx, text, x, y, color) {
    // item 1099
    ctx.fillStyle = color;
    ctx.textAlign = "left";
    ctx.textBaseline = "bottom";
    ctx.fillText(text, x, y + 1);
}

function drawTexture(item) {
    // item 2012
    var left = item.x + item.left - TEXTURE_BORDER
    var top = item.y + item.top - TEXTURE_BORDER
    // item 2810
    if ((item.angle) || (self.fast)) {
        // item 2043
        rotateTexture(gContext, item, left, top)
        // item 581
        gContext.drawImage(
        	item.canvas,
        	left,
        	top,
        	item.width,
        	item.height
        )
        // item 2044
        restoreContext(gContext, item)
    } else {
        // item 2813
        gContext.save()
        // item 2815
        gContext.setTransform(1, 0, 0, 1, 0, 0)
        // item 2816
        var factor = self.zoom * self.retina
        var dx = self.dx * factor
        var dy = self.dy * factor
        var x = Math.round((left + self.dx) * factor)
        var y = Math.round((top + self.dy) * factor)
        // item 2817
        gContext.drawImage(
        	item.canvas,
        	x,
        	y
        )
        // item 2814
        gContext.restore()
    }
}

function drawVCandy(item) {
    // item 485
    var x = item.x;
    var y = item.y;
    
    var x1 = x - 2;
    var y1 = y;
    var h1 = item.h;
    var w1 = 6;
    
    var x2 = x;
    var y2 = y + 2;
    var h2 = item.h - 4;
    var w2 = 2;
    
    
    gContext.fillStyle = "black";
    gContext.fillRect(x1, y1, w1, h1);
    
    gContext.fillStyle = "#00ff00";
    gContext.fillRect(x2, y2, w2, h2);
    // item 486
    if (item.valence) {
        // item 489
        var centerX = x + 1;
        var centerY = (item.top + item.bottom) / 2;
        
        var radius = Config.SOCKET_RADIUS;
        drawCircle(
        	gContext,
        	centerX,
        	centerY,
        	radius,
        	2,
        	"#00ff00",
        	"black"
        );
    }
}

function drawVertical(item) {
    // item 2006
    var thickness
     = item.format.lineThickness
    var dx = Math.floor(thickness / 2)
    // item 2946
    gContext.fillStyle = item.format.lineColor
    // item 2945
    gContext.fillRect(
    	item.x - dx,
    	item.y,
    	thickness,
    	item.h)
    // item 227
    if (item.role === "par-down-off") {
        // item 2005
        drawCap(
        	gContext,
        	"arrow",
        	item.format,
        	item.x,
        	item.y + item.h - thickness,
        	Math.PI / 2
        )
    }
}

function drawVideoIcon(ctx, x, y) {
    // item 2762
    ctx.beginPath()
    // item 2764
    var size = 24
    var radius = size / 2
    var r2 = radius / 2
    var r4 = r2 / 4
    var x0 = x - r2 + r4
    var x1 = x + r2 + r4
    var y0 = y - r2
    var y1 = y + r2
    // item 2761
    circlePath(
    	ctx,
    	x,
    	y,
    	12
    )
    // item 2763
    ctx.fillStyle = "#d00000"
    ctx.fill()
    // item 2765
    ctx.beginPath()
    ctx.moveTo(x0, y0)
    ctx.lineTo(x1, y)
    ctx.lineTo(x0, y1)
    // item 2766
    ctx.fillStyle = "white"
    ctx.fill()
}

function drawWArrow(ctx, format) {
    // item 1960
    ctx.setLineDash([])
    ctx.strokeStyle = format.lineColor
    ctx.lineWidth = format.lineThickness
    ctx.lineCap = "round"
    ctx.lineJoin = "round"
    ctx.fillStyle = format.fillColor
    // item 1962
    var thick = format.lineThickness
    // item 1961
    gContext.beginPath();
    gContext.moveTo(-ARROW_WIDTH, -ARROW_HEIGHT - thick)
    gContext.lineTo(0, 0);
    gContext.lineTo(-ARROW_WIDTH, ARROW_HEIGHT + thick)
    gContext.closePath()
    gContext.fill()
    gContext.stroke();
}

function fillShape(ctx, x, y, h1, h2, format, makeShape) {
    // item 1789
    setFillStyle(
    	ctx,
    	format.fillColor,
    	y - h1,
    	y + h2
    )
    // item 1788
    makeShape(ctx, x, y)
    // item 1790
    ctx.fill()
}

function findTopBottom(points) {
    // item 1678
    var top = 0
    var bottom = 0
    // item 1681
    var i
    var length = points.length
    // item 16790001
    i = 1;
    while (true) {
        // item 16790002
        if (i < length) {
            
        } else {
            break;
        }
        // item 1682
        var py = points[i]
        top = Math.min(top, py)
        bottom = Math.max(bottom, py)
        // item 16790003
        i += 2;
    }
    // item 1683
    return {
    	top: top,
    	bottom: bottom
    }
}

function genericRender(method, args) {
    // item 1351
    var textureId = args[0]
    var item = gItems[textureId]
    // item 1353
    if (self.renderToTexture) {
        // item 1352
        var ctx = item.context
        // item 1359
        args[0] = ctx
        // item 1361
        method.apply(null, args)
    } else {
        // item 1358
        var draw = function() {
        	var ctx = getContext()
        	args[0] = ctx
        	method.apply(null, args)
        }
        // item 1357
        addDirect(item, draw)
    }
}

function getBackground() {
    // item 1404
    return gBackground
}

function getCoarseFontHeight() {
    // item 539
    var body = gDoc.getElementsByTagName("body")[0];
    var dummy = gDoc.createElement("div");
    dummy.setAttribute("style", 
    "position:absolute;top:0;left:0;margin:0px;padding:0px;");
    dummy.innerHTML = 
     "<span style='font:" + gFont.font + "'>Mg</span>";
    
    body.appendChild(dummy);
    var height = dummy.clientHeight;
    
    body.removeChild(dummy);
    // item 540
    return height;
}

function getContext() {
    // item 1369
    return gContext
}

function getEx(item, x) {
    // item 2901
    var ex
    var midX = Math.abs(x) < item.w / 2
    // item 2898
    if (midX) {
        // item 2900
        ex = item.x
    } else {
        // item 2893
        if (x < 0) {
            // item 2896
            ex = item.x - item.w * 2 / 3
        } else {
            // item 2897
            ex = item.x + item.w * 2 / 3
        }
    }
    // item 2917
    return ex
}

function getEy(item, y) {
    // item 2915
    var ey
    var midY = Math.abs(y) < item.h / 2
    // item 2912
    if (midY) {
        // item 2914
        ey = item.y
    } else {
        // item 2907
        if (y < 0) {
            // item 2910
            ey = item.y - item.h * 2 / 3
        } else {
            // item 2911
            ey = item.y + item.h * 2 / 3
        }
    }
    // item 2916
    return ey
}

function getFillColor(color) {
    // item 1753
    if (color) {
        // item 1757
        if (color.length == 7) {
            // item 1756
            return color
        } else {
            // item 1759
            var parts = color.split(" ")
            // item 1763
            if ((parts.length == 3) && (parts[0] == "gradient")) {
                // item 1762
                var bottomColor = parts[2]
                // item 1764
                return bottomColor
            } else {
                // item 1755
                return ""
            }
        }
    } else {
        // item 1755
        return ""
    }
}

function getFineFontHeight(coarseHeight) {
    // item 546
        var h = coarseHeight * 2;    
    
    
        var fontDraw = gDoc.createElement("canvas");
        fontDraw.width = h;
        fontDraw.height = h;
        fontDraw.style.width = h + "px";
        fontDraw.style.height = h + "px";
        var ctx = fontDraw.getContext('2d');
        ctx.fillRect(0, 0, fontDraw.width, fontDraw.height);
        ctx.textBaseline = 'top';
        ctx.fillStyle = 'white';
        ctx.font = gFont.font;
        ctx.fillText('gM', 0, 1);
        var pixels = ctx.getImageData(0, 0, fontDraw.width, fontDraw.height).data;
        var start = -1;
        var end = -1;
        for (var row = 0; row < fontDraw.height; row++) 
        {
          for (var column = 0; column < fontDraw.width; column++) 
          {
            var index = (row * fontDraw.width + column) * 4;
            if (pixels[index] === 0) {
              if (column === fontDraw.width - 1 && start !== -1) {
                end = row;
                row = fontDraw.height;
                break;
              }
              continue;
            }
            else 
            {
              if (start === -1) 
              {
                start = row;
              }
              break;
            }
          }
        }
        return end - start;
}

function getFontHeight() {
    // item 2861
    var size = HtmlUtils.getFontHeight(
    	gFont.face,
    	gFont.size,
    	gFont.font
    )
    // item 2877
    if (USE_SIMPLE_MEASURE) {
        // item 2880
        size = null
    }
    // item 2862
    if (size) {
        
    } else {
        // item 2866
        size = gFont.size
    }
    // item 55
    return Math.floor(size);
}

function getPlane(name) {
    // item 83
    if (name in gPlanes) {
        // item 86
        return gPlanes[name];
    } else {
        // item 87
        throw "Unknown plane: " + name;
    }
}

function getRayCount(r) {
    // item 2657
    var rays
    // item 2658
    if (r > 40) {
        // item 2661
        rays = r / 3
    } else {
        // item 2619
        rays = r
    }
    // item 2620
    return Math.max(6, Math.floor(rays))
}

function getTHor(item, y) {
    // item 2925
    var t = item.w / 8
    // item 2941
    var diff = Math.abs(item.h - Math.abs(y))
    t = Math.min(t, diff / 4)
    t = Math.max(t, 15)
    // item 2927
    return t
}

function getTVer(item, x) {
    // item 2933
    var t = item.h / 8
    // item 2944
    var diff = Math.abs(item.w - Math.abs(x))
    t = Math.min(t, diff / 4)
    t = Math.max(t, 8)
    // item 2935
    return t
}

function getThickness(thickness) {
    // item 1449
    if (typeof thickness == "number") {
        // item 1452
        return thickness
    } else {
        // item 1453
        return 1
    }
}

function hscroll_render(ctx, x, y, w, h, format) {
    // item 2085
    drawActionCore(
    	ctx,
    	x,
    	y,
    	w,
    	h,
    	format
    )
    // item 2086
    ctx.fillStyle = format.lineColor
    // item 2088
    var padding = h / 4
    var y0 = y - h + padding
    var y1 = y + h - padding
    var x0 = x - w + padding
    var x1 = x - w + h * 1.5
    var x2 = x + w - h * 1.5
    var x3 = x + w - padding
    // item 2087
    ctx.beginPath();
    ctx.moveTo(x0, y)
    ctx.lineTo(x1, y0)
    ctx.lineTo(x1, y1)
    ctx.closePath()
    // item 2090
    ctx.fill()
    // item 2089
    ctx.beginPath();
    ctx.moveTo(x2, y0)
    ctx.lineTo(x3, y)
    ctx.lineTo(x2, y1)
    ctx.closePath()
    // item 2091
    ctx.fill()
}

function human_render(ctx, x, y, w, h, format) {
    // item 2393
    setStyleForMore(ctx, format)
    // item 2394
    ctx.fillStyle = format.fillColor
    // item 2397
    if (shouldShift(ctx.lineWidth)) {
        // item 2400
        x += 0.5
        y += 0.5
    }
    // item 2396
    var top = y - h
    var bottom = y + h
    var w2 = w * 2
    var h2 = h * 2
    // item 2457
    var l = Math.round(h2 * 0.4)
    var m = 0 //Math.round(h / 30)
    var r2 = Math.floor((w2 - m * 3) / 8)
    var r = Math.round(r2 * 1.5)
    var k = Math.round(r * 2.3)
    var ar = Math.round(r2 * 0.8)
    // item 2724
    var right = x + r2 * 2 + ar * 2
    // item 2462
    var rpdm = right - ar * 2
    var rbok = rpdm - m
    var rc = rbok - r2
    var rgr = rbok - r2 * 2
    var lgr = rgr - m
    var lc = lgr - r2
    var lbok = lgr - r2 * 2
    var lpdm = lbok - m
    var left = lpdm - ar * 2
    var ln = lpdm - r2
    var hx = Math.round((lgr + rgr) / 2)
    // item 2463
    var ttop = top + k
    var pdm = ttop + ar * 2
    var ph = bottom - l
    var ld = bottom - r2
    // item 2458
    circlePath(ctx, hx, top + r, r)
    ctx.fill()
    ctx.stroke()
    // item 2459
    ctx.beginPath()
    ctx.moveTo(rpdm, ttop)
    ctx.arc(rpdm, pdm, ar * 2, -Math.PI / 2, 0)
    ctx.lineTo(right, ph)
    ctx.arc(right - ar, ph, ar, 0, Math.PI)
    ctx.lineTo(rpdm, pdm)
    ctx.lineTo(rbok, pdm)
    ctx.lineTo(rbok, ld)
    ctx.arc(rc, ld, r2, 0, Math.PI)
    ctx.lineTo(rgr, ph)
    ctx.lineTo(lgr, ph)
    ctx.lineTo(lgr, ld)
    ctx.arc(lc, ld, r2, 0, Math.PI)
    ctx.lineTo(lbok, pdm)
    ctx.lineTo(lpdm, pdm)
    ctx.lineTo(lpdm, ph)
    ctx.arc(lpdm - ar, ph, ar, 0, Math.PI)
    ctx.lineTo(left, ttop + ar * 2)
    ctx.arc(left + ar * 2, ttop + ar * 2, ar * 2, -Math.PI, -Math.PI / 2)
    ctx.closePath()
    // item 2461
    ctx.fill()
    ctx.stroke()
}

function isAboveNESW(bx, by, x, y) {
    // item 997
    x -= bx
    y -= by
    // item 995
    var value = x - bx + by - y
    // item 996
    return -x > y
}

function isAboveNWSE(bx, by, x, y) {
    // item 994
    x -= bx
    y -= by
    // item 965
    var value = x - bx + by - y
    // item 966
    return x > y
}

function left_angle(ctx, x, y, w, h) {
    // item 2191
    var padding = h * 0.3
    // item 2189
    var x0 = x - w / 3
    var x1 = x + w / 3
    var y0 = y - h + padding
    var y1 = y + h - padding
    // item 2190
    line2(
    	ctx,
    	x1, y0,
    	x0, y,
    	x1, y1
    )
}

function left_render(ctx, x, y, w, h, format) {
    // item 2183
    setStyleForMore(ctx, format)
    // item 2182
    left_angle(ctx, x, y, w, h)
}

function left_render2(ctx, x, y, w, h, format) {
    // item 2213
    setStyleForMore(ctx, format)
    // item 2214
    var dx = w / 3
    // item 2212
    left_angle(ctx, x - dx, y, w, h)
    left_angle(ctx, x + dx, y, w, h)
}

function line1(ctx, x0, y0, x1, y1) {
    // item 2146
    ctx.beginPath();
    ctx.moveTo(x0, y0)
    ctx.lineTo(x1, y1)
    ctx.stroke()
}

function line2(ctx, x0, y0, x1, y1, x2, y2) {
    // item 2175
    ctx.beginPath();
    ctx.moveTo(x0, y0)
    ctx.lineTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()
}

function makeCylinderHeight(w) {
    // item 2722
    return Math.round(w * 10)
}

function makeDirty() {
    // item 499
    this.dirty = true;
}

function makePlanes() {
    // item 93
    return {
    	lines: [],
    	line_candies: [],
    	icons: [],
    	icon_candies: [],
    	sockets: [],
    	free: [],
    	free_candies: [],
    	guides: []
    };
}

function measureTextWidth(text) {
    // item 50
    var width = gTextContext.measureText(text).width;
    // item 51
    return Math.round(width);
}

function menu_render(ctx, x, y, w, h, format) {
    // item 2169
    setStyleForMore(ctx, format)
    // item 2366
    if (shouldShift(ctx.lineWidth)) {
        // item 2369
        x += 0.5
        y += 0.5
    }
    // item 2137
    var xp = Math.round(w * 0.5)
    var yp = Math.round(h * 0.5)
    var x0 = x - w + xp
    var x1 = x + w - xp
    var y0 = y - h + yp
    var y1 = y + h - yp
    // item 2139
    line1(ctx, x0, y0, x1, y0)
    line1(ctx, x0, y, x1, y)
    line1(ctx, x0, y1, x1, y1)
}

function moveItem(id, x, y) {
    // item 515
    var item = gItems[id];
    item.x = x;
    item.y = y;
}

function nextId() {
    // item 68
    gNextItem++;
    // item 69
    return gNextItem;
}

function notebook_render(ctx, x, y, w, h, format) {
    // item 2487
    setStyleForMore(ctx, format)
    // item 2488
    var border = Math.round(h / 5)
    var tp = Math.round(w / 5)
    var r = border
    // item 2511
    roundedRectShape(
    	ctx,
    	x,
    	y,
    	w - border * 2,
    	h,
    	[0, 0, r, 0]
    )
    ctx.fill()
    // item 2512
    ctx.fillRect(
    	x - w,
    	y + h - border,
    	w * 2,
    	border
    )
    // item 2489
    ctx.fillStyle = format.fillColor
    ctx.fillRect(
    	x - w + border * 3,
    	y - h + border,
    	w * 2 - border * 6,
    	h * 2 - border * 2
    )
    // item 2513
    ctx.fillRect(
    	x - tp,
    	y + h - border,
    	tp * 2,
    	border / 2
    )
}

function pc_render(ctx, x, y, w, h, format) {
    // item 2380
    setStyleForMore(ctx, format)
    // item 2383
    var x0 = x - w
    var y0 = y - h
    var w2 = w * 2
    var h2 = h * 2
    
    var p = Math.ceil(h / 10)
    var m = Math.round(h2 * 0.8)
    var n = Math.round(w2 * 0.2)
    
    var y1 = y0 + p
    var y3 = x + h - p
    // item 2453
    ctx.fillStyle = format.lineColor
    ctx.fillRect(x0, y0, w2, m)
    // item 2454
    ctx.fillStyle = format.fillColor
    ctx.fillRect(x0 + p, y0 + p, w2 - p * 2, m - p * 2)
    // item 2455
    ctx.fillStyle = format.lineColor
    ctx.fillRect(x - n / 2, y0 + m, n, h2 - m - p)
    // item 2456
    ctx.fillStyle = format.lineColor
    ctx.fillRect(x - n, y + h - p, n * 2, p)
}

function phone_render(ctx, x, y, w, h, format) {
    // item 2432
    setStyleForMore(ctx, format)
    // item 2467
    var r = w / 5
    var border = h / 4
    var m = w / 4
    var button = Math.round(y + h - border / 2)
    // item 2478
    if (shouldShift(ctx.lineWidth)) {
        // item 2481
        button += 0.5
    }
    // item 2464
    roundedRectShape(
    	ctx,
    	x,
    	y,
    	w,
    	h,
    	[0, 0, r, 0]
    )
    // item 2465
    ctx.fill()
    // item 2468
    ctx.fillStyle = format.fillColor
    ctx.fillRect(
    	x - w + ctx.lineWidth,
    	y - h + border,
    	w * 2 - ctx.lineWidth * 2,
    	h * 2 - border * 2
    )
    // item 2469
    ctx.strokeStyle = format.fillColor
    // item 2470
    line1(
    	ctx,
    	x - m,
    	button,
    	x + m,
    	button
    )
}

function portrait_render(ctx, x, y, w, h, format) {
    // item 2498
    setStyleForMore(ctx, format)
    // item 2504
    ctx.fillStyle = format.fillColor
    // item 2507
    if (shouldShift(ctx.lineWidth)) {
        // item 2510
        x += 0.5
        y += 0.5
    }
    // item 2505
    var left = x - w
    var right = x + w
    var top = y - h
    var bottom = y + h
    // item 2499
    var g = 0.3
    var r = h / (2 + g)
    var b = r * 0.4
    
    var nh = r * 0.8
    var ux = x + nh
    var uy = y + 0.2 * h
    var mx = x - nh
    var wy = y + 0.6 * h
    var vy = (uy + wy) / 2
    // item 2500
    ctx.beginPath()
    ctx.moveTo(x - r, top + r)
    ctx.arc(x, top + r, r, -Math.PI, 0)
    ctx.lineTo(x + r, top + r + b)
    ctx.arc(x, top + r + b, r, 0, Math.PI)
    ctx.closePath()
    ctx.fill()
    ctx.stroke()
    // item 2506
    ctx.beginPath()
    ctx.moveTo(x, wy)
    ctx.lineTo(ux, uy)
    ctx.lineTo(right, vy)
    ctx.lineTo(right, bottom)
    ctx.lineTo(left, bottom)
    ctx.lineTo(left, vy)
    ctx.lineTo(mx, uy)
    ctx.closePath()
    ctx.fill()
    ctx.stroke()
}

function restoreContext(context, item) {
    // item 2040
    if (item.angle) {
        // item 2039
        context.restore()
    }
}

function rfalse_render(ctx, x, y, w, h, format) {
    // item 2274
    setStyleForMore(ctx, format)
    // item 2275
    ctx.fillStyle = format.fillColor
    // item 2277
    var xr = w * 0.8
    var yr = h * 0.8
    // item 2276
    circlePath(ctx, x, y, xr)
    
    ctx.fill()
    ctx.stroke()
}

function right_angle(ctx, x, y, w, h) {
    // item 2199
    var padding = h * 0.3
    // item 2197
    var x0 = x - w / 3
    var x1 = x + w / 3
    var y0 = y - h + padding
    var y1 = y + h - padding
    // item 2198
    line2(
    	ctx,
    	x0, y0,
    	x1, y,
    	x0, y1
    )
}

function right_render(ctx, x, y, w, h, format) {
    // item 2206
    setStyleForMore(ctx, format)
    // item 2205
    right_angle(ctx, x, y, w, h)
}

function right_render2(ctx, x, y, w, h, format) {
    // item 2221
    setStyleForMore(ctx, format)
    // item 2222
    var dx = w / 3
    // item 2220
    right_angle(ctx, x - dx, y, w, h)
    right_angle(ctx, x + dx, y, w, h)
}

function rotateTexture(context, item, left, top) {
    // item 2028
    if (item.angle) {
        // item 2033
        var cx = left + item.width / 2 - SHADOW_BORDER / 2
        var cy = top + item.height / 2 - SHADOW_BORDER / 2
        // item 2031
        context.save()
        // item 2032
        context.translate(cx, cy)
        context.rotate(item.angle)
        context.translate(-cx, -cy)
    }
}

function roundedRectShape(ctx, x, y, w, h, points) {
    // item 1741
    var radius = points[2]
    var border = points[3]
    // item 1740
    var left = x - w
    var right = x + w
    var top = y - h
    var bottom = y + h
    var width = w * 2
    var height = h * 2
    // item 1738
    var x0 = left + border;
    var x1 = x0 + radius;
    var x3 = right - border;
    var x2 = x3 - radius;
    // item 1739
    var y0 = top + border;
    var y1 = y0 + radius;
    var y3 = bottom - border;
    var y2 = y3 - radius;
    // item 1737
    ctx.beginPath();
    ctx.arc(x1, y1, radius, Math.PI * 1.0, Math.PI * 1.5);
    ctx.lineTo(x2, y0);
    ctx.arc(x2, y1, radius, Math.PI * 1.5, Math.PI * 0);
    ctx.lineTo(x3, y2);
    ctx.arc(x2, y2, radius, Math.PI * 0, Math.PI * 0.5);
    ctx.lineTo(x1, y3);
    ctx.arc(x1, y2, radius, Math.PI * 0.5, Math.PI * 1.0);
    ctx.closePath();
}

function rtrue_render(ctx, x, y, w, h, format) {
    // item 2283
    rfalse_render(ctx, x, y, w, h, format)
    // item 2284
    setStyleForMore(ctx, format)
    // item 2286
    var xr = w * 0.3
    var yr = h * 0.3
    // item 2285
    ctx.beginPath()
    safeEllipse(ctx, x, y, xr, yr, 0, 0, Math.PI * 2)
    ctx.fill()
}

function safeEllipse(ctx, cx, cy, rx, ry) {
    // item 2640
    if (ctx.ellipse) {
        // item 2643
        ctx.ellipse(
        	cx,
        	cy,
        	rx,
        	ry,
        	0,
        	0,
        	Math.PI * 2
        )
    } else {
        // item 2645
        var r, scaleX, scaleY
        // item 2647
        if (ry > rx) {
            // item 2650
            r = rx
            scaleX = 1
            scaleY = ry / rx
        } else {
            // item 2651
            r = ry
            scaleY = 1
            scaleX = rx / ry
        }
        // item 2639
        var sp = new SafePath(
        	ctx,
        	cx, cy,
        	scaleX, scaleY
        )
        // item 2644
        sp.arc(
        	cx,
        	cy,
        	r,
        	0,
        	2 * Math.PI
        )
    }
}

function search_render(ctx, x, y, w, h, format) {
    // item 2298
    var h2 = h * 0.6
    var w2 = h2
    var r = h2 * 0.8
    var cx = x - w2 + r
    var cy = y - h2 + r
    var x2 = x + w2
    var y2 = y + h2
    var mx = Math.cos(Math.PI / 4) * r
    var x1 = cx + mx
    var y1 = cy + mx
    // item 2295
    setStyleForMore(ctx, format)
    // item 2296
    ctx.beginPath()
    safeEllipse(ctx, cx, cy, r, r)
    ctx.stroke()
    // item 2299
    line1(ctx, x1, y1, x2, y2)
}

function server1_render(ctx, x, y, w, h, format) {
    // item 2406
    setStyleForMore(ctx, format)
    // item 2407
    ctx.fillStyle = format.fillColor
    // item 2410
    if (shouldShift(ctx.lineWidth)) {
        // item 2413
        x += 0.5
        y += 0.5
    }
    // item 2536
    var r = w / 5
    // item 2534
    roundedRectShape(
    	ctx,
    	x,
    	y,
    	w,
    	h,
    	[0, 0, r, 0]
    )
    // item 2535
    ctx.fill()
    ctx.stroke()
    // item 2537
    var border = Math.round(h / 6)
    var left = x - w + border
    var right = x + w - border
    var cy = y - h + border
    var w2 = w * 2 - border * 2
    // item 2538
    ctx.strokeRect(left, cy, w2, border)
    cy += border * 2
    // item 2539
    line1(ctx, left, cy, right, cy)
    cy += border
    // item 2540
    line1(ctx, left, cy, right, cy)
    cy += border
    // item 2542
    line1(ctx, left, cy, right, cy)
    cy += border
    // item 2541
    cy = y + h - border * 3
    line1(ctx, left, cy, right, cy)
    // item 2543
    circlePath(ctx, x, cy, border)
    ctx.fill()
    ctx.stroke()
}

function server2_render(ctx, x, y, w, h, format) {
    // item 2419
    setStyleForMore(ctx, format)
    // item 2420
    ctx.fillStyle = format.fillColor
    // item 2423
    if (shouldShift(ctx.lineWidth)) {
        // item 2426
        x += 0.5
        y += 0.5
    }
    // item 2422
    var x0 = x - w
    var y0 = y - h
    var w2 = w * 2
    var h2 = h * 2
    // item 2421
    ctx.fillRect(x0, y0, w2, h2)
    ctx.strokeRect(x0, y0, w2, h2)
    // item 2544
    var b = Math.round(w / 8)
    var vx = x - w + b * 2
    var i
    // item 25460001
    i = 0;
    while (true) {
        // item 25460002
        if (i < 4) {
            
        } else {
            break;
        }
        // item 2545
        line1(ctx, vx, y - h, vx, y + h)
        vx += b
        // item 25460003
        i++;
    }
    // item 2548
    var top = y - b
    // item 2549
    ctx.strokeRect(
    	x + w - b * 4,
    	top,
    	b,
    	b
    )
    // item 2550
    ctx.strokeRect(
    	x + w - b * 2,
    	top,
    	b,
    	b
    )
    // item 2551
    line1(
    	ctx,
    	x - w, y + b,
    	x + w, y + b
    )
}

function setBackground(color) {
    // item 1398
    gBackground = color
}

function setDefaultFont(font) {
    // item 1510
    var italic, bold, size, family
    // item 1511
    if (font) {
        // item 1514
        var parsed = Utils.parseFontString(font)
        // item 1515
        italic = parsed.italic
        bold = parsed.bold
        size = parsed.size
        family = parsed.family
    } else {
        // item 2867
        italic = false
        bold = false
        size = Config.FONT_SIZE_1
        family = Config.FONT_FAMILY_1
        // item 1516
        font = Utils.buildFontString(
        	italic,
        	bold,
        	size,
        	family
        )
    }
    // item 2876
    gDefaultFont = new FontRecord(
    	font,
    	italic,
    	bold,
    	size,
    	family
    )
    // item 1519
    gFont = gDefaultFont
    // item 1509
    gTextContext.font = font
}

function setFillStyle(ctx, color, top, bottom) {
    // item 1420
    var style
    // item 1410
    if (color) {
        // item 1415
        if (color.length == 7) {
            // item 1414
            style = color
        } else {
            // item 1417
            var parts = color.split(" ")
            // item 1423
            if ((parts.length == 3) && (parts[0] == "gradient")) {
                // item 1422
                var topColor = parts[1]
                var bottomColor = parts[2]
                // item 1419
                var grad = ctx.createLinearGradient(0, top, 0, bottom)
                grad.addColorStop(0, topColor)
                grad.addColorStop(1, bottomColor)
                // item 1425
                style = grad
            } else {
                // item 1413
                style = ""
            }
        }
    } else {
        // item 1413
        style = ""
    }
    // item 1421
    ctx.fillStyle = style
}

function setFont(font) {
    // item 1495
    if (font) {
        // item 1498
        var parsed = Utils.parseFontString(font)
        // item 1502
        gFont = new FontRecord(
        	font,
        	parsed.italic,
        	parsed.bold,
        	parsed.size,
        	parsed.family
        )
    } else {
        // item 1520
        gFont = gDefaultFont
    }
    // item 771
    gTextContext.font = gFont.font
}

function setItemProperty(id, name, value) {
    // item 509
    var item = gItems[id];
    item[name] = value;
}

function setLineStyle(ctx, format) {
    // item 1573
    var color = format.lineColor
    var thickness = format.lineThickness
    var style = format.lineStyle
    // item 1454
    if ((thickness == 0) || (!(color))) {
        // item 1458
        return 0
    } else {
        // item 1435
        var width = getThickness(thickness)
        // item 1431
        ctx.strokeStyle = color
        ctx.lineWidth = width
        ctx.lineCap = "round"
        // item 1870
        setStyle(ctx, style, thickness)
        // item 1457
        return width
    }
}

function setShadow(ctx, shadow) {
    // item 1535
    if (shadow) {
        // item 1540
        var offset = 4 * self.zoom * self.retina
        // item 1526
        ctx.shadowColor = "rgba(0, 0, 0, 0.6)"
        ctx.shadowBlur = 10 * self.zoom
        ctx.shadowOffsetX = offset
        ctx.shadowOffsetY = offset
    }
}

function setStyle(ctx, style, thickness) {
    // item 1859
    var segments
    var i
    // item 18450001
    if (style === "solid") {
        // item 1860
        segments = []
    } else {
        // item 18450002
        if (style === "s-1") {
            // item 1863
            segments = [1, 2]
            // item 18680001
            i = 0;
            while (true) {
                // item 18680002
                if (i < segments.length) {
                    
                } else {
                    break;
                }
                // item 1867
                segments[i] *= thickness
                // item 18680003
                i++;
            }
        } else {
            // item 18450003
            if (style === "s-2") {
                // item 1864
                segments = [3, 4]
                // item 18680001
                i = 0;
                while (true) {
                    // item 18680002
                    if (i < segments.length) {
                        
                    } else {
                        break;
                    }
                    // item 1867
                    segments[i] *= thickness
                    // item 18680003
                    i++;
                }
            } else {
                // item 18450004
                if (style === "s-3") {
                    // item 1865
                    segments = [7, 8]
                    // item 18680001
                    i = 0;
                    while (true) {
                        // item 18680002
                        if (i < segments.length) {
                            
                        } else {
                            break;
                        }
                        // item 1867
                        segments[i] *= thickness
                        // item 18680003
                        i++;
                    }
                } else {
                    // item 18450005
                    if (style === "s-4") {
                        // item 1866
                        segments = [16, 16]
                        // item 18680001
                        i = 0;
                        while (true) {
                            // item 18680002
                            if (i < segments.length) {
                                
                            } else {
                                break;
                            }
                            // item 1867
                            segments[i] *= thickness
                            // item 18680003
                            i++;
                        }
                    } else {
                        // item 1861
                        segments = []
                    }
                }
            }
        }
    }
    // item 1862
    ctx.setLineDash(segments)
}

function setStyleForMore(ctx, format) {
    // item 2361
    var thickness = format.lineThickness
    // item 2166
    ctx.fillStyle = format.lineColor
    ctx.strokeStyle = format.lineColor
    ctx.lineWidth = getThickness(thickness) || 1
}

function setTitle(title) {
    
}

function setTransform(dx, dy, zoom, retina) {
    // item 2809
    self.dx = dx
    self.dy = dy
    self.zoom = zoom
    self.retina = retina
}

function shouldShift(width) {
    // item 1482
    return width % 2 == 1
}

function simpleShadow(ctx, x, y, makeShape) {
    // item 1810
    ctx.fillStyle = SHADOW_STYLE
    // item 2374
    var sx = SHADOW_SHIFT_X * self.zoom
    var sy = SHADOW_SHIFT_Y * self.zoom
    // item 1805
    makeShape(
    	ctx,
    	x + sx,
    	y + sy
    )
    // item 1807
    ctx.fill()
}

function sp_arc(cx, cy, r, start, end) {
    // item 2596
    var cos = Math.cos
    var sin = Math.sin
    var ctx = this.ctx
    // item 2587
    var count = getRayCount(r)
    var diff = end - start
    var i
    // item 25880001
    i = 0;
    while (true) {
        // item 25880002
        if (i <= count) {
            
        } else {
            break;
        }
        // item 2590
        var angle
        // item 2591
        if (i == count) {
            // item 2594
            angle = end
        } else {
            // item 2595
            angle = start + diff * i / count
        }
        // item 2597
        var x = cos(angle) * r + cx
        var y = sin(angle) * r + cy
        // item 2598
        var x1 = this.transformX(x)
        var y1 = this.transformY(y)
        // item 2599
        this.ctx.lineTo(x1, y1)
        // item 25880003
        i++;
    }
}

function sp_lineTo(x, y) {
    // item 2580
    var x1 = this.transformX(x)
    var y1 = this.transformY(y)
    // item 2581
    this.ctx.lineTo(x1, y1)
}

function sp_moveTo(x, y) {
    // item 2573
    var x1 = this.transformX(x)
    var y1 = this.transformY(y)
    // item 2574
    this.ctx.moveTo(x1, y1)
}

function sp_x(x) {
    // item 2605
    var origin = this.ox
    var x2 = (x - origin) * this.scaleX + origin
    // item 2606
    return x2
}

function sp_y(y) {
    // item 2612
    var origin = this.oy
    var y2 = (y - origin) * this.scaleY + origin
    // item 2613
    return y2
}

function tablet_render(ctx, x, y, w, h, format) {
    // item 2471
    setStyleForMore(ctx, format)
    // item 2474
    var r = w / 5
    var border = h / 4
    var m = w / 4
    // item 2472
    roundedRectShape(
    	ctx,
    	x,
    	y,
    	w,
    	h,
    	[0, 0, r, 0]
    )
    // item 2473
    ctx.fill()
    // item 2475
    ctx.fillStyle = format.fillColor
    ctx.fillRect(
    	x - w + ctx.lineWidth,
    	y - h + border,
    	w * 2 - ctx.lineWidth * 2,
    	h * 2 - border * 2
    )
    // item 2476
    circlePath(
    	ctx,
    	x,
    	y - h + border / 2,
    	border / 4
    )
    // item 2477
    ctx.fill()
}

function tri(ctx, x0, y0, x1, y1, x2, y2) {
    // item 2152
    ctx.beginPath();
    ctx.moveTo(x0, y0)
    ctx.lineTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.closePath()
    ctx.fill()
    ctx.stroke()
}

function up_render(ctx, x, y, w, h, format) {
    // item 2520
    setStyleForMore(ctx, format)
    // item 2523
    var padding = w * 0.3
    // item 2521
    var y0 = y - h / 3
    var y1 = y + h / 3
    var x0 = x - w + padding
    var x1 = x + w - padding
    // item 2522
    line2(
    	ctx,
    	x0, y1,
    	x, y0,
    	x1, y1
    )
}

function updateFontMetrics() {
    // item 43
    var height0 = getCoarseFontHeight();
    var height = getFineFontHeight(height0);
    // item 547
    var isFirefox = typeof InstallTrigger !== 'undefined';
    // item 552
    console.log("font height", height);
    // item 44
    //gFontHeight = height;
    gTextContext.font = gFont.font
}

function vscroll_render(ctx, x, y, w, h, format) {
    // item 2061
    drawActionCore(
    	ctx,
    	x,
    	y,
    	w,
    	h,
    	format
    )
    // item 2071
    ctx.fillStyle = format.lineColor
    // item 2076
    var padding = w / 4
    var x0 = x - w + padding
    var x1 = x + w - padding
    var y0 = y - h + padding
    var y1 = y - h + w * 1.5
    var y2 = y + h - w * 1.5
    var y3 = y + h - padding
    // item 2075
    ctx.beginPath();
    ctx.moveTo(x0, y1)
    ctx.lineTo(x, y0)
    ctx.lineTo(x1, y1)
    ctx.closePath()
    // item 2078
    ctx.fill()
    // item 2077
    ctx.beginPath();
    ctx.moveTo(x, y3)
    ctx.lineTo(x0, y2)
    ctx.lineTo(x1, y2)
    ctx.closePath()
    // item 2079
    ctx.fill()
}


var tfont = Utils.buildFontString(
	false,
	false,
	Config.FONT_SIZE,
	Config.FONT_FAMILY
)
setFont(tfont)

	gMoveAllImage = new Image()
	gMoveAllImage.onload = function() {
		gMoveAllImageReady = true
	}
	gMoveAllImage.src = "images/4-way-pan.png"

	gVideoImage = new Image()
	gLinkImage = new Image()
	gPictureImage = new Image()
	gVideoImage.src = "images/video-s.png"
	gLinkImage.src = "images/link-s.png"
	gPictureImage.src = "images/picture-s.png"



	moreCallbacks.f_ui_vscroll = vscroll_render
	moreCallbacks.f_ui_hscroll = 	hscroll_render
	moreCallbacks.f_ui_cross = 	cross_render
	moreCallbacks.f_ui_check = 	check_render
	moreCallbacks.f_ui_menu = 	menu_render
	moreCallbacks.f_ui_combo = 	combo_render
	moreCallbacks.f_ui_left = 	left_render
	moreCallbacks.f_ui_left2 = 	left_render2
	moreCallbacks.f_ui_right = 	right_render
	moreCallbacks.f_ui_right2 = 	right_render2
	moreCallbacks.f_ui_radio_false = rfalse_render
	moreCallbacks.f_ui_radio_true = rtrue_render
	moreCallbacks.f_ui_check_false = cfalse_render
	moreCallbacks.f_ui_check_true = ctrue_render
	moreCallbacks.f_ui_search = search_render
	moreCallbacks.f_ui_dots3h = dots3h_render
	moreCallbacks.f_ui_dots3v = dots3v_render
	moreCallbacks.f_ui_close = close_render
	moreCallbacks.f_ui_close_mac = close_mac_render
	moreCallbacks.f_ui_up = up_render
	moreCallbacks.f_ui_down = down_render


	moreCallbacks.f_ar_pc = pc_render
	moreCallbacks.f_ar_human = human_render
	moreCallbacks.f_ar_server1 = server1_render
	moreCallbacks.f_ar_server2 = server2_render
	moreCallbacks.f_ar_phone = phone_render
	moreCallbacks.f_ar_tablet = tablet_render
	moreCallbacks.f_ar_notebook = notebook_render
	moreCallbacks.f_ar_portrait = portrait_render


	this.getFontHeight = getFontHeight;
	this.measureTextWidth = measureTextWidth;
	this.setFont = setFont;

	this.createVertical = createVertical;
	this.createHorizontal = createHorizontal;
	this.createVCandy = createVCandy;
	this.createHCandy = createHCandy;
	this.createJCandy = createJCandy;
	this.addSocket = addSocket;
	this.createRCorner = createRCorner
	this.createFreeHorizontal = createFreeHorizontal
	this.createCalloutArrow = createCalloutArrow

	this.deleteItem = deleteItem;
	this.setItemProperty = setItemProperty;
	this.moveItem = moveItem;

	this.draw = draw;
	this.clear = clear;
	this.makeDirty = makeDirty;
	this.cleanDirty = cleanDirty;
	this.setTitle = setTitle;

	this.createTexture = createTexture;
	this.drawText = drawText;

	this.setBackground = setBackground
	this.getBackground = getBackground

	this.setDefaultFont = setDefaultFont
	this.drawShape = drawShape

	this.createLine = createLine
	this.createMoveAll= createMoveAll
	this.clearGuides = clearGuides
	this.drawLinkIcon = drawLinkIcon

	this.setTransform = setTransform
}
