function DrakonModule() {

var gNarrow = {};
gNarrow.beginend = true;
gNarrow.pause = true;
gNarrow.ctrlStart = true;
gNarrow.ctrlEnd = true;
gNarrow.timer = true;
gNarrow.end = true;


var Items = null;

// Autogenerated with DRAKON Editor 1.32


function BlockScan() {
    // item 658
    this.starts = [];
    this.tsUp = [];
    this.tsDown = [];
    this.visited = {};
    this.top = null;
    this.bottom = null;
    this.addressEnd = false;
}

function BlockSelection() {
    // item 507
    this.addressEnd = false;
    this.nodes = {};
    this.top = null;
    this.bottom = null;
    this.oldIds = {};
}

function Selection(simplified) {
    // item 941
    this.simplified = simplified
    this.ids = {};
    this.block = new BlockSelection();
    this.blockSelect = blockSelect;
    // item 942
    this.add = function(id, isGreen) {
    	if (isGreen) {
    		this.ids[id] = "green";
    	} else {
    		this.ids[id] = "blue";
    	}
    }
}

function addDuration(graph, node, visited) {
    // item 888
    var duration = getDuration(graph, node);
    // item 889
    if (duration) {
        // item 892
        visited[duration.id] = true;
    }
}

function addIdToStarts(scan, id) {
    // item 750
    if (id) {
        // item 753
        scan.starts.push(id);
    }
}

function addJunctionNeighbours(graph, starts, node) {
    // item 1152
    addNeighboursToStarts(
    	graph,
    	starts,
    	node,
    	true,
    	true);
    // item 1195
    if (shouldJunctionExpand(node)) {
        // item 1198
        expandJunction(
        	graph,
        	starts,
        	node.id
        )
    }
}

function addNeighboursToStarts(graph, starts, node, up, down) {
    // item 763
    var id;
    // item 759
    if (node.left) {
        // item 762
        id = graph.getNodeLeft(node);
        // item 764
        starts.push(id);
    }
    // item 765
    if ((node.up) && (up)) {
        // item 768
        id = graph.getNodeUp(node);
        // item 769
        starts.push(id);
    }
    // item 770
    if (node.right) {
        // item 773
        id = graph.getNodeRight(node);
        // item 774
        starts.push(id);
    }
    // item 775
    if ((node.down) && (down)) {
        // item 778
        id = graph.getNodeDown(node);
        // item 779
        starts.push(id);
    }
}

function addToCommands(pgraph, movedNodes, id, fields, commands) {
    // item 1356
    buildMoveCommands(
    	pgraph,
    	movedNodes,
    	commands
    )
    // item 1362
    var names = Object.keys(fields)
    // item 1359
    if (names.length == 0) {
        
    } else {
        // item 1357
        var change = getOrCreateUpdate(
        	commands,
        	id
        );
        // item 13630001
        var _ind1363 = 0;
        var _col1363 = names;
        var _len1363 = _col1363.length;
        while (true) {
            // item 13630002
            if (_ind1363 < _len1363) {
                
            } else {
                break;
            }
            // item 13630004
            var name = _col1363[_ind1363];
            // item 1358
            change.fields[name] = fields[name];
            // item 13630003
            _ind1363++;
        }
    }
}

function addToSelection(selection, nodes, type) {
    // item 5130001
    var _ind513 = 0;
    var _col513 = nodes;
    var _keys513 = Object.keys(_col513); 
    var _len513 = _keys513.length;
    while (true) {
        // item 5130002
        if (_ind513 < _len513) {
            
        } else {
            break;
        }
        // item 5130004
        var id = _keys513[_ind513]; var _ = _col513[id];
        // item 515
        selection.add(id, type);
        // item 5130003
        _ind513++;
    }
}

function adjustScanStart(graph, node) {
    // item 650
    if (isRT(node)) {
        // item 654
        return graph.getNodeRight(node);
    } else {
        // item 653
        return node.id;
    }
}

function blockSelect(graph, free, box) {
    // item 1039
    var selection = this;
    // item 1035
    if (selection.simplified) {
        // item 1038
        return blockSelectSimple(
        	selection,
        	graph,
        	free,
        	box
        )
    } else {
        // item 1432
        return blockSelectNormal(
        	selection,
        	graph,
        	free,
        	box
        )
    }
}

function blockSelectNormal(selection, graph, free, box) {
    // item 1405
    var hitIds = intesectWithBox(graph, free, box);
    // item 1407
    var onlyNew = chooseOnlyNew(selection.block.oldIds, hitIds);
    // item 1412
    if (onlyNew.length > 0) {
        // item 1411
        var newBlocks = expandStructures(graph, free, selection.block, onlyNew);
        // item 1408
        addToSelection(
        	selection,
        	newBlocks.blue,
        	false
        );
        // item 1409
        addToSelection(
        	selection,
        	newBlocks.primary.nodes,
        	true
        );
        // item 1410
        selection.block = newBlocks.primary;
        selection.block.oldIds = Utils.listToSet(hitIds);
        // item 1406
        return true;
    } else {
        // item 1415
        return false;
    }
}

function blockSelectSimple(selection, graph, free, box) {
    // item 1421
    var hitIds = intesectWithBoxSimple(graph, free, box);
    // item 1423
    var onlyNew = chooseOnlyNew(selection.ids, hitIds);
    // item 1428
    if (onlyNew.length > 0) {
        // item 14530001
        var _ind1453 = 0;
        var _col1453 = onlyNew;
        var _len1453 = _col1453.length;
        while (true) {
            // item 14530002
            if (_ind1453 < _len1453) {
                
            } else {
                break;
            }
            // item 14530004
            var id = _col1453[_ind1453];
            // item 1455
            selection.add(id, true)
            // item 14530003
            _ind1453++;
        }
        // item 1422
        return true;
    } else {
        // item 1431
        return false;
    }
}

function boxHitsNode(box, node) {
    // item 1285
    var callback = Items.getItemCallback(
    	node.type
    );
    // item 1282
    if (callback.boxIntersect) {
        // item 1286
        return callback.boxIntersect(node, box)
    } else {
        // item 929
        var left = node.x - node.w;
        var right = node.x + node.w;
        var top = node.y - node.h;
        var bottom = node.y + node.h;
        // item 930
        if ((((right < box.left) || (left > box.right)) || (bottom < box.top)) || (top > box.bottom)) {
            // item 934
            return false;
        } else {
            // item 933
            return true;
        }
    }
}

function buildMoveCommands(pgraph, movedNodes, commands) {
    // item 3860001
    var _ind386 = 0;
    var _col386 = movedNodes;
    var _keys386 = Object.keys(_col386); 
    var _len386 = _keys386.length;
    while (true) {
        // item 3860002
        if (_ind386 < _len386) {
            
        } else {
            break;
        }
        // item 3860004
        var id = _keys386[_ind386]; var _ = _col386[id];
        // item 388
        var item = pgraph.graph.getItem(id);
        // item 406
        var command = getOrCreateUpdate(
        	commands,
        	id
        );
        // item 394
        var fields = command.fields;
        fields.x = item.x;
        fields.y = item.y;
        // item 3860003
        _ind386++;
    }
}

function changeFreeItem(render, free, id, width, height, content, output) {
    // item 1231
    var fields = {}
    // item 1216
    var commands = output.commands
    // item 1214
    var item = free.get(id)
    // item 1287
    Items.resizeItem(
    	item,
    	content,
    	width,
    	height
    )
    // item 1215
    var requested = fit(
    	render,
    	item.type,
    	width,
    	content
    );
    // item 1237
    output.tb = requested.tb;
    output.tb2 = requested.tb2;
    // item 1269
    if (item.w == width) {
        
    } else {
        // item 1272
        fields.w = width
    }
    // item 1273
    if (item.h == height) {
        
    } else {
        // item 1276
        fields.h = height
    }
    // item 1238
    fields.content = content;
    // item 1251
    if ((requested.a == null) || (item.a === requested.a)) {
        
    } else {
        // item 1254
        fields.a = requested.a;
        // item 1263
        if (requested.a >= height) {
            // item 1265
            fields.h = requested.a
             + Config.MIN_ICON_HEIGHT
        }
    }
    // item 1258
    var names = Object.keys(fields);
    // item 1255
    if (names.length == 0) {
        
    } else {
        // item 1232
        var change = getOrCreateUpdate(
        	commands,
        	id
        );
        // item 12590001
        var _ind1259 = 0;
        var _col1259 = names;
        var _len1259 = _col1259.length;
        while (true) {
            // item 12590002
            if (_ind1259 < _len1259) {
                
            } else {
                break;
            }
            // item 12590004
            var name = _col1259[_ind1259];
            // item 1233
            change.fields[name] = fields[name];
            // item 12590003
            _ind1259++;
        }
        // item 1261
        change.fields.tb = requested.tb;
        change.fields.tb2 = requested.tb2;
        change.table = "free"
    }
}

function changeItem(render, pgraph, id, width, content, output) {
    // item 1348
    var item = pgraph.graph.getItem(id);
    // item 1346
    var itemChange = changeOneItem(
    	render,
    	item,
    	width,
    	content
    )
    // item 1350
    var movedNodes = {}
    var fields = itemChange.fields
    // item 150
    output.tb = itemChange.tb
    output.tb2 = itemChange.tb2
    // item 280
    if ("h" in fields) {
        // item 49
        changeNodeHeight(
        	pgraph,
        	id,
        	fields.h,
        	movedNodes
        )
    }
    // item 284
    if ("w" in fields) {
        // item 283
        changeNodeWidth(
        	pgraph,
        	id,
        	fields.w,
        	movedNodes
        )
    }
    // item 1365
    addToCommands(
    	pgraph,
    	movedNodes,
    	id,
    	fields,
    	output.commands
    )
}

function changeNodeHeight(pgraph, id, h, movedNodes) {
    var _sw1950000_ = 0;
    var _sw2060000_ = 0;
    // item 244
    var graph = pgraph.graph;
    // item 167
    var node = graph.getNode(id);
    // item 226
    var dirProps = "vertical";
    // item 224
    var fakeSkewer = {};
    fakeSkewer[id] = true;
    // item 469
    var box;
    // item 1880001
    if (h < node.h) {
        // item 1950000
        _sw1950000_ = node.type;
        // item 1950001
        if ((_sw1950000_ === "address") || (_sw1950000_ === "select")) {
            // item 270
            delta = node.h - h;
            // item 268
            pgraph.changeSize(
            	id,
            	node.w,
            	h
            );
            // item 269
            pgraph.moveDownNoTeam(
            	id,
            	delta,
            	movedNodes
            );
        } else {
            // item 1950003
            if ((_sw1950000_ === "case") || (_sw1950000_ === "branch")) {
                // item 271
                delta = h - node.h;
                // item 268
                pgraph.changeSize(
                	id,
                	node.w,
                	h
                );
                // item 269
                pgraph.moveDownNoTeam(
                	id,
                	delta,
                	movedNodes
                );
            } else {
                // item 272
                delta = 0;
                // item 274
                pgraph.changeSize(
                	id,
                	node.w,
                	h
                );
            }
        }
    } else {
        // item 1880002
        if (h > node.h) {
            // item 2060000
            _sw2060000_ = node.type;
            // item 2060001
            if ((_sw2060000_ === "address") || (_sw2060000_ === "select")) {
                // item 275
                delta = node.h - h;
                // item 471
                box = makeUpPushBox(node);
                // item 220
                pgraph.pushObjects(
                    box,
                    fakeSkewer,
                    delta * 2,
                    dirProps,
                    movedNodes
                );
                // item 278
                pgraph.moveDownNoTeam(
                	id,
                	delta,
                	movedNodes
                );
                // item 279
                pgraph.changeSize(
                	id,
                	node.w,
                	h
                );
            } else {
                // item 2060003
                if (_sw2060000_ === "duration") {
                    // item 432
                    delta = h - node.h;
                    // item 431
                    box = makeUpPushBox(node);
                    var box2 = makeDownPushBox(node);
                    // item 434
                    pgraph.pushObjects(
                        box,
                        fakeSkewer,
                        -delta,
                        dirProps,
                        movedNodes
                    );
                    // item 433
                    pgraph.pushObjects(
                        box2,
                        fakeSkewer,
                        delta,
                        dirProps,
                        movedNodes
                    );
                } else {
                    // item 276
                    delta = h - node.h;
                    // item 470
                    box = makeDownPushBox(node);
                    // item 220
                    pgraph.pushObjects(
                        box,
                        fakeSkewer,
                        delta * 2,
                        dirProps,
                        movedNodes
                    );
                    // item 278
                    pgraph.moveDownNoTeam(
                    	id,
                    	delta,
                    	movedNodes
                    );
                    // item 279
                    pgraph.changeSize(
                    	id,
                    	node.w,
                    	h
                    );
                }
            }
        } else {
            // item 205
            delta = 0;
        }
    }
    // item 183
    return node.y;
}

function changeNodeWidth(pgraph, id, w, movedNodes) {
    // item 351
    var delta = 0;
    // item 327
    var graph = pgraph.graph;
    // item 323
    var item = graph.getNode(id);
    // item 326
    var dirProps = "horizontal";
    // item 324
    var fakeSkewer = {};
    fakeSkewer[id] = true;
    // item 325
    var box = Utils.copyBox(item.box);
    // item 331
    if (item.type == "duration") {
        // item 339
        var masterId = graph.getNodeRight(item);
        // item 375
        delta = item.w - w;
        // item 376
        if (w > item.w) {
            // item 421
            pgraph.moveAlone(
            	id,
            	delta * 2,
            	true,
            	movedNodes
            );
            // item 435
            pgraph.moveAlone(
            	id,
            	-delta,
            	false,
            	movedNodes
            );
            // item 436
            pgraph.changeSize(
            	id,
            	w,
            	item.h
            );
        } else {
            // item 377
            changeWidthAndPush(
            	pgraph,
            	id,
            	null,
            	w,
            	movedNodes
            );
            // item 422
            pgraph.moveAlone(
            	id,
            	delta,
            	false,
            	movedNodes
            );
        }
    } else {
        // item 1133
        if (item.role == "params") {
            // item 1138
            delta = item.w - w;
            // item 1139
            if (w > item.w) {
                // item 1142
                pgraph.moveRight(
                	id,
                	-delta,
                	movedNodes
                );
                // item 1143
                pgraph.changeSize(
                	id,
                	w,
                	item.h
                );
            } else {
                // item 1140
                changeWidthAndPush(
                	pgraph,
                	id,
                	null,
                	w,
                	movedNodes
                );
                // item 1141
                pgraph.moveAlone(
                	id,
                	-delta,
                	false,
                	movedNodes
                );
            }
        } else {
            // item 334
            var durationId = null;
            // item 335
            if (item.left) {
                // item 338
                durationId = graph.getNodeLeft(item);
                // item 352
                delta = item.w - w;
            }
            // item 340
            if (w > item.w) {
                // item 354
                if (durationId) {
                    // item 353
                    pgraph.moveAlone(
                    	durationId,
                    	delta,
                    	true,
                    	movedNodes
                    );
                }
                // item 357
                changeWidthAndPush(
                	pgraph,
                	id,
                	durationId,
                	w,
                	movedNodes
                );
            } else {
                // item 374
                changeWidthAndPush(
                	pgraph,
                	id,
                	null,
                	w,
                	movedNodes
                );
                // item 348
                if (durationId) {
                    // item 420
                    pgraph.moveAlone(
                    	durationId,
                    	delta,
                    	false,
                    	movedNodes
                    );
                }
            }
        }
    }
}

function changeOneItem(render, item, width, content) {
    // item 1295
    var requested = fit(
    	render,
    	item.type,
    	width,
    	content
    );
    // item 1344
    var result = {
    	fields: {},
    	tb: requested.tb,
    	tb2: requested.tb2
    }
    // item 1296
    var fields = result.fields
    // item 1343
    var same = Utils.shallowEquivalent(
    	content,
    	item.content
    )
    // item 1340
    if (same) {
        
    } else {
        // item 1315
        fields.content = content
    }
    // item 1328
    if ((requested.a == null) || (item.a === requested.a)) {
        
    } else {
        // item 1331
        fields.a = requested.a
    }
    // item 1319
    if (item.h === requested.h) {
        
    } else {
        // item 1326
        fields.h = requested.h
    }
    // item 1323
    if (item.w === requested.w) {
        
    } else {
        // item 1327
        fields.w = requested.w
    }
    // item 1335
    var names = Object.keys(fields)
    // item 1332
    if (names.length == 0) {
        
    } else {
        // item 1338
        fields.tb = requested.tb
        fields.tb2 = requested.tb2
    }
    // item 1345
    return result
}

function changeWidthAndPush(pgraph, id, exclude, w, movedNodes) {
    // item 368
    var dirProps = "horizontal";
    // item 367
    var excluded = {};
    excluded[id] = true;
    // item 473
    if (exclude) {
        // item 476
        excluded[exclude] = true;
    }
    // item 363
    var node = pgraph.graph.getNode(id);
    var box = node.box;
    // item 369
    var delta = w - node.w;
    // item 370
    if (delta > 0) {
        // item 472
        var leftBox = makeLeftPushBox(
        	node
        );
        var rightBox = makeRightPushBox(
        	node
        );
        // item 366
        pgraph.pushObjects(
            leftBox,
            excluded,
            -delta,
            dirProps,
            movedNodes
        );
        // item 373
        pgraph.pushObjects(
            rightBox,
            excluded,
            delta,
            dirProps,
            movedNodes
        );
    }
    // item 364
    pgraph.changeSize(
    	id,
    	w,
    	node.h
    );
}

function checkWaitList(graph, scan) {
    // item 839
    var newUp = [];
    var newDown = [];
    // item 8400001
    var _ind840 = 0;
    var _col840 = scan.tsUp;
    var _len840 = _col840.length;
    while (true) {
        // item 8400002
        if (_ind840 < _len840) {
            
        } else {
            break;
        }
        // item 8400004
        var upT = _col840[_ind840];
        // item 842
        if (upT == scan.top) {
            // item 845
            newUp.push(upT);
        } else {
            // item 856
            var aboveId = graph.getNodeUp(upT);
            // item 846
            scan.starts.push(aboveId);
        }
        // item 8400003
        _ind840++;
    }
    // item 847
    scan.tsUp = newUp;
    // item 8480001
    var _ind848 = 0;
    var _col848 = scan.tsDown;
    var _len848 = _col848.length;
    while (true) {
        // item 8480002
        if (_ind848 < _len848) {
            
        } else {
            break;
        }
        // item 8480004
        var downT = _col848[_ind848];
        // item 850
        if (downT == scan.bottom) {
            // item 853
            newDown.push(downT);
        } else {
            // item 858
            if (downT.down) {
                // item 857
                var belowId = graph.getNodeDown(downT);
                // item 854
                scan.starts.push(belowId);
            } else {
                // item 862
                var leftId = graph.getNodeLeft(downT);
                // item 861
                scan.starts.push(leftId);
            }
        }
        // item 8480003
        _ind848++;
    }
    // item 855
    scan.tsDown = newDown;
}

function chooseOnlyNew(oldIds, ids) {
    // item 523
    var result = ids.filter(function(id) {
    	return !(id in oldIds);
    });
    // item 522
    return result;
}

function expandJunction(graph, starts, nodeId) {
    // item 1186
    var vertical = graph.getVertical(nodeId)
    // item 11880001
    var _ind1188 = 0;
    var _col1188 = vertical;
    var _len1188 = _col1188.length;
    while (true) {
        // item 11880002
        if (_ind1188 < _len1188) {
            
        } else {
            break;
        }
        // item 11880004
        var itemId = _col1188[_ind1188];
        // item 1193
        var item = graph.getItem(itemId)
        // item 1190
        if (item.isLine) {
            
        } else {
            // item 1194
            starts.push(itemId)
        }
        // item 11880003
        _ind1188++;
    }
}

function expandStructures(graph, free, oldBlock, ids) {
    // item 537
    var result = [];
    var greens = [];
    var blues = {};
    var primary = oldBlock;
    // item 5350001
    var _ind535 = 0;
    var _col535 = ids;
    var _len535 = _col535.length;
    while (true) {
        // item 5350002
        if (_ind535 < _len535) {
            
        } else {
            break;
        }
        // item 5350004
        var id = _col535[_ind535];
        // item 1205
        var node = free.get(id)
        // item 1206
        if (node) {
            // item 1208
            blues[id] = true;
        } else {
            // item 543
            node = graph.getNode(id);
            // item 538
            if (isGreen(graph, node)) {
                // item 547
                if (id in oldBlock.nodes) {
                    
                } else {
                    // item 542
                    greens.push(id);
                }
            } else {
                // item 1114
                if (node.type == "junction") {
                    
                } else {
                    // item 541
                    blues[id] = true;
                }
            }
        }
        // item 5350003
        _ind535++;
    }
    // item 5490001
    var _ind549 = 0;
    var _col549 = greens;
    var _len549 = _col549.length;
    while (true) {
        // item 5490002
        if (_ind549 < _len549) {
            
        } else {
            break;
        }
        // item 5490004
        var greenId = _col549[_ind549];
        // item 551
        var block = makeBlock(graph, greenId);
        // item 552
        if ((primary.top) && (!((primary.top in block.nodes) && (primary.bottom in block.nodes)))) {
            // item 558
            if (isOnTop(graph, primary.bottom, block.top)) {
                // item 562
                primary = mergeBlocks(primary, block);
            } else {
                // item 564
                if (isOnTop(graph, block.bottom, primary.top)) {
                    // item 563
                    primary = mergeBlocks(block, primary);
                } else {
                    // item 566
                    Utils.mergeSets(blues, block.nodes);
                }
            }
        } else {
            // item 556
            primary = block;
        }
        // item 5490003
        _ind549++;
    }
    // item 560
    return {
    	blue: blues,
    	primary: primary
    };
}

function findBeginLoop(graph, node) {
    // item 1077
    var count = 1;
    while (true) {
        // item 1075
        var id = graph.getNodeUp(node);
        node = graph.getNode(id);
        // item 1073
        if (node.type === "loopbegin") {
            // item 1078
            count--;
            // item 1079
            if (count === 0) {
                // item 1083
                return id;
            }
        } else {
            // item 1076
            if (node.type === "loopend") {
                // item 1082
                count++;
            }
        }
        // item 1070
        if (node.up) {
            
        } else {
            // item 1084
            return null;
        }
    }
}

function findEndLoop(graph, node) {
    // item 1057
    var count = 1;
    while (true) {
        // item 1055
        var id = graph.getNodeDown(node);
        node = graph.getNode(id);
        // item 1053
        if (node.type === "loopend") {
            // item 1058
            count--;
            // item 1059
            if (count === 0) {
                // item 1063
                return id;
            }
        } else {
            // item 1056
            if (node.type === "loopbegin") {
                // item 1062
                count++;
            }
        }
        // item 1050
        if (node.down) {
            
        } else {
            // item 1064
            return null;
        }
    }
}

function fit(render, type, width, content) {
    // item 87
    var item = {
    	isLine: false,
    	type: type,
    	content: content,
    	x: 0,
    	y: 0,
    	w: width
    };
    // item 88
    var size = fitItem(item, render);
    // item 89
    return size;
}

function fitItem(item, render) {
    // item 489
    var callback = Items.getItemCallback(
    	item.type
    );
    // item 482
    var result = callback.fit(item, render);
    // item 483
    result.w = Math.floor(result.w);
    result.h = Math.floor(result.h);
    // item 485
    if (result.a == null) {
        
    } else {
        // item 488
        result.a = Math.floor(result.a);
    }
    // item 484
    return result;
}

function getDuration(graph, item) {
    // item 1091
    if (item.left) {
        // item 1095
        var left = graph.getNodeLeftEx(item);
        // item 1096
        if (left.type == "duration") {
            // item 1090
            return left;
        } else {
            // item 1094
            return null;
        }
    } else {
        // item 1094
        return null;
    }
}

function getOrCreateUpdate(commands, id) {
    // item 1122
    if (id in commands) {
        // item 1125
        return commands[id];
    } else {
        // item 1126
        var command = new Utils.Command(
        	"update",
        	"nodes",
        	id,
        	{ }
        );
        commands[id] = command;
        // item 1127
        return command;
    }
}

function intesectWithBox(graph, free, box) {
    // item 903
    var result = [];
    // item 8980001
    var _ind898 = 0;
    var _col898 = graph.nodes;
    var _keys898 = Object.keys(_col898); 
    var _len898 = _keys898.length;
    while (true) {
        // item 8980002
        if (_ind898 < _len898) {
            
        } else {
            break;
        }
        // item 8980004
        var id = _keys898[_ind898]; var node = _col898[id];
        // item 900
        if (boxHitsNode(box, node)) {
            // item 905
            result.push(id);
        }
        // item 8980003
        _ind898++;
    }
    // item 11990001
    var _ind1199 = 0;
    var _col1199 = free.set;
    var _keys1199 = Object.keys(_col1199); 
    var _len1199 = _keys1199.length;
    while (true) {
        // item 11990002
        if (_ind1199 < _len1199) {
            
        } else {
            break;
        }
        // item 11990004
        var id = _keys1199[_ind1199]; var item = _col1199[id];
        // item 1201
        if (boxHitsNode(box, item)) {
            // item 1204
            result.push(id);
        }
        // item 11990003
        _ind1199++;
    }
    // item 904
    return result;
}

function intesectWithBoxSimple(graph, free, box) {
    // item 1443
    var result = [];
    // item 14380001
    var _ind1438 = 0;
    var _col1438 = graph.nodes;
    var _keys1438 = Object.keys(_col1438); 
    var _len1438 = _keys1438.length;
    while (true) {
        // item 14380002
        if (_ind1438 < _len1438) {
            
        } else {
            break;
        }
        // item 14380004
        var id = _keys1438[_ind1438]; var node = _col1438[id];
        // item 1440
        if ((node.type == "junction") || (!(boxHitsNode(box, node)))) {
            
        } else {
            // item 1445
            result.push(id);
        }
        // item 14380003
        _ind1438++;
    }
    // item 14460001
    var _ind1446 = 0;
    var _col1446 = free.set;
    var _keys1446 = Object.keys(_col1446); 
    var _len1446 = _keys1446.length;
    while (true) {
        // item 14460002
        if (_ind1446 < _len1446) {
            
        } else {
            break;
        }
        // item 14460004
        var id = _keys1446[_ind1446]; var item = _col1446[id];
        // item 1448
        if (boxHitsNode(box, item)) {
            // item 1451
            result.push(id);
        }
        // item 14460003
        _ind1446++;
    }
    // item 1444
    return result;
}

function isBelowAddress(graph, node) {
    // item 1014
    if (node.up) {
        // item 1016
        var above = graph.getNodeUpEx(node);
        // item 1017
        if (above.type == "address") {
            // item 1019
            return true;
        } else {
            // item 1018
            return false;
        }
    } else {
        // item 1018
        return false;
    }
}

function isGreen(graph, item) {
    var _sw9490000_ = 0;
    // item 9490000
    _sw9490000_ = item.type;
    // item 9490001
    if (((((_sw9490000_ === "beginend") || (_sw9490000_ === "end")) || (_sw9490000_ === "duration")) || (_sw9490000_ === "address")) || (_sw9490000_ === "branch")) {
        // item 964
        return false;
    } else {
        // item 9490006
        if (_sw9490000_ === "action") {
            // item 960
            if (item.role == "params") {
                // item 964
                return false;
            } else {
                // item 967
                return true;
            }
        } else {
            // item 9490007
            if (_sw9490000_ === "junction") {
                // item 969
                return isJuncGreen(graph, item);
            } else {
                // item 963
                return true;
            }
        }
    }
}

function isJuncGreen(graph, item) {
    // item 977
    if (item.down) {
        // item 979
        var below = graph.getNodeDownEx(item);
        // item 980
        if (below.type == "branch") {
            // item 1004
            return false;
        } else {
            // item 981
            if (isBelowAddress(graph, item)) {
                // item 1004
                return false;
            } else {
                // item 986
                if (item.right) {
                    // item 1007
                    var rightEdge = graph.getEdge(item.right);
                    // item 1008
                    if (rightEdge.role == "rarrow") {
                        // item 1004
                        return false;
                    } else {
                        // item 988
                        var right = graph.getNodeRightEx(item);
                        // item 1022
                        if (isBelowAddress(graph, right)) {
                            // item 1004
                            return false;
                        } else {
                            // item 1006
                            return true;
                        }
                    }
                } else {
                    // item 1006
                    return true;
                }
            }
        }
    } else {
        // item 981
        if (isBelowAddress(graph, item)) {
            // item 1004
            return false;
        } else {
            // item 986
            if (item.right) {
                // item 1007
                var rightEdge = graph.getEdge(item.right);
                // item 1008
                if (rightEdge.role == "rarrow") {
                    // item 1004
                    return false;
                } else {
                    // item 988
                    var right = graph.getNodeRightEx(item);
                    // item 1022
                    if (isBelowAddress(graph, right)) {
                        // item 1004
                        return false;
                    } else {
                        // item 1006
                        return true;
                    }
                }
            } else {
                // item 1006
                return true;
            }
        }
    }
}

function isNewBottom(scan, node) {
    // item 809
    var bottom = scan.bottom;
    // item 802
    if ((node.x < bottom.x) || ((node.x == bottom.x) && (node.y >= bottom.y))) {
        // item 810
        return true;
    } else {
        // item 811
        return false;
    }
}

function isNewTop(scan, node) {
    // item 787
    var top = scan.top;
    // item 788
    if ((node.x < top.x) || ((node.x == top.x) && (node.y <= top.y))) {
        // item 795
        return true;
    } else {
        // item 796
        return false;
    }
}

function isOnSilFloor(graph, node) {
    // item 879
    if (node.type == "junction") {
        // item 881
        if (node.right) {
            // item 880
            var rightEdge = graph.getEdge(node.right);
            // item 882
            if (rightEdge.role == "sil_floor") {
                // item 877
                return true;
            } else {
                // item 1112
                return false;
            }
        } else {
            // item 1107
            if (node.left) {
                // item 1108
                var leftEdge = graph.getEdge(node.left);
                // item 1109
                if (leftEdge.role == "sil_floor") {
                    // item 1110
                    return true;
                } else {
                    // item 878
                    return false;
                }
            } else {
                // item 878
                return false;
            }
        }
    } else {
        // item 878
        return false;
    }
}

function isOnTop(graph, topId, bottomId) {
    // item 572
    var top = graph.getNode(topId);
    var bottom = graph.getNode(bottomId);
    // item 573
    if ((top.down) && (top.down == bottom.up)) {
        // item 576
        return true;
    } else {
        // item 577
        return false;
    }
}

function isRT(node) {
    // item 636
    if ((node.type == "question") || (((((node.type == "junction") && (!(node.left))) && (node.up)) && (node.right)) && (node.down))) {
        // item 639
        return true;
    } else {
        // item 640
        return false;
    }
}

function isWideIcon(item) {
    // item 495
    if (((item.isLine) || (item.type == "junction")) || (item.type in gNarrow)) {
        // item 498
        return false;
    } else {
        // item 499
        return true;
    }
}

function makeBlock(graph, id) {
    var _sw5930000_ = 0;
    // item 615
    var result = new BlockSelection();
    // item 600
    var node = graph.getNode(id);
    var scan = new BlockScan();
    // item 605
    var adjustedId;
    // item 5930000
    _sw5930000_ = node.type;
    // item 5930001
    if (_sw5930000_ === "question") {
        // item 607
        adjustedId = graph.getNodeRight(node);
        // item 606
        scan.starts.push(adjustedId);
        // item 623
        var firstId = scan.starts[0];
        var first = graph.getNode(firstId);
        setScanBottom(scan, first);
        setScanTop(scan, first);
        // item 618
        makeBlockCore(graph, scan);
        // item 617
        result.nodes = scan.visited;
        result.top = scan.top.id;
        result.bottom = scan.bottom.id;
        result.addressEnd = scan.addressEnd;
    } else {
        // item 5930002
        if (_sw5930000_ === "case") {
            // item 628
            var above = graph.getNodeUpEx(node);
            adjustedId = adjustScanStart(graph, above);
            // item 629
            scan.starts.push(adjustedId);
            // item 623
            var firstId = scan.starts[0];
            var first = graph.getNode(firstId);
            setScanBottom(scan, first);
            setScanTop(scan, first);
            // item 618
            makeBlockCore(graph, scan);
            // item 617
            result.nodes = scan.visited;
            result.top = scan.top.id;
            result.bottom = scan.bottom.id;
            result.addressEnd = scan.addressEnd;
        } else {
            // item 5930003
            if (_sw5930000_ === "select") {
                // item 610
                var below = graph.getNodeDownEx(node);
                adjustedId = graph.getNodeRight(below);
                // item 611
                scan.starts.push(adjustedId);
                // item 623
                var firstId = scan.starts[0];
                var first = graph.getNode(firstId);
                setScanBottom(scan, first);
                setScanTop(scan, first);
                // item 618
                makeBlockCore(graph, scan);
                // item 617
                result.nodes = scan.visited;
                result.top = scan.top.id;
                result.bottom = scan.bottom.id;
                result.addressEnd = scan.addressEnd;
            } else {
                // item 5930004
                if (_sw5930000_ === "loopbegin") {
                    // item 624
                    var endId = findEndLoop(graph, node);
                    // item 625
                    scan.starts.push(id);
                    scan.starts.push(endId);
                    // item 623
                    var firstId = scan.starts[0];
                    var first = graph.getNode(firstId);
                    setScanBottom(scan, first);
                    setScanTop(scan, first);
                    // item 618
                    makeBlockCore(graph, scan);
                    // item 617
                    result.nodes = scan.visited;
                    result.top = scan.top.id;
                    result.bottom = scan.bottom.id;
                    result.addressEnd = scan.addressEnd;
                } else {
                    // item 5930005
                    if (_sw5930000_ === "loopend") {
                        // item 626
                        var beginId = findBeginLoop(graph, node);
                        // item 627
                        scan.starts.push(id);
                        scan.starts.push(beginId);
                        // item 623
                        var firstId = scan.starts[0];
                        var first = graph.getNode(firstId);
                        setScanBottom(scan, first);
                        setScanTop(scan, first);
                        // item 618
                        makeBlockCore(graph, scan);
                        // item 617
                        result.nodes = scan.visited;
                        result.top = scan.top.id;
                        result.bottom = scan.bottom.id;
                        result.addressEnd = scan.addressEnd;
                    } else {
                        // item 5930006
                        if (_sw5930000_ === "junction") {
                            // item 608
                            adjustedId = adjustScanStart(graph, node);
                            // item 609
                            scan.starts.push(adjustedId);
                            // item 623
                            var firstId = scan.starts[0];
                            var first = graph.getNode(firstId);
                            setScanBottom(scan, first);
                            setScanTop(scan, first);
                            // item 618
                            makeBlockCore(graph, scan);
                            // item 617
                            result.nodes = scan.visited;
                            result.top = scan.top.id;
                            result.bottom = scan.bottom.id;
                            result.addressEnd = scan.addressEnd;
                        } else {
                            // item 592
                            result.nodes[id] = true;
                            result.top = id;
                            result.bottom = id;
                            // item 630
                            addDuration(
                            	graph,
                            	node,
                            	result.nodes
                            );
                        }
                    }
                }
            }
        }
    }
    // item 614
    return result;
}

function makeBlockCore(graph, scan) {
    while (true) {
        // item 818
        if (scan.starts.length == 0) {
            break;
        }
        // item 816
        makeBlockCoreLoop(graph, scan);
        // item 821
        checkWaitList(graph, scan);
    }
}

function makeBlockCoreLoop(graph, scan) {
    var _sw6840000_ = 0;
    // item 669
    var top = scan.top;
    var bottom = scan.bottom;
    var starts = scan.starts;
    // item 664
    var id = starts.pop();
    // item 665
    if (id in scan.visited) {
        
    } else {
        // item 666
        scan.visited[id] = true;
        // item 727
        var node = graph.getNode(id);
        // item 744
        addDuration(graph, node, scan.visited);
        // item 667
        if (isRT(node)) {
            // item 717
            var upNode, downNode;
            // item 718
            var above = graph.getNodeUpEx(node);
            // item 719
            if (above.type == "select") {
                // item 1277
                var rightId = graph.getNodeRight(node)
                starts.push(rightId)
                // item 1113
                addDuration(graph, above, scan.visited);
                // item 722
                upNode = above;
                downNode = graph.getNodeDownEx(node);
                // item 724
                scan.visited[upNode.id] = true;
                scan.visited[downNode.id] = true;
            } else {
                // item 723
                upNode = node;
                downNode = node;
            }
            // item 711
            if (isNewTop(scan, upNode)) {
                // item 728
                setScanTop(scan, upNode);
                scan.tsUp.push(upNode);
            } else {
                // item 725
                addNeighboursToStarts(
                	graph,
                	starts,
                	upNode,
                	true,
                	false);
            }
            // item 714
            if (isNewBottom(scan, downNode)) {
                // item 729
                setScanBottom(scan, downNode);
                scan.tsDown.push(downNode);
            } else {
                // item 726
                addNeighboursToStarts(
                	graph,
                	starts,
                	downNode,
                	false,
                	true);
            }
        } else {
            // item 731
            if (isOnSilFloor(graph, node)) {
                // item 1288
                var upId = graph.getNodeUp(node)
                starts.push(upId)
                // item 738
                if (isNewBottom(scan, node)) {
                    // item 741
                    setScanBottom(scan, node);
                    scan.tsDown.push(node);
                } else {
                    // item 742
                    var leftId = graph.getNodeLeft(node);
                    starts.push(leftId);
                }
                // item 743
                scan.addressEnd = true;
            } else {
                // item 679
                if (isNewTop(scan, node)) {
                    // item 680
                    setScanTop(scan, node);
                }
                // item 691
                if (isNewBottom(scan, node)) {
                    // item 730
                    setScanBottom(scan, node);
                }
                // item 6840000
                _sw6840000_ = node.type;
                // item 6840001
                if (_sw6840000_ === "loopbegin") {
                    // item 694
                    var endId = findEndLoop(graph, node);
                    var aboveId = graph.getNodeUp(node);
                    var belowId = graph.getNodeDown(node);
                    // item 704
                    starts.push(endId);
                    starts.push(belowId);
                    // item 705
                    if (scan.top === node) {
                        
                    } else {
                        // item 707
                        starts.push(aboveId);
                    }
                } else {
                    // item 6840002
                    if (_sw6840000_ === "loopend") {
                        // item 696
                        var beginId = findBeginLoop(graph, node);
                        var aboveId = graph.getNodeUp(node);
                        var belowId = graph.getNodeDown(node);
                        // item 695
                        starts.push(beginId);
                        starts.push(aboveId);
                        // item 708
                        if (scan.bottom === node) {
                            
                        } else {
                            // item 710
                            starts.push(belowId);
                        }
                    } else {
                        // item 6840003
                        if (_sw6840000_ === "junction") {
                            // item 1146
                            addJunctionNeighbours(
                            	graph,
                            	starts,
                            	node);
                        } else {
                            // item 683
                            addNeighboursToStarts(
                            	graph,
                            	starts,
                            	node,
                            	true,
                            	true);
                        }
                    }
                }
            }
        }
    }
}

function makeDownPushBox(node) {
    // item 1395
    var box = Utils.copyBox(node.box);
    // item 1396
    box.top = node.y + 1;
    // item 1397
    return box;
}

function makeLeftPushBox(node) {
    // item 1371
    var box = Utils.copyBox(node.box);
    // item 1372
    box.right = node.x - 1;
    // item 1373
    return box;
}

function makeRightPushBox(node) {
    // item 1379
    var box = Utils.copyBox(node.box);
    // item 1380
    box.left = node.x + 1;
    // item 1381
    return box;
}

function makeUpPushBox(node) {
    // item 1387
    var box = Utils.copyBox(node.box);
    // item 1388
    box.bottom = node.y - 1;
    // item 1389
    return box;
}

function mergeBlocks(upper, lower) {
    // item 584
    var result = new BlockSelection();
    // item 586
    var nodes = Utils.copyObject(upper.nodes);
    Utils.mergeSets(nodes, lower.nodes);
    // item 587
    result.addressEnd = lower.addressEnd;
    result.nodes = nodes;
    result.top = upper.top;
    result.bottom = lower.bottom;
    // item 585
    return result;
}

function setItems(items) {
    // item 419
    Items = items;
}

function setScanBottom(scan, bottom) {
    // item 833
    scan.bottom = bottom;
    scan.x = bottom.x;
}

function setScanTop(scan, top) {
    // item 827
    scan.top = top;
    scan.x = top.x;
}

function setSkewerWidth(render, pgraph, id, width, commands) {
    // item 28
    var graph = pgraph.graph;
    var result = {
    	commands: commands
    };
    // item 27
    var vertical = graph.getVertical(id);
    // item 300001
    var _ind30 = 0;
    var _col30 = vertical;
    var _len30 = _col30.length;
    while (true) {
        // item 300002
        if (_ind30 < _len30) {
            
        } else {
            break;
        }
        // item 300004
        var itemId = _col30[_ind30];
        // item 32
        var item = graph.getItem(itemId);
        // item 33
        if (isWideIcon(item)) {
            // item 29
            changeItem(
            	render,
            	pgraph,
            	itemId,
            	width,
            	item.content,
            	result
            );
        }
        // item 300003
        _ind30++;
    }
}

function shouldJunctionExpand(node) {
    // item 1164
    if ((node.up) && (node.down)) {
        // item 1177
        return false
    } else {
        // item 1165
        if ((node.left) || (node.right)) {
            // item 1179
            return true
        } else {
            // item 1180
            return false
        }
    }
}

function sizeEqual(item, size) {
    // item 296
    if (((item.w == size.w) && (item.h == size.h)) && ((size.a == null) || (item.a == size.a))) {
        // item 300
        return true;
    } else {
        // item 301
        return false;
    }
}


this.setSkewerWidth = setSkewerWidth;
this.setItems = setItems;
this.changeItem = changeItem;
this.fitItem = fitItem;
this.isWideIcon = isWideIcon;
this.Selection = Selection;
this.findEndLoop = findEndLoop;
this.findBeginLoop = findBeginLoop;
this.getDuration = getDuration;
this.getOrCreateUpdate = getOrCreateUpdate;
this.changeFreeItem = changeFreeItem
this.changeOneItem = changeOneItem
this.addToCommands = addToCommands

this.makeLeftPushBox = makeLeftPushBox
this.makeRightPushBox = makeRightPushBox
this.makeUpPushBox = makeUpPushBox
this.makeDownPushBox = makeDownPushBox

}

var Drakon = new DrakonModule();
