function EditorCtrl(window, document, elementId, userId) {



var globals = {}
globals.groups = []
globals.delay = false
globals.readonly = false
globals.onReadonly = null
globals.toolName = "basic"
globals.toolNameFree = "free-basic"
globals.toolNameMind = "dia-mind"
globals.userColors = []
globals.movable = null
globals.leftButts = []
globals.rightButts = []

var fontFiles = {}

var SideSize = 40
var tbWidth = 115

// Autogenerated with DRAKON Editor 1.32


function ButtonInfo(id, image, tooltip, command) {
    // item 2776
    this.id = id
    this.image = image
    this.tooltip = tooltip
    this.command = command
}

function LightPersistence(name, background, diaLine, diaLineThickness, tag) {
    // item 681
    var self = this
    // item 678
    this.added = []
    this.removed = []
    this.updated = []
    this.tag = tag
    this.name = name
    this.background = background
    this.diaLine = diaLine
    this.diaLineThickness = diaLineThickness
    // item 682
    this.add = function(item) {
    	self.added.push(Utils.copyItem(item))
    }
    // item 683
    this.remove = function(id) {
    	self.removed.push(String(id))
    }
    // item 684
    this.update = function(item) {
    	self.updated.push(Utils.copyItem(item))
    }
    // item 685
    this.updateDiagram = function(fields) {
    	 updateDiagramCore(self, fields)
    }
    // item 686
    this.persist = function() {
    	 self.change = buildChanges(self)
    }
}

function ManyFontLoader_Normal_fontLoaded(self, msg) {
    // item 3506
    self.current++
    // item 3503
    if (self.current == self.faces.length) {
        // item 3507
        self.onLoaded()
        // item 3488
        self.state = null;
    } else {
        // item 3508
        loadNextFont(self)
        // item 3505
        self.state = "Normal";
    }
}

function ManyFontLoader_Normal_start(self, msg) {
    // item 3502
    self.current = 0
    self.faces = msg
    // item 3508
    loadNextFont(self)
    // item 3505
    self.state = "Normal";
}

function Persistence() {
    // item 327
    this.add = add
    this.persist = persist
    this.remove = remove
    this.update = update
    this.updateDiagram = updateDiagram
}

function SameValue(name) {
    // item 3533
    this.name = name
    this.different = false
    this.value = null
}

function add(item) {
    // item 318
    globals.added.push(Utils.copyItem(item))
}

function add2Buttons(name, id, image, tooltip, command, id2, image2, tooltip2, command2) {
    // item 2432
    var group = findIconGroup(name)
    // item 2433
    var item1 = {
    	id: id,
    	image: image,
    	tooltip: tooltip,
    	command: addStartTrace(id, command)
    }
    // item 2443
    var row = [item1]
    // item 2444
    if (id2) {
        // item 2434
        var item2 = {
        	id: id2,
        	image: image2,
        	tooltip: tooltip2,
        	command: addStartTrace(id2, command2)
        }
        // item 2435
        row.push(item2)
    }
    // item 2431
    group.rows.push(row)
}

function addColor(parent, getColor, title, onChange) {
    // item 1092
    var onClick = function() {
    	var color = getColor()
    	showColorPicker(
    		parent,
    		color,
    		title,
    		onChange
    	)
    }
    // item 1508
    var color = getColor()
    // item 1135
    return addColorButton(
    	parent,
    	color,
    	5,
    	onClick
    )
}

function addColorButton(parent, color, margin, onClick) {
    // item 1224
    var div = make(parent, "div")
    div.style.display = "inline-block"
    div.style.margin = margin + "px"
    div.style.width = "30px"
    div.style.height = "30px"
    div.style.cursor = "pointer"
    // item 1919
    div.style.border = "solid 1px #a0a0a0"
    div.style.borderRadius = "5px"
    // item 1262
    setColorButColor(div, color)
    // item 1134
    div.onclick = onClick
    // item 1177
    return div
}

function addFontFile(italic, bold, family, file) {
    // item 2161
    var key = makeFontKey(
    	italic,
    	bold,
    	family
    )
    // item 2169
    fontFiles[key] = file
}

function addFree(evt, type, subtype) {
    // item 2667
    addTrace("ec:addFree", [type])
    // item 747
    var view = globals.view
    var cnv = globals.canvas
    var zoom = view.getZoom()
    // item 745
    var cbox = cnv.getBoundingClientRect()
    var cx = cbox.left + 100 * zoom
    var cy = evt.clientY
    // item 746
    var dia = view.clientToDiagram(cx, cy)
    // item 737
    globals.editor.insertFreeItem(
    	dia.x,
    	dia.y,
    	type,
    	subtype
    )
    // item 738
    globals.view.redraw()
}

function addFreeButtons() {
    // item 2442
    var rect = new ButtonInfo("f_rectangle", "rectangle.png", "BUT_FREE_RECTANGLE", function(e){addFree(e, "f_rectangle")})
    var label = new ButtonInfo("f_label", "text.png", "BUT_TEXT", function(e){addFree(e,"f_label")})
    // item 2497
    var line = new ButtonInfo("f_line", "line.png", "BUT_LINE", function(e){addFree(e, "f_line")})
    var arrow = new ButtonInfo("f_arrow", "arrow.png", "BUT_ARROW", function(e){addFree(e, "f_arrow")})
    // item 2606
    var begin = new ButtonInfo("f_begin", "f_begin.png", "BUT_FBEGIN", function(e){addFree(e, "f_begin")})
    var rounded = new ButtonInfo("f_rounded", "rounded.png", "BUT_ROUNDED", function(e){addFree(e, "f_rounded")})
    // item 2610
    var left = new ButtonInfo("f_ptr_left", "ptr-left.png", "BUT_PTR_LEFT", function(e){addFree(e, "f_ptr_left")})
    var right = new ButtonInfo("f_ptr_right", "ptr-right.png", "BUT_PTR_RIGHT", function(e){addFree(e, "f_ptr_right")})
    // item 2605
    var insertion = new ButtonInfo("f_insertion", "f_insertion.png", "BUT_INSERTION", function(e){addFree(e, "f_insertion")})
    var shelf = new ButtonInfo("f_shelf", "f_shelf.png", "BUT_SHELF", function(e){addFree(e, "f_shelf")})
    // item 2609
    var callout = new ButtonInfo("f_callout", "callout.png", "BUT_CALLOUT", function(e){addFree(e,"callout")})
    var circle = new ButtonInfo("f_circle", "circle.png", "BUT_CIRCLE", function(e){addFree(e,"f_circle")})
    // item 2720
    var vscroll = new ButtonInfo("f_ui_vscroll", "f_ui_vscroll.png", "BUT_UI_VSCROLL",
         function(e){addFree(e, "f_more", "f_ui_vscroll")})
    var hscroll = new ButtonInfo("f_ui_hscroll", "f_ui_hscroll.png", "BUT_UI_HSCROLL",
         function(e){addFree(e, "f_more", "f_ui_hscroll")})
    // item 2783
    addToIconGroup("free-basic", [rect, label])
    addToIconGroup("free-basic", [line, arrow])
    addToIconGroup("free-basic", [begin, rounded])
    addToIconGroup("free-basic", [left, right])
    addToIconGroup("free-basic", [insertion, shelf])
    addToIconGroup("free-basic", [callout, circle])
    // item 3620
    addToIconGroup("full", [rect, label])
    addToIconGroup("full", [line, arrow])
    addToIconGroup("full", [left, right])
    // item 2789
    var cross = new ButtonInfo("f_ui_cross", "f_cross.png", "BUT_UI_CROSS",
         function(e){addFree(e, "f_more", "f_ui_cross")})
    var check = new ButtonInfo("f_ui_check", "check.png", "BUT_UI_CHECK",
         function(e){addFree(e, "f_more", "f_ui_check")})
    // item 2790
    var menu = new ButtonInfo("f_ui_menu", "f_menu.png", "BUT_UI_MENU",
         function(e){addFree(e, "f_more", "f_ui_menu")})
    var combo = new ButtonInfo("f_ui_combo", "f_combo.png", "BUT_UI_COMBO",
         function(e){addFree(e, "f_more", "f_ui_combo")})
    // item 2791
    var left1 = new ButtonInfo("f_ui_left", "left-angle.png", "BUT_UI_LEFT",
         function(e){addFree(e, "f_more", "f_ui_left")})
    var right1 = new ButtonInfo("f_ui_right", "right-angle.png", "BUT_UI_RIGHT",
         function(e){addFree(e, "f_more", "f_ui_right")})
    // item 2808
    var up = new ButtonInfo("f_ui_up", "up-angle.png", "BUT_UI_UP",
         function(e){addFree(e, "f_more", "f_ui_up")})
    var down = new ButtonInfo("f_ui_down", "down-angle.png", "BUT_UI_DOWN",
         function(e){addFree(e, "f_more", "f_ui_down")})
    // item 2792
    var left2 = new ButtonInfo("f_ui_left2", "left-angle2.png", "BUT_UI_LEFT2",
         function(e){addFree(e, "f_more", "f_ui_left2")})
    var right2 = new ButtonInfo("f_ui_right2", "right-angle2.png", "BUT_UI_RIGHT2",
         function(e){addFree(e, "f_more", "f_ui_right2")})
    // item 2793
    var placeholder = new ButtonInfo("f_ui_placeholder", "placeholder.png", "BUT_UI_PLACEHOLDER",
         function(e){addFree(e, "f_placeholder")})
    var tab = new ButtonInfo("f_ui_tab", "f_tab.png", "BUT_UI_TAB",
         function(e){addFree(e, "f_tab")})
    // item 2794
    var check_false = new ButtonInfo("f_ui_check_false", "check_false.png", "BUT_UI_CHECK_FALSE",
         function(e){addFree(e, "f_more", "f_ui_check_false")})
    var check_true = new ButtonInfo("f_ui_check_true", "check_true.png", "BUT_UI_CHECK_TRUE",
         function(e){addFree(e, "f_more", "f_ui_check_true")})
    // item 2795
    var radio_false = new ButtonInfo("f_ui_radio_false", "radio_false.png", "BUT_UI_RADIO_FALSE",
         function(e){addFree(e, "f_more", "f_ui_radio_false")})
    var radio_true = new ButtonInfo("f_ui_radio_true", "radio_true.png", "BUT_UI_RADIO_TRUE",
         function(e){addFree(e, "f_more", "f_ui_radio_true")})
    // item 2797
    var dots3h = new ButtonInfo("f_ui_dots3h", "dots3h.png", "BUT_UI_DOTS3H",
         function(e){addFree(e, "f_more", "f_ui_dots3h")})
    var dots3v = new ButtonInfo("f_ui_dots3v", "dots3v.png", "BUT_UI_DOTS3V",
         function(e){addFree(e, "f_more", "f_ui_dots3v")})
    // item 2798
    var close = new ButtonInfo("f_ui_close", "close.png", "BUT_UI_CLOSE",
         function(e){addFree(e, "f_more", "f_ui_close")})
    var close_mac = new ButtonInfo("f_ui_close_mac", "close_mac.png", "BUT_UI_CLOSE_MAC",
         function(e){addFree(e, "f_more", "f_ui_close_mac")})
    // item 2796
    var search = new ButtonInfo("f_ui_search", "search.png", "BUT_UI_SEARCH",
         function(e){addFree(e, "f_more", "f_ui_search")})
    // item 2788
    addToIconGroup("free-ui", [rect, label])
    addToIconGroup("free-ui", [line, arrow])
    addToIconGroup("free-ui", [begin, rounded])
    addToIconGroup("free-ui", [left, right])
    addToIconGroup("free-ui", [callout, shelf])
    addToIconGroup("free-ui", [circle, placeholder])
    addToIconGroup("free-ui", [hscroll, vscroll])
    addToIconGroup("free-ui", [check_true, check_false])
    addToIconGroup("free-ui", [radio_true, radio_false])
    addToIconGroup("free-ui", [cross, check])
    addToIconGroup("free-ui", [menu, combo])
    addToIconGroup("free-ui", [left1, right1])
    addToIconGroup("free-ui", [up, down])
    addToIconGroup("free-ui", [left2, right2])
    addToIconGroup("free-ui", [tab, search])
    addToIconGroup("free-ui", [close, close_mac])
    addToIconGroup("free-ui", [dots3h, dots3v])
    // item 2803
    var pc = new ButtonInfo("f_ar_pc", "pc.png", "BUT_AR_PC",
         function(e){addFree(e, "f_more", "f_ar_pc")})
    var human = new ButtonInfo("f_ar_human", "human.png", "BUT_AR_HUMAN",
         function(e){addFree(e, "f_more", "f_ar_human")})
    // item 2804
    var server1 = new ButtonInfo("f_ar_server1", "server1.png", "BUT_AR_SERVER1",
         function(e){addFree(e, "f_more", "f_ar_server1")})
    var server2 = new ButtonInfo("f_ar_server2", "server2.png", "BUT_AR_SERVER2",
         function(e){addFree(e, "f_more", "f_ar_server2")})
    // item 2805
    var phone = new ButtonInfo("f_ar_phone", "phone.png", "BUT_AR_PHONE",
         function(e){addFree(e, "f_more", "f_ar_phone")})
    var tablet = new ButtonInfo("f_ar_tablet", "tablet.png", "BUT_AR_TABLET",
         function(e){addFree(e, "f_more", "f_ar_tablet")})
    // item 2807
    var notebook = new ButtonInfo("f_ar_notebook", "notebook.png", "BUT_AR_NOTEBOOK",
         function(e){addFree(e, "f_more", "f_ar_notebook")})
    var portrait = new ButtonInfo("f_ar_portrait", "portrait.png", "BUT_AR_PORTRAIT",
         function(e){addFree(e, "f_more", "f_ar_portrait")})
    // item 2809
    var cloud = new ButtonInfo("f_cloud", "cloud.png", "BUT_AR_CLOUD",
         function(e){addFree(e, "f_cloud", "")})
    var db = new ButtonInfo("f_db", "db.png", "BUT_AR_DATABASE",
         function(e){addFree(e, "f_db", "")})
    // item 2806
    addToIconGroup("free-ar", [rect, label])
    addToIconGroup("free-ar", [line, arrow])
    addToIconGroup("free-ar", [begin, rounded])
    addToIconGroup("free-ar", [left, right])
    addToIconGroup("free-ar", [insertion, shelf])
    addToIconGroup("free-ar", [callout, circle])
    addToIconGroup("free-ar", [cloud, db])
    addToIconGroup("free-ar", [human, portrait])
    addToIconGroup("free-ar", [pc, notebook])
    addToIconGroup("free-ar", [server1, server2])
    addToIconGroup("free-ar", [phone, tablet])
}

function addMindButtons() {
    // item 3312
    var action = {
    	id: "mind_action",
    	image: "rectangle.png",
    	tooltip: "BUT_RECTANGLE",
    	shortcut: "A",
    	command: function() { showMindSockets("action") }
    }
    // item 3317
    var raction = {
    	id: "mind_raction",
    	image: "rounded.png",
    	tooltip: "BUT_ROUNDED",
    	shortcut: "R",
    	command: function() { showMindSockets("raction") }
    }
    // item 3318
    var collection = {
    	id: "mind_collection",
    	image: "collection.png",
    	tooltip: "BUT_COLLECTION",
    	shortcut: "C",
    	command: function() { showMindSockets("collection") }
    }
    // item 3319
    var beginend = {
    	id: "mind_beginend",
    	image: "f_begin.png",
    	tooltip: "BUT_FBEGIN",
    	shortcut: "S",
    	command: function() { showMindSockets("beginend") }
    }
    // item 3618
    var minsertion = {
    	id: "mind_insertion",
    	image: "insertion.png",
    	tooltip: "BUT_INSERTION",
    	shortcut: "N",
    	command: function() { showMindSockets("insertion") }
    }
    // item 3362
    var horver = {
    	id: "mind_horver",
    	image: "horver.png",
    	tooltip: "MES_TOGGLE_TREE",
    	command: toggleTreeType
    }
    // item 3321
    var callout = new ButtonInfo("f_callout", "callout.png", "BUT_CALLOUT", function(e){addFree(e,"callout")})
    var circle = new ButtonInfo("f_circle", "circle.png", "BUT_CIRCLE", function(e){addFree(e,"f_circle")})
    // item 3295
    var line = new ButtonInfo("f_line", "line.png", "BUT_LINE", function(e){addFree(e, "f_line")})
    var arrow = new ButtonInfo("f_arrow", "arrow.png", "BUT_ARROW", function(e){addFree(e, "f_arrow")})
    // item 3296
    var left = new ButtonInfo("f_ptr_left", "ptr-left.png", "BUT_PTR_LEFT", function(e){addFree(e, "f_ptr_left")})
    var right = new ButtonInfo("f_ptr_right", "ptr-right.png", "BUT_PTR_RIGHT", function(e){addFree(e, "f_ptr_right")})
    // item 3619
    var rect = new ButtonInfo(
    	"f_rectangle", "rectangle.png", "BUT_FREE_RECTANGLE",
    	function(e){addFree(e, "f_rectangle")}
    )
    // item 3621
    var shelf = {
    	id: "tt_shelf",
    	image: "shelf.png",
    	shortcut: "F",
    	tooltip: "BUT_SHELF",
    	command: function() { showSockets("shelf") }
    }
    // item 3320
    addToIconGroup("dia-mind", [action, raction])
    addToIconGroup("dia-mind", [collection, beginend])
    addToIconGroup("dia-mind", [minsertion, shelf])
    addToIconGroup("dia-mind", [horver])
    // item 3297
    addToIconGroup("dia-mind2", [line, arrow])
    addToIconGroup("dia-mind2", [left, right])
    addToIconGroup("dia-mind2", [rect, callout])
}

function addOption(select, value, textId) {
    // item 777
    var text = globals.translate(textId)
    // item 775
    var option = make(select, "option")
    // item 778
    HtmlUtils.setDivText(option, text)
    option.value = value
}

function addParameters() {
    // item 2668
    addTrace("ec:addParameters")
    // item 451
    globals.editor.addParameters()
    // item 452
    home()
}

function addStartTrace(id, command) {
    // item 2693
    return function(e) {
    	CallTrace.reset()
    	addTrace(id)
    	command(e)
    }
}

function addTitle(parent, titleId) {
    // item 1145
    if (titleId) {
        // item 1144
        var div = make(parent, "div")
        var title = globals.translate(titleId)
        HtmlUtils.setDivText(div, title)
        div.style.background = "#E2EDF5"
        div.style.padding = "5px"
    }
}

function addToIconGroup(name, row) {
    // item 135
    var group = findIconGroup(name)
    // item 109
    group.rows.push(row)
}

function addToolCombo(parent, value) {
    // item 768
    var select = make(parent, "select")
    select.style.width = "93px"
    select.style.fontSize = "80%"
    select.style.height = "30px"
    // item 769
    addOption(select, "basic", "MES_BASIC")
    addOption(select, "medic", "MES_MEDIC")
    addOption(select, "full", "MES_FULL")
    // item 779
    select.value = value
    select.onchange = onToolNameChanged
}

function addToolComboFree(parent, value) {
    // item 2739
    var select = make(parent, "select")
    select.style.width = "93px"
    select.style.fontSize = "80%"
    select.style.height = "30px"
    // item 2740
    addOption(select, "free-basic", "MES_BASIC")
    addOption(select, "free-ui", "UI")
    addOption(select, "free-ar", "MES_ARCHITECTURE")
    // item 2741
    select.value = value
    select.onchange = onToolNameFreeChanged
}

function addToolGroup(parent, group) {
    // item 754
    var table = make(parent, "table")
    table.className = "toolbox"
    // item 7550001
    var _ind755 = 0;
    var _col755 = group.rows;
    var _len755 = _col755.length;
    while (true) {
        // item 7550002
        if (_ind755 < _len755) {
            
        } else {
            break;
        }
        // item 7550004
        var row = _col755[_ind755];
        // item 758
        var tr = make(table, "tr")
        // item 757
        makeRowUi(tr, row)
        // item 7550003
        _ind755++;
    }
}

function addTrace(name, args) {
    // item 2697
    CallTrace.add(name, args)
}

function arrowDown(ctrl, shift, alt) {
    // item 2962
    addTrace("ec:down")
    // item 2977
    if (alt) {
        // item 2980
        pan(0, 1)
    } else {
        // item 2994
        var visible = globals.view.getVisibleBox()
        // item 2961
        globals.editor.arrowDown(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function arrowLeft(ctrl, shift, alt) {
    // item 2964
    addTrace("ec:left")
    // item 2981
    if (alt) {
        // item 2984
        pan(-1, 0)
    } else {
        // item 2995
        var visible = globals.view.getVisibleBox()
        // item 2963
        globals.editor.arrowLeft(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function arrowRight(ctrl, shift, alt) {
    // item 2966
    addTrace("ec:right")
    // item 2985
    if (alt) {
        // item 2988
        pan(1, 0)
    } else {
        // item 2996
        var visible = globals.view.getVisibleBox()
        // item 2965
        globals.editor.arrowRight(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function arrowUp(ctrl, shift, alt) {
    // item 2968
    addTrace("ec:up")
    // item 2989
    if (alt) {
        // item 2992
        pan(0, -1)
    } else {
        // item 2993
        var visible = globals.view.getVisibleBox()
        // item 2967
        globals.editor.arrowUp(ctrl, shift, visible)
        globals.view.redraw()
    }
}

function autoResize() {
    // item 2669
    addTrace("ec:autoResize")
    // item 572
    globals.delay = true
    globals.editor.autoSizeIcons()
    globals.delay = false
    // item 664
    persist()
}

function buildChanges(src) {
    // item 692
    var change = {
    	editType: "edit",
    	name: src.name,
    	background: src.background,
    	diaLine: src.diaLine,
    	diaLineThickness: src.diaLineThickness,
    	font: src.font,
    	added: src.added,
    	removed: src.removed,
    	updated: src.updated
    };
    // item 841
    increaseTag(src, change)
    // item 695
    return change
}

function buildDiagramFromItems(src) {
    // item 899
    var name = src.name
    var items = src.items
    var background = src.background
    var diaLine = src.diaLine
    var diaLineThickness = src.diaLineThickness
    var font = src.font
    // item 420
    var diagram = {
    	name: name,
    	type: src.type,
    	background: background,
    	diaLine: diaLine,
    	diaLineThickness: diaLineThickness,
    	version: src.version,
    	font: font,
    	nodes: {},
    	edges: {},
    	free: {}
    }
    // item 4220001
    var _ind422 = 0;
    var _col422 = items;
    var _len422 = _col422.length;
    while (true) {
        // item 4220002
        if (_ind422 < _len422) {
            
        } else {
            break;
        }
        // item 4220004
        var item = _col422[_ind422];
        // item 427
        var copy = Utils.copyItem(item)
        var id = copy.id
        // item 739
        if (copy.free) {
            // item 742
            diagram.free[id] = copy
        } else {
            // item 424
            if (copy.isLine) {
                // item 428
                diagram.edges[id] = copy
            } else {
                // item 429
                diagram.nodes[id] = copy
            }
        }
        // item 4220003
        _ind422++;
    }
    // item 421
    return diagram
}

function buildThemeDefinitions() {
    // item 480
    var row1 = [
    	["theme11.png", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#c0d0ff", "#b0b0b0", [
    		["insertion", "#ffffff", "#000000", "#000000", "#ffffff"],
    		["loopbegin", "#FFFFE0", "#000000", "#000000"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme12.png", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#FFFFFF", "#ffffff", [
    	["insertion", "#ffffff", "#000000", "#000000", "#ffffff"]
            ]],
    	["theme13.png", "#FFFFFF", "#000000", "#827D7D", "#000000", "#000000", "#DADEFF", "#b0b0b0", [
    		["insertion", "#ffffff", "#000000", "#827D7D", "#ffffff"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme14.png", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#c0d0ff", "#b0b0b0", [
    		["insertion", "#ffffff", "#000000", "#000000", "#ffffff"],
    		["question", "#ffffd3", "#000000", "#000000"],
    		["select", "#ffdbdb", "#000000", "#000000"],
    		["loopbegin", "#deffde", "#000000", "#000000"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]]
     ]
    // item 481
    var row2 = [
    
    	["theme21.png", "#568FFF", "#ffffff", "none", "#000000", "#000000", "#ffffff", "#B1CAFF", [
    		["question", "#436AB9", "#ffffff", "none"],
    		["insertion", "#568FFF", "#ffffff", "none", "#436AB9"],
    		["loopbegin", "#5A72A2", "#ffffff", "none"],
    		["callout", "#FFFC96", "#000000", "#626262"],
    		["comment", "#568FFF", "#ffffff", "none"]
    	]],
    
    	["theme22.png", "#568FFF", "#ffffff", "none", "#000000", "#000000", "#ffffff", "#B1CAFF", [
    		["question", "#2A9E4B", "#ffffff", "none"],
    		["insertion", "#568FFF", "#ffffff", "none", "#436AB9"],
    		["loopbegin", "#3EBD62", "#ffffff", "none"],
    		["callout", "#FFFC96", "#000000", "#626262"],
    		["comment", "#568FFF", "#ffffff", "none"]
    	]],	
    
    	["theme23.png", "#568FFF", "#ffffff", "none", "#000000", "#000000", "#ffffff", "#B1CAFF", [
    		["question", "#ffffff", "#000000", "#00137F"],
    		["insertion", "#568FFF", "#ffffff", "none", "#436AB9"],
    		["loopbegin", "#5A72A2", "#ffffff", "none"],
    		["callout", "#FFFC96", "#000000", "#626262"],
    		["comment", "#568FFF", "#ffffff", "none"]
    	]],
    
    	["theme24.png", "#FFE26C", "#000000", "none", "#000000", "#000000", "#ffffff", "#FFA849", [
    		["question", "#FFA849", "#000000", "none"],
    		["insertion", "#FFE26C", "#000000", "none", "#CBB145"],
    		["loopbegin", "#F2C371", "#000000", "none"],
    		["callout", "#FCFCFC", "#000000", "#626262"],
    		["comment", "#FFE26C", "#000000", "none"]
    	]]
     ]
    // item 3592
    var row3 = [
    	["theme31.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#DE3E26", "#ffffff", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#FF5454", "#000000", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],	
    
    	["theme32.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#EDEEF0", "#000000", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#EDEEF0", "#000000", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],	
    	
    	["theme33.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#C2C0C0", "#000000", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#A0A0A0", "#000000", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],	
    	
    	["theme34.png", "#ffffff", "#000000", "none", "#000000", "#000000", "#3BAD4D", "#9EC85C", [
    		["question", "#215B2A", "#ffffff", "none"],
    		["insertion", "#EDEEF0", "#000000", "none", "#9EC85C"],
    		["loopbegin", "#9EC85C", "#000000", "none"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "none"]
    	]]
    ]
    // item 482
    var row4 = [
    	["theme41.png", "#EDEEF0", "#000000", "#A0A0A0", "#000000", "#000000", "#ffffff", "#C2C0C0", [
    		["question", "#436AB9", "#ffffff", "#A0A0A0"],
    		["insertion", "#EDEEF0", "#000000", "#A0A0A0", "#C2C0C0"],
    		["loopbegin", "#5A72A2", "#ffffff", "#A0A0A0"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#EDEEF0", "#000000", "#A0A0A0"]
    	]],
    	
    	["theme42.png", "#F5EBE4", "#000000", "#000000", "#000000", "#000000", "#FFFFFF", "#b0b0b0", [
    		["insertion", "#F5EBE4", "#000000", "#000000", "#F5EBE4"],
    		["question", "#e5e6e4", "#000000", "#000000"],
    		["select", "#cfd2cd", "#000000", "#000000"],
    		["loopbegin", "#CAC8C8", "#000000", "#000000"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme43.png", "#bfd8bd", "#000000", "#597A62", "#000000", "#000000", "#FFFFFF", "#70b070", [
    		["insertion", "#bfd8bd", "#000000", "#597A62", "#bfd8bd"],
    		["question", "#edeec9", "#000000", "#597A62"],
    		["select", "#98c9a3", "#000000", "#597A62"],
    		["loopbegin", "#98c9a3", "#000000", "#597A62"],
    		["callout", "#FFFC96", "#000000", "#000000"]
    	]],
    	["theme44.png", "#ffffff", "#000000", "none", "#000000", "#000000", "#0094FF", "#7FC9FF", [
    		["question", "#12279F", "#ffffff", "none"],
    		["insertion", "#ffffff", "#000000", "none", "#7FC9FF"],
    		["loopbegin", "#7FC9FF", "#000000", "none"],
    		["callout", "#FFFFF0", "#000000", "#626262"],
    		["comment", "#ffffff", "#000000", "none"]
    	]]
     ]
    // item 484
    var row5 = [
    	["theme51.png", "#000000", "#ffffff", "#B2B2B2", "#ffffff", "#ffffff", "#000000", "#000000", [
    		["insertion", "#000000", "#ffffff", "#B2B2B2", "#000000"],
    		["callout", "#000000", "#ffffff", "#B2B2B2"]
    	]],
    	["theme52.png", "#000000", "#ace4ff", "#6B6DFF", "#ace4ff", "#ace4ff", "#000540", "#000080", [
    		["insertion", "#000000", "#ace4ff", "#6B6DFF", "#000000"],
    		["callout", "#000590", "#ace4ff", "#6B6DFF"]
    	]],
    	["theme53.png", "#000000", "#fff1c8", "#797954", "#fff1c8", "#fff1c8", "#000020", "#000080", [
    		["insertion", "#000000", "#fff1c8", "#797954", "#000000"],
    		["question", "#1f1f00", "#fff1c8", "#999974"],
    		["select", "#250100", "#fff1c8", "#999974"],
    		["loopbegin", "#042d00", "#fff1c8", "#999974"],
    		["callout", "#000590", "#fff1c8", "#999974"]
    	]],
    	["theme54.png", "#000000", "#4aff4d", "#008000", "#4aff4d", "#4aff4d", "#000000", "#007000", [
    		["insertion", "#000000", "#4aff4d", "#008000", "#000000"],
    		["question", "#002400", "#4aff4d", "#008000"],
    		["select", "#000000", "#4aff4d", "#008000"],
    		["loopbegin", "#005100", "#4aff4d", "#008000"],
    		["callout", "#002400", "#4aff4d", "#008000"]
    	]]
     ]
    // item 3622
    var row6 = [
    	["theme61.png", "#FFFFFF", "#000000", "#b0b0b0", "#000000", "#000000", "#FFFFFF", "#d0d0d0", [
    	["insertion", "#ffffff", "#000000", "#b0b0b0", "#ffffff"],
    	["callout", "#FFFFF0", "#000000", "#b0b0b0"]
            ], 2],	
    
    	["theme62.png", "#AFF0DD", "#000000", "#00987E", "#000000", "#000000", "#ffffff", "#8FD6C2", [
    		["question", "#8FD6C2", "#000000", "#00987E"],
    		["insertion", "#AFF0DD", "#000000", "#00987E", "#8FD6C2"],
    		["loopbegin", "#85C2C5", "#000000", "#00987E"],
    		["callout", "#FFFFF0", "#000000", "#00987E"],
    		["comment", "#AFF0DD", "#000000", "#00987E"]
    	], 2],	
    	
    	["theme63.png", "#C4E2F8", "#000000", "#5C9CCB", "#000000", "#000000", "#ffffff", "#80BFEF", [
    		["question", "#96CBF3", "#000000", "#5C9CCB"],
    		["insertion", "#C4E2F8", "#000000", "#5C9CCB", "#80BFEF"],
    		["loopbegin", "#80BFEF", "#000000", "#5C9CCB"],
    		["callout", "#FFFFF0", "#000000", "#5C9CCB"],
    		["comment", "#C4E2F8", "#000000", "#5C9CCB"]
    	], 2],
    
    	["theme64.png", "#fff68f", "#000000", "#9B9262", "#000000", "#000000", "#FFFFFF", "#E6C543", [
    	["question", "#E6C543", "#000000", "#9B9262"],
    	["insertion", "#fff68f", "#000000", "#9B9262", "#E6C543"],
    	["callout", "#fff64f", "#000000", "#9B9262"]
            ], 2]
    ]
    // item 3634
    var row7 = [
    	["theme71.png", "#FFFFFF", "#000000", "#b0b0b0", "#000000", "#000000", "#FFFFFF", "#d0d0d0", [
    	["insertion", "#ffffff", "#000000", "#b0b0b0", "#ffffff"],
    	["callout", "#FFFFF0", "#000000", "#b0b0b0"]
            ], 3],	
    
    	["theme72.png", "#AFF0DD", "#000000", "#00987E", "#000000", "#000000", "#ffffff", "#8FD6C2", [
    		["question", "#8FD6C2", "#000000", "#00987E"],
    		["insertion", "#AFF0DD", "#000000", "#00987E", "#8FD6C2"],
    		["loopbegin", "#85C2C5", "#000000", "#00987E"],
    		["callout", "#FFFFF0", "#000000", "#00987E"],
    		["comment", "#AFF0DD", "#000000", "#00987E"]
    	], 3],	
    	
    	["theme73.png", "#C4E2F8", "#000000", "#5C9CCB", "#000000", "#000000", "#ffffff", "#80BFEF", [
    		["question", "#96CBF3", "#000000", "#5C9CCB"],
    		["insertion", "#C4E2F8", "#000000", "#5C9CCB", "#80BFEF"],
    		["loopbegin", "#80BFEF", "#000000", "#5C9CCB"],
    		["callout", "#FFFFF0", "#000000", "#5C9CCB"],
    		["comment", "#C4E2F8", "#000000", "#5C9CCB"]
    	], 3],
    
    	["theme74.png", "#fff68f", "#000000", "#9B9262", "#000000", "#000000", "#FFFFFF", "#E6C543", [
    	["question", "#E6C543", "#000000", "#9B9262"],
    	["insertion", "#fff68f", "#000000", "#9B9262", "#E6C543"],
    	["callout", "#fff64f", "#000000", "#9B9262"]
            ], 3]	
    ]
    // item 485
    return [row1, row2, row3, row4, row5, row6, row7]
}

function buildThemeMenuItem(definition) {
    // item 512
    var theme = Theme.build(definition);
    var callback = function() {
    	setTheme(theme);
    };
    return {
    	image: theme.image,
    	callback: callback
    };
}

function centerItem(itemId) {
    // item 3223
    if (itemId) {
        // item 3228
        var editor = globals.editor
        // item 3226
        var item = editor.getItem(itemId)
        // item 3227
        if (item) {
            // item 3235
            var width = globals.box.width
            // item 3232
            if (globals.showToolbar) {
                // item 3230
                width -= tbWidth
            }
            // item 3222
            var zoom = globals.view.getZoom();
            var dx = width / 2 / zoom
            var dy = globals.box.height / 2 / zoom
            // item 3231
            globals.view.pan(
            	-item.x + dx,
            	-item.y + dy
            )
            // item 3229
            editor.selectOneItem(itemId)
        }
    }
}

function changeBackground(x, y) {
    // item 1473
    diaClear()
    // item 1474
    diaAddHeader("MES_BACKGROUND")
    // item 1475
    var fill = diaAddSection("MES_FILL")
    var fillDiv = make(fill, "div")
    // item 1483
    var getColor = function() {
    	var color = globals.background ||
    		 Theme.getBackground()
    	return color
    }
    // item 1476
    var backColor = addColor(
    	fillDiv,
    	getColor,
    	"MES_BACKGROUND_COLOR",
    	setBackgroundColor
    )
    // item 1482
    globals.dialogs.backColorButt = backColor
    backColor.style.cursor = "pointer"
    // item 2602
    if ((isDrakon()) || (isMind())) {
        // item 2370
        var line = diaAddSection("MES_LINE")
        var lineDiv = make(line, "div")
        // item 2371
        var getLineColor = function() {
        	var color = globals.diaLine ||
        		 Theme.getLine()
        	return color
        }
        // item 2372
        var lineColor = addColor(
        	lineDiv,
        	getLineColor,
        	"MES_LINE_COLOR",
        	setDiaLineColor
        )
        // item 2378
        globals.dialogs.diaLineColorButt = lineColor
        lineColor.style.cursor = "pointer"
        // item 2601
        lineColor.style.verticalAlign = "bottom"
        // item 2594
        var thickButt = createImageButton(
        	lineDiv,
        	"thickness.png",
        	40,
        	30,
        	function(data) {
        	  showThicknessItems(
                    data, 1, 
                    globals.diaLineThickness || 1,
                    setDLT)
        	},
        	false
        )
    }
    // item 1477
    var defaults = diaAddSection(null)
    // item 1478
    diaAddButton(
    	defaults,
    	"MES_CLEAR_BACKGROUND",
    	clearBackground
    )
    // item 1479
    diaAddButton(
    	defaults,
    	"MES_SET_DEFAULT_BACK",
    	setDefaultBackground
    )
    // item 1480
    diaAddButton(
    	defaults,
    	"MES_CLEAR_DEFAULT_BACK",
    	clearDefaultBackground
    )
    // item 1481
    showDialog(x, y)
}

function changeFormat(x, y, ids) {
    // item 1505
    var dialogs = globals.dialogs
    // item 1440
    diaClear()
    // item 1441
    diaAddHeader("MES_FORMAT")
    // item 1445
    var format = globals.editor.getFormat(ids)
    var fonts = globals.editor.getFontsForItems(ids)
    // item 1504
    parseFormat(format, fonts)
    // item 1524
    dialogs.ids = ids
    // item 2534
    var thickStart
    // item 2537
    if (format.hasLine) {
        // item 2535
        thickStart = 1
    } else {
        // item 2536
        thickStart = 0
    }
    // item 2528
    if (format.lineOnly) {
        
    } else {
        // item 1509
        var fill = diaAddSection("MES_FILL")
        var fillDiv = make(fill, "div")
        // item 1510
        var getFillColor = function() {
        	return dialogs.fillColor0 ||	
        	  Theme.getIconBack("action")
        }
        // item 1511
        var fillColorButt = addColor(
        	fillDiv,
        	getFillColor,
        	"MES_FILL_COLOR",
        	setFillColor
        )
        fillColorButt.style.verticalAlign = "bottom"
        fillColorButt.style.margin = "0px"
        fillColorButt.style.marginRight = "5px"
        // item 1512
        dialogs.fillColorButt = fillColorButt
        // item 1520
        fillDiv.style.padding = "5px"
        // item 2295
        makeCheck(
        	fillDiv,
        	"MES_GRADIENT",
        	(dialogs.fillType == "gradient"),
        	onGradChanged
        )
        // item 2296
        var shad = makeCheck(
        	fillDiv,
        	"MES_SHADOW",
        	!!dialogs.shadow,
        	onShadowChanged
        )
        shad.style.marginLeft = "10px"
        // item 1791
        if (dialogs.allowSecondary) {
            // item 1794
            var secondary = diaAddSection("MES_SECONDARY")
            var secondaryDiv = make(secondary, "div")
            secondaryDiv.style.padding = "5px"
            // item 1795
            var getSecondaryColor = function() {
            	return dialogs.secondaryColor ||	
            	  Theme.getCommentBack()
            }
            // item 1796
            var secondaryColorButt = addColor(
            	secondaryDiv,
            	getSecondaryColor,
            	"MES_SECONDARY",
            	setSecondaryColor
            )
            secondaryColorButt.style.verticalAlign = "bottom"
            secondaryColorButt.style.margin = "0px"
            secondaryColorButt.style.marginRight = "5px"
            // item 1797
            dialogs.secondaryColorButt = secondaryColorButt
        }
    }
    // item 1442
    var text = diaAddSection("MES_TEXT")
    var textDiv = make(text, "div")
    // item 1506
    var getTextColor = function() {
    	return dialogs.textColor ||
    	  Theme.getIconFont("action")
    }
    // item 1443
    var textColorButt = addColor(
    	textDiv,
    	getTextColor,
    	"MES_TEXT_COLOR",
    	setTextColor
    )
    // item 1490
    dialogs.textColorButt = textColorButt
    textColorButt.style.verticalAlign = "bottom"
    // item 1926
    dialogs.boldButt = createFontButton(
    	textDiv,
    	"bold.png",
    	onBoldClicked
    )
    // item 1927
    dialogs.italicButt = createFontButton(
    	textDiv,
    	"italics.png",
    	onItalicClicked
    )
    // item 1931
    dialogs.alignLeftButt = createFontButton(
    	textDiv,
    	"align-left.png",
    	function() { onAlign("left") }
    )
    // item 1932
    dialogs.alignCenterButt = createFontButton(
    	textDiv,
    	"align-center.png",
    	function() { onAlign("center") }
    )
    // item 1933
    dialogs.alignRightButt = createFontButton(
    	textDiv,
    	"align-right.png",
    	function() { onAlign("right") }
    )
    // item 1948
    dialogs.alignLeftButt.div.style.marginLeft
     = "5px"
    // item 1949
    flatRight(dialogs.alignLeftButt.div)
    var midStyle = dialogs.alignCenterButt.div.style
    midStyle.borderRadius = "0px"
    midStyle.borderLeft = ""
    midStyle.borderRight = ""
    
    flatLeft(dialogs.alignRightButt.div)
    flatLeft(dialogs.italicButt.div)
    flatRight(dialogs.boldButt.div)
    dialogs.boldButt.div.style.borderRight = ""
    // item 2130
    switchButton(dialogs.boldButt, dialogs.bold)
    switchButton(dialogs.italicButt, dialogs.italic)
    // item 2188
    if (dialogs.align) {
        // item 2211
        showAlign(dialogs.align)
    }
    // item 1878
    var text2 = make(text, "div")
    text2.style.paddingRight = "5px"
    // item 1879
    var families = makeFamilies(dialogs.family)
    // item 1880
    createCombo(
    	text2,
    	"MES_FONT_FAMILY",
    	150,
    	families,
    	onFamilyChanged
    )
    // item 1899
    createCombo(
    	text2,
    	"MES_FONT_SIZE",
    	50,
    	makeSizes(dialogs.size),
    	onSizeChanged
    )
    // item 1963
    var text3 = make(text, "div")
    // item 1964
    createDialogButton(
    	text3,
    	"MES_SET_DEFAULT_FONT",
    	setDefaultFont
    )
    // item 1491
    var line = diaAddSection("MES_LINE")
    var lineDiv = make(line, "div")
    // item 1507
    var getLineColor = function() {
    	return dialogs.lineColor ||
    	  Theme.getIconFont("action")
    }
    // item 1492
    var lineColorButt = addColor(
    	lineDiv,
    	getLineColor,
    	"MES_LINE_COLOR",
    	setLineColor
    )
    // item 1670
    lineColorButt.style.verticalAlign = "bottom"
    // item 1494
    dialogs.lineColorButt = lineColorButt
    // item 1669
    var thickButt = createImageButton(
    	lineDiv,
    	"thickness.png",
    	40,
    	30,
    	function(data) {
    	  showThicknessItems(
                data, thickStart, 
                dialogs.lineThickness,
    	    setThickness)
    	},
    	false
    )
    // item 2498
    var styleButt = createImageButton(
    	lineDiv,
    	"style.png",
    	40,
    	30,
    	showStyleItems,
    	false
    )
    styleButt.div.style.marginLeft = "5px"
    // item 2531
    if (format.lineOnly) {
        // item 2540
        var arrowStart = createImageButton(
        	lineDiv, "arrow-left.png", 40, 30,
        	showArrowStartItems,
        	false
        )
        arrowStart.div.style.marginLeft = "5px"
        // item 2541
        var arrowEnd = createImageButton(
        	lineDiv, "arrow-right.png", 40, 30,
        	showArrowEndItems,
        	false
        )
        arrowEnd.div.style.marginLeft = "5px"
    } else {
        // item 1976
        var buttonsDiv = diaAddSection("")
        buttonsDiv.style.paddingTop = "10px"
        // item 1975
        createDialogButton(
        	buttonsDiv,
        	"MES_CLEAR_FORMAT",
        	clearFormat
        )
        // item 1973
        createDialogButton(
        	buttonsDiv,
        	"MES_SET_DEFAULT_STYLE",
        	setDefaultStyle
        )
        // item 1974
        createDialogButton(
        	buttonsDiv,
        	"MES_CLEAR_DEFAULT_STYLE",
        	clearDefaultStyle
        )
    }
    // item 1450
    if (ids.length == 1) {
        // item 1453
        var rect = globals.editor.getItemRect(
        	ids[0]
        )
        var pos = diagramToClient(
        	rect.right,
        	rect.top
        )
        // item 1454
        x = pos.x + 30
        y = pos.y
    }
    // item 1449
    showDialog(x, y)
}

function changeYesNo() {
    // item 2893
    window.location.href = "/account?page=language&ref=diagram"
}

function checkInputText(text) {
    // item 641
    if (globals.readonly) {
        // item 644
        return globals.translate("ERR_READONLY")
    } else {
        // item 609
        if ((text) && (text.length > Config.MAX_TEXT)) {
            // item 615
            return globals.translate("ERR_TEXT_TOO_LONG")
        } else {
            // item 616
            return null
        }
    }
}

function checkSource() {
    // item 828
    if (globals.readonly) {
        // item 831
        return globals.translate("ERR_READONLY")
    } else {
        // item 832
        return null
    }
}

function chooseFontComponent(component, italic, bold, size, family) {
    // item 3442
    var value
    // item 34440001
    if (component === "italic") {
        // item 3443
        value = italic
    } else {
        // item 34440002
        if (component === "bold") {
            // item 3453
            value = bold
        } else {
            // item 34440003
            if (component === "size") {
                // item 3454
                value = size
            } else {
                // item 34440004
                if (component === "family") {
                    
                } else {
                    // item 34440005
                    throw "Unexpected switch value: " + component;
                }
                // item 3455
                value = family
            }
        }
    }
    // item 3457
    return value
}

function clearBackground() {
    // item 2671
    addTrace("ec:clearBackground")
    // item 3623
    globals.userBackground = ""
    globals.userDiaLine = ""
    globals.userDiaLineThickness = ""
    // item 3631
    var fields = {
    	diaLineThickness: "",
    	diaLine: "",
    	background: ""
    }
    // item 3630
    globals.editor.setBackground(fields)
    globals.view.redraw()
}

function clearDefaultBackground() {
    // item 1372
    setDefaultBgCore("", "", "")
}

function clearDefaultStyle() {
    // item 2319
    var settings = {
    	shape: ""
    }
    // item 2320
    globals.saveUserSettings(settings)
    // item 2321
    globals.userShape = ""
    // item 2349
    hideDialog()
}

function clearFormat() {
    // item 2672
    addTrace("ec:clearFormat")
    // item 2360
    var family = Config.FONT_FAMILY
    // item 2359
    var file = getFontFile(false, false, family)
    // item 2358
    globals.loadFont(
    	false,
    	false,
    	family,
    	file,
    	finishClearFormat
    )
}

function clearLink() {
    // item 2880
    setLink("")
}

function colorFromRgb(red, green, blue) {
    // item 1592
    return "#"
     + red.toString(16)
     + green.toString(16)
     + blue.toString(16)
}

function commandDone() {
    
}

function copy() {
    // item 2659
    addTrace("ec:copy")
    // item 2412
    globals.editor.copy()
    globals.view.redraw()
}

function copyToClipboard(type, data) {
    // item 600
    globals.clipboard.copyToClipboard(type, data)
}

function createButton(parent, onClick, isToggle) {
    // item 1836
    var idle = "#fcfcfc"
    var active = "#a0a0a0"
    // item 1833
    var div = make(parent, "div")
    div.style.background = idle
    div.style.display = "inline-block"
    div.style.verticalAlign = "bottom"
    // item 1841
    div.style.cursor = "pointer"
    div.style.border = "solid 1px #a0a0a0"
    div.style.borderRadius = "5px"
    div.style.marginBottom = "5px"
    // item 1832
    var data = {
    	isToggle: isToggle,
    	on: false,
    	down: false,
    	div: div,
    	idle: idle,
    	active: active,
    	onClick: onClick
    }
    // item 1835
    var down = function() {
    	onButtonDown(data)
    }
    // item 1837
    var move = function() {
    	onButtonMove(data)
    }
    // item 1838
    var up = function() {
    	onButtonUp(data)
    }
    // item 1839
    var leave = function() {
    	onButtonLeave(data)
    }
    // item 1834
    HtmlUtils.registerDown(div, down)
    HtmlUtils.registerMove(div, move)
    HtmlUtils.registerUp(div, up)
    div.onmouseleave = leave
    div.ontouchcancel = leave
    div.oncontextmenu = function() { return false }
    // item 1840
    return data
}

function createCombo(parent, title, labelWidth, items, onClick) {
    // item 1847
    var data = createButton(
    	parent,
    	showComboDropDown,
    	false
    )
    // item 1877
    data.title = title
    data.items = items
    data.onSelected = onClick
    // item 1844
    var div = data.div
    // item 1848
    var label = make(div, "div")
    label.style.display = "inline-block"
    label.style.overflowX = "hidden"
    label.style.width = labelWidth + "px"
    label.style.whiteSpace = "nowrap"
    data.label = label
    // item 1881
    div.style.marginLeft = "5px"
    div.style.paddingRight = "5px"
    label.style.paddingLeft = "5px"
    label.style.paddingBottom = "5px"
    // item 1868
    setComboText(data)
    // item 1843
    var img = make(div, "img")
    img.width = 13
    img.height = 30
    img.src = globals.imageBase + "tri-down.png"
    img.verticalAlign = "middle"
    // item 1845
    return data
}

function createDialogButton(parent, textId, onClick) {
    // item 1970
    var div = make(parent, "div")
    div.className = "panic_button"
    div.style.margin = "5px"
    div.style.marginTop = "0px"
    HtmlUtils.setDivText(
    	div,
    	globals.translate(textId)
    )
    div.style.fontSize = "80%"
    // item 1971
    div.onclick = onClick
    // item 1972
    return div
}

function createFontButton(parent, image, onClick) {
    // item 1925
    return createImageButton(
    	parent,
    	image,
    	30,
    	30,
    	onClick,
    	true
    )
}

function createIconGroup(name, type) {
    // item 122
    var group = {
    	name: name,
    	type: type,
    	rows: []
    }
    // item 103
    globals.groups.push(group)
}

function createImageButton(parent, image, width, height, onClick, isToggle) {
    // item 1842
    var data = createButton(
    	parent,
    	onClick,
    	isToggle
    )
    // item 1635
    var div = data.div
    // item 1632
    var img = make(div, "img")
    img.width = width
    img.height = height
    img.src = globals.imageBase + image
    img.verticalAlign = "middle"
    // item 1671
    div.style.width = width + "px"
    div.style.height = height + "px"
    // item 1659
    return data
}

function createLeftButton(command, direction, background, image) {
    // item 3142
    var index = globals.leftButts.length
    // item 3604
    var button = {
    	command: command,
    	side: "left",
    	direction: direction,
    	background: background,
    	image: image || null
    }
    // item 3145
    var div = createSideButton(button)
    // item 3144
    var item = {
    	div : div,
    	visible: true,
    	button: button
    }
    // item 3146
    globals.leftButts.push(item)
    // item 3143
    return index
}

function createPopup() {
    // item 2922
    var popup = HtmlUtils.createPopup(null)
    // item 2924
    globals.dialogs.popup = popup
    // item 2923
    return popup
}

function createRightButton(command, direction, background) {
    // item 3171
    var index = globals.rightButts.length
    // item 3607
    var button = {
    	command: command,
    	side: "right",
    	direction: direction,
    	background: background
    }
    // item 3606
    var div = createSideButton(button)
    // item 3605
    var item = {
    	div : div,
    	visible: true,
    	button: button
    }
    // item 3175
    globals.rightButts.push(item)
    // item 3172
    return index
}

function createSideButton(button) {
    var _sw30540000_ = 0;
    // item 3052
    var border = "solid 1px #b0b0b0"
    // item 3049
    var img = make(globals.root, "img")
    img.width = SideSize
    img.height = SideSize
    // item 3053
    img.src = getImageForDirection(
    	button,
    	button.direction
    )
    // item 3062
    var style = img.style
    var radius = "7px"
    // item 3050
    style.background = button.background
    style.borderBottom = border
    style.borderTop = border
    style.cursor = "pointer"
    img.onclick = button.command
    // item 30540000
    _sw30540000_ = button.side;
    // item 30540001
    if (_sw30540000_ === "left") {
        // item 3060
        style.borderBottomRightRadius = radius
        style.borderTopRightRadius = radius
        style.borderRight = border
    } else {
        // item 30540002
        if (_sw30540000_ === "right") {
            
        } else {
            // item 30540003
            throw "Unexpected switch value: " + _sw30540000_;
        }
        // item 3061
        style.borderBottomLeftRadius = radius
        style.borderTopLeftRadius = radius
        style.borderLeft = border
    }
    // item 3051
    return img
}

function cut() {
    // item 2660
    addTrace("ec:cut")
    // item 2413
    globals.editor.cut()
    globals.view.redraw()
}

function deleteSelection() {
    // item 2661
    addTrace("ec:deleteSelection")
    // item 705
    globals.editor.deleteSelection()
    globals.view.redraw()
}

function diaAddButton(parent, textId, action) {
    // item 1066
    var container = make(parent, "div")
    // item 1064
    var text = globals.translate(textId)
    // item 1067
    var callback = function() {
    	action()
    	hideDialog()
    }
    // item 1063
    var div = make(container, "div")
    HtmlUtils.setDivText(div, text)
    div.className = "panic_button"
    div.onclick = callback
    // item 3600
    return div
}

function diaAddHeader(textId) {
    // item 1046
    var text = globals.translate(textId)
    // item 1057
    var dialog = globals.dialogs.dialog
    // item 1091
    var hp = make(dialog, "div")
    hp.style.background = "#455A64"
    // item 1047
    var header = make(hp, "table")
    header.style.width = "280px"
    header.style.color = "white"
    var tr = make(header, "tr")
    var td0 = make(tr, "td")
    td0.width = "250"
    td0.style.paddingLeft = "5px"
    td0.style.cursor = "default"
    var td1 = make(tr, "td")
    
    td1.width = "30"
    // item 1061
    td1.onclick = hideDialog
    td1.ontouchstart = hideDialog
    // item 1053
    var cross = make(td1, "img")
    cross.className = "common_button"
    cross.src = globals.imageBase + "cross.png"
    cross.width = "30"
    cross.height = "30"
    cross.verticalAlign = "middle"
    cross.style.cursor = "pointer"
    // item 1048
    HtmlUtils.setDivText(td0, text)
}

function diaAddSection(titleId) {
    // item 1054
    var section = make(globals.dialogs.dialog, "div")
    section.style.background = "white"
    // item 1065
    section.style.borderTop = "solid 1px #455A64"
    // item 1148
    addTitle(section, titleId)
    // item 1056
    return section
}

function diaClear() {
    // item 1049
    var dialogs = globals.dialogs
    // item 981
    dialogs.dialog = HtmlUtils.createPopup(
    	globals.beh.externalClick
    )
    // item 1165
    setDialogStyle(dialogs.dialog)
}

function diagramHasFocus() {
    // item 2393
    if (dialogs.dialog.style.display == "none") {
        // item 2392
        return true
    } else {
        // item 2396
        return false
    }
}

function diagramToClient(x, y) {
    // item 1013
    var pos = HtmlUtils.rect(globals.canvas)
    // item 1014
    var result = globals.view.diagramToClient(x, y)
    // item 1015
    result.x = Math.round(result.x + pos.left)
    result.y = Math.round(result.y + pos.top)
    // item 1016
    return result
}

function editLink(itemId, content, x, y) {
    // item 2832
    var dialogs = globals.dialogs
    // item 2830
    diaClear()
    // item 2831
    diaAddHeader("MES_EXTERNAL_LINK")
    // item 2833
    var defaults = diaAddSection(null)
    // item 2855
    dialogs.itemId = itemId
    dialogs.content = content
    // item 2839
    var width = 280
    var margin = 10
    // item 2838
    var edit = make(defaults, "textarea")
    // item 2840
    edit.id = "link_text"
    edit.style.boxSizing = "border-box"
    edit.style.resize = "none"
    edit.style.outline = "none"
    edit.style.width = width - margin * 2 + "px"
    edit.style.padding = "5px"
    
    edit.style.height = "70px"
    edit.style.margin = margin + "px"
    edit.style.border = "solid 1px #707070"
    edit.style.fontSize = "12pt"
    edit.style.fontFamily = Config.FONT_FAMILY
    edit.style.verticalAlign = "top"
    edit.autocorrect="off"
    edit.autocapitalize="off"
    edit.spellcheck="false"
    // item 2849
    var message = make(defaults, "div")
    // item 2850
    message.id = "link_message"
    message.style.color = "red"
    message.style.padding = "10px"
    // item 2851
    if (content.link) {
        // item 2854
        edit.value = content.link
    }
    // item 2835
    diaAddButton(
    	defaults,
    	"MES_CLEAR",
    	clearLink
    )
    // item 2834
    var save = diaAddButton(
    	defaults,
    	"MES_SAVE",
    	saveLink
    )
    // item 3601
    save.style.background = "coral"
    // item 2906
    y = putInUpperPart(y, 287)
    // item 2837
    showDialog(x - 100, y)
    // item 3602
    edit.select()
    edit.focus()
}

function endPan() {
    // item 3248
    if (globals.freeScroll) {
        
    } else {
        // item 3246
        globals.beh.endFreeScroll()
    }
}

function exportPng(canvasElement, zoom) {
    // item 711
    var editor = globals.editor
    var view = globals.view
    // item 712
    var box = editor.measureDiagram();
    var w = Math.floor((box.right - box.left) * zoom)
    var h = Math.floor((box.bottom - box.top) * zoom)
    	
    canvasElement.style.left = "0px";
    canvasElement.style.top = "0px";
    canvasElement.style.display = "inline-block";	
    canvasElement.style.width = w + "px";
    canvasElement.style.height = h + "px";
    // item 714
    canvasElement.width = w;
    canvasElement.height = h;
    
    var ctx = canvasElement.getContext("2d");
    
    var x = 0;
    var y = 0;
    
    ctx.fillStyle = getBackground()
    ctx.fillRect(x, y, w, h);
    
    ctx.scale(zoom, zoom);
    ctx.translate(-box.left, -box.top);
    // item 2887
    var oldZoom = globals.cnv.zoom
    var dx = globals.cnv.dx
    var dy = globals.cnv.dy
    var retina = globals.cnv.retina
    globals.cnv.setTransform(-box.left, -box.top, zoom, 1)
    globals.editor.redraw()
    globals.cnv.draw(ctx)
    globals.cnv.setTransform(dx, dy, oldZoom, retina)
    // item 2907
    globals.editor.redraw()
    globals.view.rebuild()
    // item 2888
    var image = canvasElement.toDataURL("image/png");
    
    return image
}

function exportSvg() {
    // item 855
    var editor = globals.editor
    var view = globals.view
    var canvas = globals.cnv
    // item 856
    var zoom = 1
    
    var box = editor.measureDiagram();
    var w = Math.floor((box.right - box.left) * zoom)
    var h = Math.floor((box.bottom - box.top) * zoom)
    // item 858
    var ctx = new C2S(w, h)
    
    var x = 0;
    var y = 0;
    
    ctx.fillStyle = getBackground()
    ctx.fillRect(x, y, w, h);
    
    ctx.scale(zoom, zoom);
    ctx.translate(-box.left, -box.top);	
    
    canvas.renderToTexture = false
    editor.redraw()
    canvas.draw(ctx)
    canvas.renderToTexture = true
    editor.redraw()
    
    var image = ctx.getSerializedSvg(true)
    
    return image
}

function findFontsToLoad(component, value) {
    // item 3470
    var faces = globals.dialogs.faces
    var faceSet = Utils.listToSet(faces)
    var faces2 = []
    // item 34320001
    var _ind3432 = 0;
    var _col3432 = faces;
    var _len3432 = _col3432.length;
    while (true) {
        // item 34320002
        if (_ind3432 < _len3432) {
            
        } else {
            break;
        }
        // item 34320004
        var face = _col3432[_ind3432];
        // item 3434
        var pf = Utils.parseFontFace(face)
        pf[component] = value
        var face2 = Utils.buildFontFace(
        	pf.italic,
        	pf.bold,
        	pf.family
        )
        // item 3472
        if (face2 in faceSet) {
            
        } else {
            // item 3471
            faces2.push(face2)
        }
        // item 34320003
        _ind3432++;
    }
    // item 3475
    return faces2
}

function findIconGroup(name) {
    // item 1280001
    var _ind128 = 0;
    var _col128 = globals.groups;
    var _len128 = _col128.length;
    while (true) {
        // item 1280002
        if (_ind128 < _len128) {
            
        } else {
            // item 134
            throw Error("Group '" + name +
             "' not found")
        }
        // item 1280004
        var group = _col128[_ind128];
        // item 130
        if (group.name == name) {
            // item 133
            return group
        }
        // item 1280003
        _ind128++;
    }
}

function findSameValues(fonts, result) {
    // item 3527
    var italic = new SameValue("italic")
    var bold = new SameValue("bold")
    var size = new SameValue("size")
    var family = new SameValue("family")
    // item 35240001
    var _ind3524 = 0;
    var _col3524 = fonts;
    var _len3524 = _col3524.length;
    while (true) {
        // item 35240002
        if (_ind3524 < _len3524) {
            
        } else {
            break;
        }
        // item 35240004
        var font = _col3524[_ind3524];
        // item 3526
        var parsed = Utils.parseFontString(font)
        // item 3561
        setSameValue(italic, parsed)
        setSameValue(bold, parsed)
        setSameValue(size, parsed)
        setSameValue(family, parsed)
        // item 35240003
        _ind3524++;
    }
    // item 3563
    getSameValue(italic, result)
    getSameValue(bold, result)
    getSameValue(size, result)
    getSameValue(family, result)
}

function findTrueRoot(div) {
    while (true) {
        // item 2025
        if (div.parentElement == document.body) {
            break;
        }
        // item 2029
        div = div.parentElement
    }
    // item 2028
    return div
}

function finishClearFormat() {
    // item 2356
    var dialogs = globals.dialogs
    // item 2354
    globals.editor.clearFormat(
    	dialogs.ids
    )
    // item 2355
    globals.view.redraw()
    // item 2357
    hideDialog()
}

function finishIconGroups() {
    // item 138
    var tb = globals.toolbar
    tb.innerHTML = ""
    // item 759
    var generic = findIconGroup("dia-main")
    addToolGroup(tb, generic)
    // item 760
    var others = make(tb, "div")
    others.id = "dia-icons"
    // item 3309
    hide(others.id)
    // item 761
    var name = globals.toolName
    // item 786
    addToolCombo(others, name)
    // item 762
    var icons = findIconGroup(name)
    addToolGroup(others, icons)
    // item 2447
    var free = make(tb, "div")
    free.id = "dia-free"
    // item 3310
    hide(free.id)
    // item 2751
    var nameFree = globals.toolNameFree
    // item 2752
    addToolComboFree(free, nameFree)
    // item 2448
    var freeGroup = findIconGroup(nameFree)
    addToolGroup(free, freeGroup)
    // item 3292
    var mind = make(tb, "div")
    mind.id = "dia-mind"
    // item 3311
    hide(mind.id)
    // item 3294
    var nameMind = globals.toolNameMind
    // item 3293
    var mindGroup = findIconGroup(nameMind)
    addToolGroup(mind, mindGroup)
    // item 3617
    var mindGroup2 = findIconGroup("dia-mind2")
    addToolGroup(mind, mindGroup2)
}

function finishSetFont(component, value) {
    // item 3401
    var key = "font-" + component
    // item 2186
    var format = {}
    format[key] = value
    // item 2187
    setFormat(format)
}

function flatLeft(div) {
    // item 1961
    div.style.borderRadius = "0px 5px 5px 0px"
}

function flatRight(div) {
    // item 1962
    div.style.borderRadius = "5px 0px 0px 5px"
}

function followLink(url) {
    // item 2930
    url = url || ""
    url = url.trim()
    // item 2931
    if (url) {
        // item 2927
        if (url.indexOf("://") == -1) {
            // item 2934
            url = "http://" + url
        }
        // item 2886
        window.open(url, '_blank')
    }
}

function fontsToFaces(fonts) {
    // item 3573
    var faceList = fonts.map(Utils.fontToFace)
    var faceSet = Utils.listToSet(faceList)
    // item 3576
    return Object.keys(faceSet)
}

function generateTag() {
    // item 383
    var r = Math.random();
    var number = Math.floor(r * 1000000000);
    return number.toString();
}

function get(id) {
    // item 9
    var element = document.getElementById(id)
    // item 6
    if (element) {
        // item 10
        return element
    } else {
        // item 11
        throw Error("Element '" + id + "' not found")
    }
}

function getBackground() {
    // item 888
    var background = globals.cnv.getBackground()
    background = background || Theme.getBackground()
    // item 887
    return background
}

function getClipboard() {
    // item 601
    return globals.clipboard.getClipboard()
}

function getClipboardType() {
    // item 602
    return globals.clipboard.getClipboardType()
}

function getCurrentFillColor() {
    // item 2348
    var dialogs = globals.dialogs
    // item 2342
    var color = dialogs.fillColor0 || "#ffffff"
    // item 2336
    if (dialogs.fillType == "gradient") {
        // item 2340
        var color1 = makeLighter(color)
        // item 2341
        return "gradient " + color1
         + " " + color
    } else {
        // item 2339
        return color
    }
}

function getDefault(key) {
    // item 13520001
    if (key === "background") {
        // item 1351
        return globals.userBackground
    } else {
        // item 13520002
        if (key === "diaLine") {
            // item 2386
            return globals.userDiaLine
        } else {
            // item 13520003
            if (key === "diaLineThickness") {
                // item 2591
                return globals.userDiaLineThickness
            } else {
                // item 13520004
                if (key === "font") {
                    // item 1362
                    return globals.userFont
                } else {
                    // item 13520005
                    if (key === "shape") {
                        // item 2347
                        return globals.userShape
                    } else {
                        // item 2260
                        return null
                    }
                }
            }
        }
    }
}

function getDefaultFont() {
    // item 3598
    return Utils.buildFontString(
    	false,
    	false,
    	Config.FONT_SIZE,
    	Config.FONT_FAMILY
    )
}

function getDiagram() {
    // item 729
    var content = globals.editor.diagramToJson()
    var obj = JSON.parse(content)
    // item 730
    return obj
}

function getEmptyFont(fontInfo) {
    // item 2247
    var font = globals.editor.getFont()
    // item 2250
    if (font) {
        // item 2253
        var parsed = Utils.parseFontString(
        	font
        )
        // item 2248
        fontInfo.size = parsed.size
        fontInfo.family = parsed.family
        fontInfo.italic = parsed.italic
        fontInfo.bold = parsed.bold
    } else {
        // item 2254
        fontInfo.size = Config.FONT_SIZE_1
        fontInfo.family = Config.FONT_FAMILY_1
        fontInfo.italic = false
        fontInfo.bold = false
    }
}

function getFontFile(italic, bold, family) {
    // item 2170
    var key = makeFontKey(
    	italic,
    	bold,
    	family
    )
    // item 2171
    return fontFiles[key]
}

function getFonts(diagram) {
    // item 2233
    var diagram2 = normalizeDiagram(
    	diagram
    )
    // item 2261
    diagram = diagram2 || diagram
    // item 2217
    var fontList = globals.editor.getFonts(diagram)
    // item 2711
    var userFont = globals.userFont
    // item 2284
    if (userFont) {
        // item 2287
        fontList.push(userFont)
        // item 2710
        var bold = makeBoldFont(userFont)
        fontList.push(bold)
    }
    // item 2234
    var fonts = {}
    // item 22350001
    var _ind2235 = 0;
    var _col2235 = fontList;
    var _len2235 = _col2235.length;
    while (true) {
        // item 22350002
        if (_ind2235 < _len2235) {
            
        } else {
            break;
        }
        // item 22350004
        var font = _col2235[_ind2235];
        // item 2237
        var parsed = Utils.parseFontString(font)
        // item 2240
        var key = parsed.italic.toString()
          + "-" + parsed.bold.toString()
          + "-" + parsed.family
        // item 2242
        parsed.file = getFontFile(
        	parsed.italic,
        	parsed.bold,
        	parsed.family
        )
        // item 2239
        fonts[key] = parsed
        // item 22350003
        _ind2235++;
    }
    // item 2241
    return Utils.objectValues(fonts)
}

function getFontsFromEditor() {
    // item 2708
    var diagram = globals.editor.getDiagramAsItems()
    // item 2709
    return getFonts(diagram)
}

function getImageForDirection(button, direction) {
    // item 3043
    var file
    // item 30320001
    if (direction === "left") {
        // item 3040
        file = "hide-left.png"
    } else {
        // item 30320002
        if (direction === "right") {
            
        } else {
            // item 30320003
            throw "Unexpected switch value: " + direction;
        }
        // item 3613
        if (button.image) {
            // item 3616
            file = button.image
        } else {
            // item 3041
            file = "show-right.png"
        }
    }
    // item 3042
    return imgSrc(file)
}

function getName() {
    // item 723
    return globals.editor.storage.name
}

function getRecentColors() {
    // item 1294
    return globals.userColors.slice(0)
}

function getSameValue(self, dst) {
    // item 3556
    if ((self.value == null) || (self.different)) {
        // item 3565
        dst[self.name] = null
    } else {
        // item 3560
        dst[self.name] = self.value
    }
}

function getTag() {
    // item 660
    return globals.tag
}

function hasChanges() {
    // item 333
    if ((((globals.added.length == 0) && (globals.updated.length == 0)) && (globals.removed.length == 0)) && (!(globals.changes))) {
        // item 341
        return false
    } else {
        // item 332
        return true
    }
}

function hide(id) {
    // item 2471
    show(id, "none")
}

function hideDialog() {
    // item 2915
    HtmlUtils.hidePopup()
    // item 2913
    var dialogs = globals.dialogs
    // item 2912
    dialogs.dialog = null
    // item 2914
    HtmlUtils.hidePopup()
}

function hideDiv(div) {
    // item 59
    div.style.display = "none"
}

function hideLeftButton(index) {
    // item 3165
    globals.leftButts[index].visible = false
}

function hidePopup() {
    // item 1052
    var dialogs = globals.dialogs
    // item 917
    dialogs.popup = null
    // item 2908
    HtmlUtils.hidePopup()
}

function hideRightButton(index) {
    // item 3193
    globals.rightButts[index].visible = false
}

function home() {
    // item 567
    var box = globals.editor.measureDiagram();
    var zoom = globals.view.getZoom();
    var dx = Math.floor((5 + SideSize) / zoom);
    var dy = Math.floor(5 / zoom);
    globals.view.pan(-box.left + dx, -box.top + dy);
}

function imgSrc(image) {
    // item 156
    return globals.imageBase + image
}

function increaseTag(pers, change) {
    // item 840
    var newTag = generateTag()
    // item 838
    change.tag = newTag
    change.oldTag = pers.tag
    // item 839
    pers.tag = newTag
}

function init(cfg) {
    // item 25
    globals.primed = false
    globals.tooltip = cfg.tooltip
    globals.inputBox = cfg.inputBox
    globals.context = cfg.context
    globals.storage = cfg.storage
    globals.translate = cfg.translate
    globals.imageBase = cfg.imageBase
    globals.panic = cfg.panic
    globals.warning = cfg.warning
    globals.status = cfg.status
    globals.saveUserSettings = cfg.saveUserSettings
    globals.clipboard = cfg.clipboard
    globals.loadFont = cfg.loadFont
    globals.findReferences = cfg.findReferences
    // item 17
    globals.root.innerHTML = ""
    globals.root.oncontextmenu = function() { return false }
    // item 18
    var tb = make(globals.root, "div")
    globals.toolbar = tb
    // item 19
    var cnv = make(globals.root, "canvas")
    cnv.oncontextmenu = function() { return false }
    globals.canvas = cnv
    // item 270
    var over = make(globals.root, "canvas")
    over.oncontextmenu = function() { return false }
    globals.over = over
    //over.style.opacity = "0.5"
    //over.style.backgroundColor = "yellow"
    // item 42
    cnv.style.position = "absolute"
    cnv.style.background = "cyan"
    over.style.position = "absolute"
    over.style.display  = "none"
    over.style.pointerEvents = "none"
    // item 458
    var back = make(globals.root, "div")
    globals.back = back
    HtmlUtils.setDivText(
    	back,
    	globals.translate("BUT_EXIT_4WAY_SCROLL")
    )
    back.className = "dlg_button common_button"
    back.style.position = "absolute"
    back.style.left = "5px"
    back.style.top = "5px"
    back.style.display = "none"
    back.onclick = stopFreeScroll
    // item 3208
    var ro = make(globals.root, "div")
    globals.ro = ro
    HtmlUtils.setDivText(
    	ro,
    	globals.translate("MES_READONLY_DOC")
    )
    ro.className = "dlg_button"
    ro.style.position = "absolute"
    ro.style.right = "5px"
    ro.style.top = "5px"
    ro.style.background = "black"
    ro.style.display = "none"
    // item 3650
    ro.onclick = onReadonlyClicked
    // item 43
    tb.className = "toolbar"
    // item 3063
    createLeftButton(
    	onToggleShowToolbar,
    	"left",
    	"#F2F2F2",
    	"show-toobox.png"
    )
    // item 229
    setupEditor()
    // item 900
    setupDialog()
    // item 168
    createIconGroup("dia-main")
    createIconGroup("dia-free")
    createIconGroup("dia-mind")
    createIconGroup("dia-mind2")
    // item 169
    addToIconGroup(
    	"dia-main",
    	[
    		{
    			id: "tt_theme",
    			image: "theme.png",
    			tooltip: "BUT_COLOR_THEME",
    			command: showThemeMenu
    		},
    		{
    			id: "tt_home",
    			image: "home.png",
    			tooltip: "BUT_HOME",
    			command: home
    		}
    	]
    )
    addToIconGroup(
    	"dia-main",
    	[
    		{
    			id: "tt_zoom",
    			image: "zoom.png",
    			tooltip: "BUT_ZOOM",
    			command: showZoomMenu
    		},
    
    		{
    			id: "tt_4way",
    			image: "4-way-pan.png",
    			tooltip: "BUT_4WAY",
    			command: startFreeScroll
    		}
    	]
    )
    // item 197
    createIconGroup("basic")
    createIconGroup("medic")
    createIconGroup("full")
    // item 198
    var params = {
    	id: "tt_parameters",
    	image: "params-1.png",
    	tooltip: "BUT_PARAMETERS",
    	command: function() { addParameters() }
    }
    var comment = {
    	id: "tt_comment",
    	image: "comment.png",
    	tooltip: "BUT_COMMENT",
    	command: function() { showSockets("comment") }
    }
    var question = {
    	id: "tt_question",
    	image: "question.png",
    	tooltip: "BUT_QUESTION",
    	shortcut: "Q",
    	command: function() { showSockets("question") }
    }
    var action = {
    	id: "tt_action",
    	image: "action.png",
    	tooltip: "BUT_ACTION",
    	shortcut: "A",
    	command: function() { showSockets("action") }
    }
    // item 199
    var branch = {
    	id: "tt_branch",
    	image: "branch.png",
    	tooltip: "BUT_BRANCH",
    	shortcut: "B",
    	command: function() { showSockets("branch") }
    }
    var silhouette = {
    	id: "tt_silhouette",
    	image: "silhouette.png",
    	tooltip: "BUT_SILHOUETTE",
    	command: toggleSilhouette
    }
    var tcase = {
    	id: "tt_case",
    	image: "case.png",
    	tooltip: "BUT_CASE",
    	shortcut: "C",
    	command: function() { showSockets("case") }
    }
    var select = {
    	id: "tt_select",
    	image: "select.png",
    	tooltip: "BUT_SELECT",
    	shortcut: "S",
    	command: function() { showSockets("select") }
    }
    // item 206
    var insertion = {
    	id: "tt_insertion",
    	image: "insertion.png",
    	tooltip: "BUT_INSERTION",
    	shortcut: "N",
    	command: function() { showSockets("insertion") }
    }
    var par = {
    	id: "tt_par",
    	image: "par.png",
    	tooltip: "BUT_PAR",
    	command: function() { showSockets("path") }
    }
    var parblock = {
    	id: "tt_parblock",
    	image: "parblock.png",
    	tooltip: "BUT_PARBLOCK",
    	command: function() { showSockets("parallel") }
    }
    var foreach = {
    	id: "tt_foreach",
    	image: "foreach.png",
    	tooltip: "BUT_FOREACH",
    	shortcut: "L",
    	command: function() { showSockets("foreach") }
    }
    // item 207
    var input = {
    	id: "tt_input",
    	image: "input.png",
    	tooltip: "BUT_INPUT",
    	command: function() { showSockets("input") }
    }
    var output = {
    	id: "tt_output",
    	image: "output.png",
    	tooltip: "BUT_OUTPUT",
    	command: function() { showSockets("output") }
    }
    var process = {
    	id: "tt_process",
    	image: "process.png",
    	tooltip: "BUT_PROCESS",
    	command: function() { showSockets("process") }
    }
    var shelf = {
    	id: "tt_shelf",
    	image: "shelf.png",
    	shortcut: "F",
    	tooltip: "BUT_SHELF",
    	command: function() { showSockets("shelf") }
    }
    // item 217
    var sinput = {
    	id: "tt_sinput",
    	image: "sinput.png",
    	tooltip: "BUT_SINPUT",
    	command: function() { showSockets("sinput") }
    }
    var soutput = {
    	id: "tt_soutput",
    	image: "soutput.png",
    	tooltip: "BUT_SOUTPUT",
    	command: function() { showSockets("soutput") }
    }
    var ctrlStart = {
    	id: "tt_ctrl_start",
    	image: "ctrl-start.png",
    	tooltip: "BUT_CTRL_START",
    	command: function() { showSockets("ctrlStart") }
    }
    var ctrlEnd = {
    	id: "tt_ctrl_end",
    	image: "ctrl-end.png",
    	tooltip: "BUT_CTRL_END",
    	command: function() { showSockets("ctrlEnd") }
    }
    // item 218
    var duration = {
    	id: "tt_duration",
    	image: "duration.png",
    	tooltip: "BUT_DURATION",
    	command: function() { showSockets("duration") }
    }
    var pause = {
    	id: "tt_pause",
    	image: "pause.png",
    	tooltip: "BUT_PAUSE",
    	command: function() { showSockets("pause") }
    }
    var timer = {
    	id: "tt_timer",
    	image: "timer.png",
    	tooltip: "BUT_TIMER",
    	command: function() { showSockets("timer") }
    }
    // item 743
    var gdurLeft = {
    	id: "tf_gdur_left",
    	image: "group-duration.png",
    	tooltip: "BUT_GROUP_DURATION_LEFT",
    	command: function(evt) { addFree(evt, "gdur-left") }
    }
    
    var gdurRight = {
    	id: "tf_gdur_right",
    	image: "group-duration-r.png",
    	tooltip: "BUT_GROUP_DURATION_RIGHT",
    	command: function(evt) { addFree(evt, "gdur-right") }
    }
    
    var callout = {
    	id: "callout",
    	image: "callout.png",
    	tooltip: "BUT_CALLOUT",
    	command: function(evt) { addFree(evt, "callout") }
    }
    // item 223
    addToIconGroup("full", [branch, silhouette])
    addToIconGroup("full", [question, action])
    addToIconGroup("full", [tcase, select])
    addToIconGroup("full", [params, foreach])
    addToIconGroup("full", [comment, callout])
    addToIconGroup("full", [par, parblock])
    addToIconGroup("full", [input, output])
    addToIconGroup("full", [sinput, soutput])
    addToIconGroup("full", [process, shelf])
    addToIconGroup("full", [ctrlStart, ctrlEnd])
    addToIconGroup("full", [pause, timer])
    addToIconGroup("full", [duration, insertion])
    addToIconGroup("full", [gdurLeft, gdurRight])
    // item 748
    addToIconGroup("medic", [branch, silhouette])
    addToIconGroup("medic", [question, action])
    addToIconGroup("medic", [tcase, select])
    addToIconGroup("medic", [comment, callout])
    addToIconGroup("medic", [par, parblock])
    addToIconGroup("medic", [ctrlStart, ctrlEnd])
    addToIconGroup("medic", [pause, duration])
    addToIconGroup("medic", [gdurLeft, gdurRight])
    addToIconGroup("medic", [shelf, insertion])
    // item 787
    addToIconGroup("basic", [branch, silhouette])
    addToIconGroup("basic", [question, action])
    addToIconGroup("basic", [tcase, select])
    addToIconGroup("basic", [params, foreach])
    addToIconGroup("basic", [comment, callout])
    addToIconGroup("basic", [insertion])
    // item 2721
    createIconGroup("free-basic")
    createIconGroup("free-ui")
    createIconGroup("free-ar")
    // item 2436
    addFreeButtons()
    addMindButtons()
    // item 190
    finishIconGroups()
}

function inputBox(title, oldText, onSave, x, y) {
    // item 3254
    var pos = diagramToClient(
    	x,
    	y
    )
    // item 617
    var wrapped = function(text) {
    	onSave(text)
    	globals.view.redraw()
    }
    // item 603
    globals.inputBox.show(
    	title,
    	oldText,
    	wrapped,
    	checkInputText,
    	pos.x,
    	pos.y
    )
}

function isDragOn() {
    // item 3585
    if ((globals.editor.dragOn) || (globals.freeScroll)) {
        // item 3214
        return true
    } else {
        // item 3591
        return false
    }
}

function isDrakon() {
    // item 2814
    return globals.type == "drakon"
}

function isGoodLink(link) {
    // item 2876
    return true
}

function isMind() {
    // item 3258
    return globals.type == "mind"
}

function layout() {
    // item 77
    var left = globals.box.left
    var top = globals.box.top
    var width = globals.box.width
    var height = globals.box.height
    // item 78
    if (globals.primed) {
        
    } else {
        // item 81
        globals.primed = true
        // item 82
        globals.showToolbar = (width > 500)
    }
    // item 3207
    updateArrowDirection()
    // item 83
    setAbsRect(
    	globals.root,
    	left,
    	top,
    	width,
    	height
    )
    // item 3119
    layoutSideButtons()
    // item 454
    if (globals.freeScroll) {
        // item 469
        globals.back.style.display = "inline-block"
        // item 471
        hideDiv(globals.toolbar)
        // item 470
        setAbsRect(
        	globals.canvas,
        	0,
        	0,
        	width,
        	height
        )
    } else {
        // item 468
        hideDiv(globals.back)
        // item 87
        if (globals.showToolbar) {
            // item 84
            setAbsRect(
            	globals.toolbar,
            	0,
            	0,
            	tbWidth,
            	height
            )
            // item 86
            setAbsRect(
            	globals.canvas,
            	tbWidth + 1,
            	0,
            	width - tbWidth - 1,
            	height
            )
            // item 279
            setRect(
            	globals.over,
            	tbWidth + 1,
            	0,
            	width - tbWidth - 1,
            	height
            )
        } else {
            // item 92
            hideDiv(globals.toolbar)
            // item 90
            setAbsRect(
            	globals.canvas,
            	0,
            	0,
            	width,
            	height
            )
            // item 280
            setRect(
            	globals.over,
            	0,
            	0,
            	width,
            	height
            )
        }
    }
    // item 2495
    //updateToolbar()
}

function layoutSideButtons() {
    // item 3100
    var left
    // item 3104
    if (globals.freeScroll) {
        // item 30850001
        var _ind3085 = 0;
        var _col3085 = globals.rightButts;
        var _len3085 = _col3085.length;
        while (true) {
            // item 30850002
            if (_ind3085 < _len3085) {
                
            } else {
                break;
            }
            // item 30850004
            var item = _col3085[_ind3085];
            // item 3087
            hideDiv(item.div)
            // item 30850003
            _ind3085++;
        }
        // item 30880001
        var _ind3088 = 0;
        var _col3088 = globals.leftButts;
        var _len3088 = _col3088.length;
        while (true) {
            // item 30880002
            if (_ind3088 < _len3088) {
                
            } else {
                break;
            }
            // item 30880004
            var item = _col3088[_ind3088];
            // item 3090
            hideDiv(item.div)
            // item 30880003
            _ind3088++;
        }
    } else {
        // item 3097
        if (globals.showToolbar) {
            // item 3101
            left = tbWidth
        } else {
            // item 3102
            left = 0
        }
        // item 3116
        var width = globals.box.width
        var right = width - SideSize
        // item 3103
        var top = 0
        // item 30910001
        var _ind3091 = 0;
        var _col3091 = globals.leftButts;
        var _len3091 = _col3091.length;
        while (true) {
            // item 30910002
            if (_ind3091 < _len3091) {
                
            } else {
                break;
            }
            // item 30910004
            var item = _col3091[_ind3091];
            // item 3093
            if (item.visible) {
                // item 3107
                setAbsRect(
                	item.div,
                	left,
                	top,
                	SideSize,
                	SideSize
                )
                // item 3117
                top += SideSize
            } else {
                // item 3096
                hideDiv(item.div)
            }
            // item 30910003
            _ind3091++;
        }
        // item 3114
        top = 0
        // item 31080001
        var _ind3108 = 0;
        var _col3108 = globals.rightButts;
        var _len3108 = _col3108.length;
        while (true) {
            // item 31080002
            if (_ind3108 < _len3108) {
                
            } else {
                break;
            }
            // item 31080004
            var item = _col3108[_ind3108];
            // item 3110
            if (item.visible) {
                // item 3115
                setAbsRect(
                	item.div,
                	right,
                	top,
                	SideSize,
                	SideSize
                )
                // item 3118
                top += SideSize
            } else {
                // item 3113
                hideDiv(item.div)
            }
            // item 31080003
            _ind3108++;
        }
    }
}

function lighten(value) {
    // item 1605
    var incr
    // item 1600
    if (value < 0.4) {
        // item 1603
        incr = 0.5
    } else {
        // item 1604
        incr = 0.3
    }
    // item 1599
    return Math.min(1, value + incr)
}

function loadDiagram(diagram) {
    // item 821
    if (globals.readonly) {
        
    } else {
        // item 819
        globals.readonly = true
        // item 412
        diagram = normalizeDiagram(
        	diagram
        )
        // item 414
        var editor = globals.editor
        var view = globals.view
        // item 430
        reset()
        // item 413
        editor.loadDiagram(diagram);
        editor.autoSizeIcons();
        editor.clearUndo();
        editor.redraw();
        view.rebuild();
        // item 557
        home()
        // item 820
        globals.readonly = false
        // item 815
        var diagram = editor.getDiagramAsItems()
        // item 816
        var change = {
        	editType: "replace",
        	name: diagram.name,
        	items: diagram.items,
        	background: diagram.background || "",
        	diaLine: diagram.diaLine || "",
        	diaLineThickness: diagram.diaLineThickness || "",
        	font: diagram.font || getDefaultFont()
        }
        // item 842
        increaseTag(globals, change)
        // item 818
        globals.storage.saveChanges(change)
    }
}

function loadNextFont(self) {
    // item 3516
    var face = self.faces[self.current]
    // item 3518
    var pf = Utils.parseFontFace(face)
    // item 3514
    var file = getFontFile(
    	pf.italic,
    	pf.bold,
    	pf.family
    )
    // item 3517
    var onLoaded = function() {
    	self.fontLoaded()
    }
    // item 3515
    globals.loadFont(
    	pf.italic,
    	pf.bold,
    	pf.family,
    	file,
    	onLoaded
    )
}

function loadSave(doSave) {
    // item 848
    var onSave = function(){}
    // item 845
    if (doSave) {
        // item 849
        onSave = parseAndLoadDiagram
    }
    // item 397
    var content = globals.editor.diagramToJson()
    var title = globals.translate("MES_DIAGRAM_SOURCE")
    globals.inputBox.show(
    	title,
    	content,
    	onSave,
    	checkSource
    )
}

function make(parent, tag) {
    // item 120
    var element = document.createElement(tag)
    parent.appendChild(element)
    // item 3608
    if (tag == "img") {
        // item 3611
        element.draggable = false
    }
    // item 121
    return element
}

function makeAfter(previous, tag) {
    // item 2035
    var element = document.createElement(tag)
    // item 2037
    var next = previous.nextSibling
    var parent = previous.parentNode
    // item 2041
    parent.insertBefore(element, next)
    // item 2036
    return element
}

function makeBoldFont(fontStr) {
    // item 2717
    var font = Utils.parseFontString(fontStr)
    // item 2719
    return Utils.buildFontString(
    	font.italic,
    	true,
    	font.size,
    	font.family
    )
}

function makeCheck(parent, textId, checked, onChange) {
    // item 2293
    var label = make(parent, "label")
    var check = make(label, "input")
    check.type = "checkbox"
    check.style.marginRight = "5px"
    check.onchange = onChange
    check.checked = checked
    var text = globals.translate(textId)
    var tn = document.createTextNode(text)
    label.appendChild(tn)
    // item 2294
    return label
}

function makeChooseCurrent(onChange) {
    // item 1283
    var result = function() {
    	setColorFromCurrent(onChange)
    }
    // item 1284
    return result
}

function makeChoosePalette(onChange, color) {
    // item 1199
    var result = function() {
    	hidePopup()
    	saveRecentColor(color)
    	onChange(color)
    }
    // item 1200
    return result
}

function makeChooseSimple(onChange, color) {
    // item 1336
    var result = function() {
    	hidePopup()
    	onChange(color)
    }
    // item 1337
    return result
}

function makeColorOnActive(element) {
    // item 1916
    var style = element.style
    // item 1917
    element.onmousemove = function() {
    	style.background = "#E2EDF5"
    }
    // item 1918
    element.onmouseleave = function() {
    	style.background = "#ffffff"
    }
}

function makeErrorMessage(data) {
    // item 362
    var message = Utils.makeErrorMessage(data)
    // item 363
    return globals.translate(message)
}

function makeFamilies(family) {
    // item 2051
    var families = [
    {text: "PT Mono",	value: "PT Mono"},
    {text: "Fira Code",	value: "Fira Code"},
    {text: "Courier (Cousine)",	value: "Cousine"},
    {text: "Times (Tinos)",	value: "Tinos"},
    {text:"Alegreya Sans", value:"Alegreya Sans"},
    {text:"Anonymous Pro", value:"Anonymous Pro"},
    {text:"Cormorant Garamond", value:"Cormorant Garamond"},
    //{text:"Crimson Text", value:"Crimson Text"},
    {text:"Lato", value:"Lato"},
    {text:"Arial (Liberation Sans)", value:"Liberation Sans"},
    {text:"Lora", value:"Lora"},
    {text:"Merriweather", value:"Merriweather"},
    {text:"Noto Sans", value:"Noto Sans"},
    {text:"Open Sans", value:"Open Sans"},
    {text:"PT Sans", value:"PT Sans"},
    {text:"PT Serif", value:"PT Serif"},
    {text:"Raleway", value:"Raleway"},
    {text:"Roboto", value:"Roboto"},
    {text:"Roboto Condensed", value:"Roboto Condensed"},
    {text:"Roboto Mono", value:"Roboto Mono"},
    {text:"Source Code Pro", value:"Source Code Pro"},
    {text:"Source Sans Pro", value:"Source Sans Pro"},
    {text:"Space Mono", value:"Space Mono"},
    //{text:"Titillium Web", value:"Titillium Web"},
    {text:"Ubuntu", value:"Ubuntu"},
    {text:"Ubuntu Mono", value:"Ubuntu Mono"}
    //{text:"Vollkorn", value:"Vollkorn"}
    ]
    // item 21330001
    var _ind2133 = 0;
    var _col2133 = families;
    var _len2133 = _col2133.length;
    while (true) {
        // item 21330002
        if (_ind2133 < _len2133) {
            
        } else {
            break;
        }
        // item 21330004
        var item = _col2133[_ind2133];
        // item 2135
        item.selected = (family == item.value)
        // item 21330003
        _ind2133++;
    }
    // item 2424
    families.sort(function(left, right) {
        return left.text.localeCompare(right.text)
    })
    // item 2052
    return families
}

function makeFontKey(italic, bold, family) {
    // item 2167
    var key = family
      + "-" + italic.toString()
      + "-" + bold.toString()
    // item 2168
    return key
}

function makeItemClick(onItemClick, data) {
    // item 1724
    var result = function() {
    	hidePopup()
    	onItemClick(data)
    }
    // item 1725
    return result
}

function makeLighter(color) {
    // item 1577
    var redStr = color.slice(1, 3)
    var greenStr = color.slice(3, 5)
    var blueStr = color.slice(5, 7)
    // item 1578
    var red = parseHexByte(redStr) / 255.0
    var green = parseHexByte(greenStr) / 255.0
    var blue = parseHexByte(blueStr) / 255.0
    // item 1593
    var incr = 0.4
    // item 1585
    red = Math.floor(lighten(red)* 255)
    green = Math.floor(lighten(green) * 255)
    blue = Math.floor(lighten(blue) * 255)
    // item 1586
    return colorFromRgb(red, green, blue)
}

function makePalette() {
    // item 1193
    var src = [
    "#000000 #ffffff #ffc0cb #ff0000 #008080 #00ffff",
    "#0000ff #eeeeee #ffd700 #ff7373 #40e0d0 #b0e0e6",
    "#FFA849 #005800 #003500 #002300 #000070 #00005C",
    "#00003A #000020 #3BAD4D #215B2A #9EC85C #0094FF",
    "#12279F #521A00 #361C0F #5B5232 #353123 #A69D7C",
    "#ffe4e1 #c0c0c0 #cccccc #d3ffce #7fffd4 #333333",
    "#666666 #f6546a #ffa500 #00ff00 #f0f8ff #003366",
    "#468499 #ffff00 #800080 #f5f5f5 #00ced1 #088da5",
    "#fff68f #fa8072 #e6e6fa #660066 #ffc3a0 #ff6666",
    "#20b2aa #faebd7 #c6e2ff #66cdaa #ffb6c1 #800000",
    "#990000 #f5f5dc #afeeee #81d8d0 #cbbeb5 #f08080",
    "#ccff00 #ff00ff #008000 #808080 #999999 #c39797",
    "#c0d6e4 #00ff7f #0e2f44 #3b5998 #b6fcd5 #66cccc",
    "#ffdab9 #ff4040 #dddddd #8b0000 #b4eeb4 #f7f7f7",
    "#daa520 #31698a #6897bb #191970 #cc0000 #a0db8e",
    "#0099cc #FFE26C #3399ff #ff4444 #8a2be2 #000080",
    "#404040 #191919 #4169e1 #ff7f50 #794044 #6dc066"
    ]
    // item 1208
    var result = []
    // item 12060001
    var _ind1206 = 0;
    var _col1206 = src;
    var _len1206 = _col1206.length;
    while (true) {
        // item 12060002
        if (_ind1206 < _len1206) {
            
        } else {
            break;
        }
        // item 12060004
        var srcRow = _col1206[_ind1206];
        // item 1210
        var colors = srcRow.split(" ")
        result.push(colors)
        // item 12060003
        _ind1206++;
    }
    // item 1209
    return result
}

function makeRowUi(tr, row) {
    // item 1480001
    var _ind148 = 0;
    var _col148 = row;
    var _len148 = _col148.length;
    while (true) {
        // item 1480002
        if (_ind148 < _len148) {
            
        } else {
            break;
        }
        // item 1480004
        var cell = _col148[_ind148];
        // item 150
        var td = make(tr, "td")
        var img = make(td, "img")
        img.id = cell.id
        img.width = 40
        img.height = 40
        // item 157
        img.src = imgSrc(cell.image)
        img.onclick = cell.command
        img.ondragstart = function(evt) { return false; }
        // item 3369
        var ttext = globals.translate(cell.tooltip)
        // item 3370
        if (cell.shortcut) {
            // item 3374
            var key = globals.translate("MES_KEY")
            // item 3373
            ttext += (". " + key + ": " + cell.shortcut)
        }
        // item 158
        globals.tooltip.make(
        	img,
        	ttext
        )
        // item 1480003
        _ind148++;
    }
}

function makeSizes(current) {
    // item 1892
    var result = []
    var i
    // item 18900001
    i = 10;
    while (true) {
        // item 18900002
        if (i <= 20) {
            
        } else {
            break;
        }
        // item 3664
        pushSize(i, current, result)
        // item 18900003
        i++;
    }
    // item 21360001
    i = 22;
    while (true) {
        // item 21360002
        if (i <= 30) {
            
        } else {
            break;
        }
        // item 3665
        pushSize(i, current, result)
        // item 21360003
        i += 2;
    }
    // item 3666
    pushSize(36, current, result)
    // item 3667
    pushSize(48, current, result)
    // item 1893
    return result
}

function normalizeDiagram(data) {
    // item 2224
    if ((data.items) && (!(data.items.length == 0))) {
        // item 2223
        return buildDiagramFromItems(data);
    } else {
        // item 2226
        if (data.nodes) {
            // item 2227
            return data
        } else {
            // item 2231
            return null
        }
    }
}

function onAlign(align) {
    // item 2015
    var dialogs = globals.dialogs
    // item 2208
    showAlign(align)
    // item 2209
    var format = {
    	align: align
    }
    // item 2210
    setFormat(format)
}

function onBoldClicked() {
    // item 1938
    setFont("bold")
}

function onButtonDown(data) {
    // item 1660
    data.down = true
    data.div.style.background = data.active
}

function onButtonLeave(data) {
    // item 1980
    data.down = false
    // item 1977
    if ((data.isToggle) && (data.on)) {
        
    } else {
        // item 1661
        data.div.style.background = data.idle
    }
}

function onButtonMove(data) {
    
}

function onButtonUp(data) {
    // item 1662
    if (data.down) {
        // item 1987
        data.down = false
        // item 1985
        if (data.isToggle) {
            // item 1989
            if (data.on) {
                // item 1991
                data.div.style.background = data.idle
            } else {
                // item 1992
                data.div.style.background = data.active
            }
            // item 1994
            switchButton(data, !data.on)
        } else {
            // item 1665
            data.div.style.background = data.idle
        }
        // item 1666
        data.onClick(data)
    }
}

function onColorHexChanged(evt) {
    // item 1231
    globals.dialogs.currentColor = evt.target.value
    // item 1233
    updateCanApply()
}

function onFamilyChanged(item) {
    // item 2047
    globals.dialogs.family = item.value
    // item 2053
    setFont("family")
}

function onGradChanged(evt) {
    // item 1542
    var dialogs = globals.dialogs
    // item 1537
    if (evt.target.checked) {
        // item 1550
        dialogs.fillType = "gradient"
    } else {
        // item 1540
        dialogs.fillType = "solid"
    }
    // item 1715
    if (dialogs.fillColor0) {
        
    } else {
        // item 1718
        dialogs.fillColor0 = Theme.getIconBack("action")
    }
    // item 1551
    setFillColor(dialogs.fillColor0)
}

function onItalicClicked() {
    // item 1942
    setFont("italic")
}

function onItemSelected(data, item) {
    // item 19060001
    var _ind1906 = 0;
    var _col1906 = data.items;
    var _len1906 = _col1906.length;
    while (true) {
        // item 19060002
        if (_ind1906 < _len1906) {
            
        } else {
            break;
        }
        // item 19060004
        var it = _col1906[_ind1906];
        // item 1909
        it.selected = (it == item)
        // item 19060003
        _ind1906++;
    }
    // item 1910
    setComboText(data)
    // item 1908
    data.onSelected(item)
}

function onReadonlyClicked(evt) {
    // item 3651
    if (globals.onReadonly) {
        // item 3654
        globals.onReadonly(evt)
    }
}

function onShadowChanged(evt) {
    // item 2306
    var dialogs = globals.dialogs
    // item 2313
    dialogs.shadow = evt.target.checked
    // item 2314
    var format = {
    	shadow: dialogs.shadow
    }
    // item 2315
    setFormat(format)
}

function onSizeChanged(item) {
    // item 2084
    globals.dialogs.size = item.value
    // item 2085
    setFont("size")
}

function onToggleShowToolbar() {
    // item 71
    globals.showToolbar = !globals.showToolbar
    // item 3206
    updateArrowDirection()
    // item 72
    layout()
    // item 431
    globals.view.rebuild()
}

function onToolNameChanged(evt) {
    // item 785
    globals.toolName = evt.target.value
    // item 788
    finishIconGroups()
    updateToolbar()
    // item 804
    var payload = {
    	toolbar: globals.toolName
    }
    // item 805
    globals.saveUserSettings(payload)
}

function onToolNameFreeChanged(evt) {
    // item 2747
    globals.toolNameFree = evt.target.value
    // item 2748
    finishIconGroups()
    updateToolbar()
    // item 2749
    var payload = {
    	toolbarFree: globals.toolNameFree
    }
    // item 2750
    globals.saveUserSettings(payload)
}

function pan(dx, dy) {
    // item 2974
    dx *= Config.KEY_SCROLL
    dy *= Config.KEY_SCROLL
    // item 2975
    var zoom = globals.view.getZoom();
    // item 2976
    globals.view.scrollBy(
    	dx / zoom,
    	dy / zoom
    )
}

function panicOnError(data) {
    // item 369
    var message = makeErrorMessage(data)
    // item 370
    globals.panic(message)
}

function parseAndLoadDiagram(source) {
    // item 403
    var diagram = JSON.parse(source);
    loadDiagram(diagram)
}

function parseFormat(format, fonts) {
    // item 1571
    var dialogs = globals.dialogs
    // item 1557
    dialogs.textColor = format.textColor
    dialogs.lineColor = format.lineColor
    dialogs.secondaryColor = format.secondaryColor
    dialogs.allowSecondary = format.allowSecondary
    dialogs.align = format.align
    dialogs.shadow = format.shadow
    // item 2586
    dialogs.lineStyle = format.lineStyle
    dialogs.arrowStart = format.arrowStart
    dialogs.arrowEnd = format.arrowEnd
    // item 1558
    if (format.fillColor) {
        // item 1562
        if (format.fillColor.length == 7) {
            // item 1565
            dialogs.fillType = "solid"
            dialogs.fillColor0 = format.fillColor
            dialogs.fillColor1 = ""
        } else {
            // item 1567
            var parts = format.fillColor.split(" ")
            // item 1568
            if ((parts.length == 3) && (parts[0] == "gradient")) {
                // item 1566
                dialogs.fillType = "gradient"
                dialogs.fillColor0 = parts[2]
                dialogs.fillColor1 = parts[1]
            } else {
                // item 1561
                dialogs.fillType = "solid"
                dialogs.fillColor0 = ""
                dialogs.fillColor1 = ""
            }
        }
    } else {
        // item 1561
        dialogs.fillType = "solid"
        dialogs.fillColor0 = ""
        dialogs.fillColor1 = ""
    }
    // item 1771
    var thickStr = format.lineThickness
    var thickness = parseInt(thickStr)
    // item 1773
    if (isNaN(thickness)) {
        // item 1772
        dialogs.lineThickness = 1
    } else {
        // item 1776
        dialogs.lineThickness = thickness
    }
    // item 3566
    findSameValues(fonts, dialogs)
    // item 3577
    dialogs.faces = fontsToFaces(fonts)
}

function parseHexByte(str) {
    // item 1584
    return parseInt("0x" + str)
}

function paste() {
    // item 2662
    addTrace("ec:paste")
    // item 2419
    var view = globals.view
    var cnv = globals.canvas
    var zoom = view.getZoom()
    // item 2417
    var cbox = cnv.getBoundingClientRect()
    var cx = Math.round((cbox.left + cbox.right)/2)
    var cy = Math.round((cbox.top + cbox.bottom)/2)
    // item 2418
    var dia = view.clientToDiagram(cx, cy)
    // item 2414
    globals.editor.paste(dia.x, dia.y)
    globals.view.redraw()
}

function persist() {
    // item 649
    if (((globals.readonly) || (!(hasChanges()))) || (globals.delay)) {
        
    } else {
        // item 897
        globals.changes = false
        // item 653
        var change = buildChanges(globals)
        // item 651
        globals.storage.saveChanges(change)
        reset();
    }
}

function pushSize(size, current, result) {
    // item 3662
    var item = {
    	text: size + " px",
    	value: size,
    	selected: size == current
    }
    // item 3663
    result.push(item)
}

function putInUpperPart(y, height) {
    // item 2900
    var bottom = y + height
    var overlap = Math.round(bottom - window.innerHeight / 2)
    // item 2901
    if (overlap > 0) {
        // item 2904
        return y - overlap
    } else {
        // item 2905
        return y
    }
}

function redo() {
    // item 631
    if (globals.readonly) {
        
    } else {
        // item 2663
        addTrace("ec:redo")
        // item 440
        globals.editor.performRedo()
        globals.view.redraw()
    }
}

function remove(id) {
    // item 320
    globals.removed.push(String(id))
}

function renameDiagram(diagram, name) {
    // item 2664
    addTrace("ec:renameDiagram", [name])
    // item 696
    var items = new ItemsModule(globals.translate)
    var persistence = new LightPersistence(
    	diagram.name,
    	diagram.background,
    	diagram.diaLine,
    	diagram.diaLineThickness,
    	diagram.tag
    )
    var canvas = new Canvas(window, document)
    var editor = new Editor(
    	canvas,
    	persistence,
    	items,
    	globals.translate
    )
    // item 700
    var d2 = buildDiagramFromItems(
    	diagram
    )
    // item 699
    editor.loadDiagram(d2)
    editor.buildTextBoxes()
    // item 698
    editor.renameDiagram(name)
    // item 697
    return persistence.change
}

function reset() {
    // item 326
    globals.added = []
    globals.removed = []
    globals.updated = []
}

function resetMode() {
    // item 3584
    globals.freeScroll = false
}

function resize(left, top, width, height) {
    // item 2665
    addTrace(
    	"ec:resize",
    	[left, top, width, height]
    )
    // item 96
    globals.box = {
    	left: left,
    	top: top,
    	width: width,
    	height: height
    }
    // item 97
    layout()
    // item 287
    globals.view.rebuild()
}

function saveLink() {
    // item 2856
    var text = HtmlUtils.getValue("link_text")
    // item 2845
    setLink(text)
}

function saveRecentColor(color) {
    // item 1327
    if (color) {
        // item 1295
        var colors = getRecentColors()
        // item 3599
        if (colors.indexOf(color) == -1) {
            // item 1296
            colors.unshift(color)
            while (true) {
                // item 1297
                if (colors.length > 6) {
                    
                } else {
                    break;
                }
                // item 1300
                colors.pop()
            }
            // item 1301
            globals.userColors = colors
            // item 1302
            var settings = {
            	colors: colors
            }
            // item 1303
            globals.saveUserSettings(settings)
        }
    }
}

function saveZoom() {
    // item 539
    var zoom = globals.view.getZoom()
    var payload = {
    	zoom: zoom
    }
    // item 540
    globals.saveUserSettings(payload)
}

function selectAll() {
    // item 2654
    globals.editor.selectAll()
    globals.view.redraw()
}

function setAbsRect(div, left, top, width, height) {
    // item 39
    var style = div.style
    // item 40
    style.position = "absolute"
    style.display = "inline-block"
    // item 41
    setRect(
    	div,
    	left,
    	top,
    	width,
    	height
    )
}

function setArrowEnd(data) {
    // item 2673
    addTrace("ec:setArrowEnd")
    // item 2585
    var arrowEnd = data.value
    // item 2583
    var dialogs = globals.dialogs
    // item 2581
    dialogs.arrowEnd = arrowEnd
    // item 2582
    var format = {
    	arrowEnd: arrowEnd
    }
    // item 2584
    setFormat(format)
}

function setArrowStart(data) {
    // item 2674
    addTrace("ec:setArrowStart")
    // item 2575
    var arrowStart = data.value
    // item 2573
    var dialogs = globals.dialogs
    // item 2571
    dialogs.arrowStart = arrowStart
    // item 2572
    var format = {
    	arrowStart: arrowStart
    }
    // item 2574
    setFormat(format)
}

function setBackStyle(div) {
    // item 989
    var style = div.style
    // item 988
    style.position = "absolute"
    style.left = "0px"
    style.top = "0px"
    style.width = "100%"
    style.height = "100vh"
}

function setBackgroundColor(color) {
    // item 2675
    addTrace("ec:setBackgroundColor")
    // item 1218
    setDivColor(
    	globals.dialogs.backColorButt,
    	color
    )
    // item 3632
    var fields = {
    	background: color
    }
    // item 3633
    globals.editor.setBackground(fields)
    globals.view.redraw()
    // item 1220
    hideDialog()
}

function setColorButColor(div, color) {
    // item 1263
    if (color) {
        // item 1269
        div.style.background = color
        // item 1270
        div.style.cursor = "pointer"
    } else {
        // item 1266
        div.style.backgroundImage = "url('"
         + globals.imageBase + "no-color.png')"
        div.style.backgroundSize = "30px 30px"
        // item 1271
        div.style.cursor = "default"
    }
}

function setColorFromCurrent(onChange) {
    // item 1251
    var color = globals.dialogs.currentColor
    // item 1252
    if (Utils.isColor(color)) {
        // item 1255
        hidePopup()
        saveRecentColor(color)
        onChange(color)
    }
}

function setComboText(control) {
    // item 1867
    control.label.innerHTML = ""
    // item 18610001
    var _ind1861 = 0;
    var _col1861 = control.items;
    var _len1861 = _col1861.length;
    while (true) {
        // item 18610002
        if (_ind1861 < _len1861) {
            
        } else {
            break;
        }
        // item 18610004
        var item = _col1861[_ind1861];
        // item 1863
        if (item.selected) {
            // item 1866
            var tn = document.createTextNode(item.text)
            control.label.appendChild(tn)
        }
        // item 18610003
        _ind1861++;
    }
}

function setDLT(thickness) {
    // item 2676
    addTrace("ec:setDLT")
    // item 3625
    var fields = {
    	diaLineThickness: thickness.value
    }
    // item 2600
    globals.editor.setBackground(fields)
    globals.view.redraw()
}

function setDefaultBackground() {
    // item 1340
    setDefaultBgCore(
    	globals.background,
    	globals.diaLine,
    	globals.diaLineThickness
    )
}

function setDefaultBgCore(color, diaLine, diaLineThickness) {
    // item 1369
    var settings = {
    	background: color,
    	diaLine: diaLine,
    	diaLineThickness: diaLineThickness
    }
    // item 1370
    globals.saveUserSettings(settings)
    // item 1371
    globals.userBackground = color
    globals.userDiaLine = diaLine
    globals.userDiaLineThickness = diaLineThickness
}

function setDefaultFont(color) {
    // item 2281
    var dialogs = globals.dialogs
    // item 2279
    var italic = dialogs.italicButt.on
    var bold = dialogs.boldButt.on
    var size = dialogs.size
    var family = dialogs.family
    // item 2280
    var font = Utils.buildFontString(
    	italic,
    	bold,
    	size,
    	family
    )
    // item 2276
    var settings = {
    	font: font
    }
    // item 2277
    globals.saveUserSettings(settings)
    // item 2278
    globals.userFont = font
    // item 2282
    hideDialog()
}

function setDefaultStyle() {
    // item 2330
    var dialogs = globals.dialogs
    // item 2344
    var shape = {}
    // item 2343
    shape.fillColor = getCurrentFillColor()
    // item 2329
    shape.textColor = dialogs.textColor
    shape.lineColor = dialogs.lineColor
    shape.secondaryColor = dialogs.secondaryColor
    shape.shadow = dialogs.shadow
    shape.lineThickness = dialogs.lineThickness
    shape.lineStyle = dialogs.lineStyle
    // item 2325
    var settings = {
    	shape: shape
    }
    // item 2326
    globals.saveUserSettings(settings)
    // item 2327
    globals.userShape = shape
    // item 2350
    hideDialog()
}

function setDiaLineColor(color) {
    // item 2677
    addTrace("ec:setDiaLineColor", [color])
    // item 2700
    if (color) {
        // item 2381
        setDivColor(
        	globals.dialogs.diaLineColorButt,
        	color
        )
    }
    // item 3626
    var fields = {
    	diaLine: color
    }
    // item 3628
    globals.editor.setBackground(fields)
    globals.view.redraw()
}

function setDiagram(data, resize) {
    // item 597
    addTrace("ec:setDiagram", [resize])
    // item 2607
    hideDialog()
    // item 580
    var editor = globals.editor
    var view = globals.view
    var diagram
    // item 655
    globals.name = data.name
    globals.type = data.type
    globals.background = data.background || ""
    globals.diaLine = data.diaLine || ""
    globals.diaLineThickness = data.diaLineThickness
    globals.tag = data.tag
    // item 3578
    globals.freeScroll = false
    // item 2496
    updateToolbar()
    // item 579
    reset()
    // item 2232
    var diagram = normalizeDiagram(data)
    // item 560
    if (diagram) {
        // item 581
        editor.loadDiagram(diagram)
    } else {
        // item 558
        editor.createDiagram(data.name, data.type)
    }
    // item 574
    if ((resize) && (!(globals.readonly))) {
        // item 577
        autoResize()
    } else {
        // item 666
        editor.buildTextBoxes()
    }
    // item 667
    reset()
    // item 563
    editor.redraw()
    editor.clearUndo()
    view.rebuild()
    // item 2703
    globals.beh.resetMachines()
    // item 2687
    CallTrace.reset()
}

function setDialogPos(x, y) {
    // item 2917
    var dialog = globals.dialogs.dialog
    // item 2910
    HtmlUtils.setPosCorrected(
    	x,
    	y,
    	dialog
    )
    // item 2916
    HtmlUtils.setUpMovable(
    	dialog,
    	30
    )
}

function setDialogStyle(element) {
    // item 1164
    element.style.border = "solid 1px #455A64"
    element.style.boxShadow
     = "0px 0px 5px rgba(0, 0, 0, 0.3)"
    // item 1163
    element.style.width = "280px"
    element.style.position = "absolute"
    element.style.background = "white"
}

function setDivColor(div, color) {
    // item 1489
    div.style.background = color
}

function setFillColor(color) {
    // item 2678
    addTrace("ec:setFillColor", [color])
    // item 1523
    var dialogs = globals.dialogs
    // item 1518
    dialogs.fillColor0 = color
    // item 1519
    setDivColor(
    	dialogs.fillColorButt,
    	color
    )
    // item 1547
    var fillColor = getCurrentFillColor()
    // item 1522
    var format = {
    	fillColor: fillColor
    }
    // item 1546
    setFormat(format)
}

function setFont(component) {
    // item 2059
    var dialogs = globals.dialogs
    // item 2058
    var italic = dialogs.italicButt.on
    var bold = dialogs.boldButt.on
    var size = dialogs.size
    var family = dialogs.family
    // item 2679
    addTrace("ec:setFont", 
     [component, italic, bold, size, family])
    // item 3458
    var value = chooseFontComponent(
    	component,
    	italic,
    	bold,
    	size,
    	family
    )
    // item 3460
    if (component == "size") {
        // item 3459
        finishSetFont(
        	component,
        	value
        )
    } else {
        // item 3476
        var newFaces = findFontsToLoad(
        	component,
        	value
        )
        // item 3477
        if (newFaces.length == 0) {
            // item 3459
            finishSetFont(
            	component,
            	value
            )
        } else {
            // item 3479
            var onLoaded = function() {
            	finishSetFont(
            		component,
            		value
            	)
            }
            // item 2148
            var loader = new ManyFontLoader()
            loader.onLoaded = onLoaded
            // item 3478
            loader.start(newFaces)
        }
    }
}

function setFormat(format) {
    // item 2680
    addTrace("ec:setFormat", [format])
    // item 2180
    var dialogs = globals.dialogs
    // item 2177
    globals.editor.setFormat(
    	dialogs.ids,
    	format
    )
    // item 2179
    globals.view.redraw()
}

function setLeftButtonDirection(index, direction) {
    // item 3612
    var buttInfo = globals.leftButts[index]
    // item 3152
    buttInfo.div.src = getImageForDirection(
    	buttInfo.button,
    	direction
    )
}

function setLine(color, thickness) {
    // item 2681
    addTrace("ec:setLine", [color, thickness])
    // item 1755
    var dialogs = globals.dialogs
    // item 1751
    dialogs.lineColor = color
    dialogs.lineThickness = thickness
    // item 1752
    setDivColor(
    	dialogs.lineColorButt,
    	color
    )
    // item 1759
    var lineColor
    // item 1756
    if (thickness == 1) {
        // item 1760
        lineColor = color
    } else {
        // item 1761
        lineColor = "ct " + color + " "
         + thickness.toString()
    }
    // item 1753
    var format = {
    	lineColor: color
    }
    // item 2181
    setFormat(format)
}

function setLineColor(color) {
    // item 2682
    addTrace("ec:setLineColor", [color])
    // item 1781
    var dialogs = globals.dialogs
    // item 1777
    dialogs.lineColor = color
    // item 1778
    setDivColor(
    	dialogs.lineColorButt,
    	color
    )
    // item 1779
    var format = {
    	lineColor: color
    }
    // item 2185
    setFormat(format)
}

function setLineThickness(thickness) {
    // item 2683
    addTrace("ec:setThickness", [thickness])
    // item 1786
    var dialogs = globals.dialogs
    // item 1782
    dialogs.lineThickness = thickness
    // item 1784
    var format = {
    	lineThickness: thickness
    }
    // item 2182
    setFormat(format)
}

function setLink(link) {
    // item 2877
    var dialogs = globals.dialogs
    // item 2862
    link = link || ""
    link = link.trim()
    // item 2863
    if ((link) && (!(isGoodLink(link)))) {
        // item 2869
        HtmlUtils.setText("link_message", tr("MES_BAD_LINK"))
    } else {
        // item 2870
        dialogs.content.link = link
        // item 2878
        globals.editor.setContent(
        	dialogs.itemId,
        	dialogs.content
        )
        // item 2879
        globals.view.redraw()
    }
}

function setNotNull(src, name, target, tname) {
    // item 1319
    if (name in src) {
        // item 1323
        tname = tname || name
        // item 1322
        target[tname] = src[name]
    }
}

function setPos(element, x, y) {
    // item 1121
    var pos = HtmlUtils.correctPosition(
    	x,
    	y,
    	element
    )
    // item 1122
    var style = element.style
    // item 1123
    style.left = pos.x + "px"
    style.top = pos.y + "px"
    // item 1125
    return pos
}

function setReadonly(readonly, onReadonly) {
    // item 623
    globals.readonly = readonly
    // item 637
    globals.editor.setReadonly(readonly)
    // item 3635
    if (readonly) {
        // item 3638
        globals.onReadonly = onReadonly
    } else {
        // item 3639
        globals.onReadonly = null
    }
}

function setRect(div, left, top, width, height) {
    // item 276
    var style = div.style
    // item 278
    style.left = left + "px"
    style.top = top + "px"
    style.width = width + "px"
    style.height = height + "px"
}

function setSameValue(self, src) {
    // item 3539
    var value = src[self.name]
    // item 3540
    if (value == null) {
        
    } else {
        // item 3543
        if (self.value == null) {
            // item 3546
            self.value = value
        } else {
            // item 3547
            if (self.value == value) {
                
            } else {
                // item 3550
                self.different = true
            }
        }
    }
}

function setSecondaryColor(color) {
    // item 2684
    addTrace("ec:setSecondaryColor", [color])
    // item 1807
    var dialogs = globals.dialogs
    // item 1803
    dialogs.secondaryColor = color
    // item 1804
    setDivColor(
    	dialogs.secondaryColorButt,
    	color
    )
    // item 1812
    var fillColor
    // item 1806
    var format = {
    	secondaryColor: color
    }
    // item 2183
    setFormat(format)
}

function setStyle(data) {
    // item 2522
    var style = data.value
    // item 2685
    addTrace("ec:setStyle", [style])
    // item 2520
    var dialogs = globals.dialogs
    // item 2518
    dialogs.lineStyle = style
    // item 2519
    var format = {
    	lineStyle: style
    }
    // item 2521
    setFormat(format)
}

function setTextColor(color) {
    // item 2686
    addTrace("ec:setTextColor", [color])
    // item 1531
    var dialogs = globals.dialogs
    // item 1500
    dialogs.textColor = color
    // item 1501
    setDivColor(
    	dialogs.textColorButt,
    	color
    )
    // item 1528
    var format = {
    	textColor: color
    }
    // item 2184
    setFormat(format)
}

function setTheme(theme) {
    // item 518
    Theme.current = theme;
    var payload = { theme: theme }
    globals.saveUserSettings(payload)
    	
    globals.editor.redraw();
    globals.view.rebuild();
}

function setThickness(data) {
    // item 1714
    setLineThickness(data.value)
}

function setToolName(name) {
    // item 794
    globals.toolName = name
    // item 795
    finishIconGroups()
}

function setToolNameFree(name) {
    // item 2758
    globals.toolNameFree = name
    // item 2759
    finishIconGroups()
}

function setUserSettings(settings) {
    // item 588
    if (settings.zoom) {
        // item 591
        globals.view.zoomTo(settings.zoom)
    }
    // item 592
    if (settings.theme) {
        // item 595
        Theme.current = settings.theme
    }
    // item 800
    if (settings.toolbar) {
        // item 803
        setToolName(settings.toolbar)
    }
    // item 2760
    if (settings.toolbarFree) {
        // item 2763
        setToolNameFree(settings.toolbarFree)
    }
    // item 2894
    globals.editor.setUserSettings(settings)
    globals.items.setUserSettings(settings)
    // item 3603
    globals.userColors = []
    // item 1307
    setNotNull(
    	settings,
    	"colors",
    	globals,
    	"userColors"
    )
    // item 1324
    setNotNull(
    	settings,
    	"shape",
    	globals,
    	"userShape"
    )
    // item 1325
    setNotNull(
    	settings,
    	"font",
    	globals,
    	"userFont"
    )
    // item 1326
    setNotNull(
    	settings,
    	"background",
    	globals,
    	"userBackground"
    )
    // item 2387
    setNotNull(
    	settings,
    	"diaLine",
    	globals,
    	"userDiaLine"
    )
    // item 2592
    setNotNull(
    	settings,
    	"diaLineThickness",
    	globals,
    	"userDiaLineThickness"
    )
}

function setupDialog() {
    // item 905
    globals.dialogs = {}
    var dialogs = globals.dialogs
}

function setupEditor() {
    // item 228
    var items = new ItemsModule(globals.translate)
    Drakon.setItems(items)
    
    var view = new ViewWidget(
    	window,
    	document,
    	globals.canvas,
    	globals.over,
    	items
    )
    var canvas = new Canvas(window, document)
    var editor = new Editor(
    	canvas,
    	new Persistence(),
    	items,
    	globals.translate,
    	userId
    )
    
    var callbacks = {
    	click: untoggleButtonOnly,
    	onFinishZoom: saveZoom
    }
    
    var behaviour = new Behaviour(
    	editor,
    	canvas,
    	view,
    	callbacks,
    	window,
    	globals.context
    )
    // item 648
    view.setPayload(behaviour)
    
    editor.setCallback("showInputBox", inputBox)
    editor.setCallback("getClipboard", getClipboard)
    editor.setCallback("getClipboardType", getClipboardType)
    editor.setCallback("copyToClipboard", copyToClipboard)
    editor.setCallback("commandDone", commandDone)
    editor.setCallback("showWarningPopup", showWarningPopup)
    editor.setCallback("changeBackground", changeBackground)
    editor.setCallback("changeFormat", changeFormat)
    editor.setCallback("getDefault", getDefault)
    editor.setCallback("editLink", editLink)
    editor.setCallback("followLink", followLink)
    editor.setCallback("changeYesNo", changeYesNo)
    editor.setCallback("showContextMenu", showContextMenu)
    editor.setCallback("findReferences", globals.findReferences)
    // item 286
    globals.editor = editor
    globals.view = view
    globals.beh = behaviour
    globals.cnv = canvas
    globals.items = items
}

function show(id, display) {
    // item 2459
    var element = document.getElementById(id)
    // item 2461
    if (element) {
        // item 2465
        display = display || "block"
        // item 2460
        element.style.display = display
    } else {
        // item 2464
        throw Error("Element '" + id + "' not found")
    }
}

function showAlign(align) {
    // item 2204
    var dialogs = globals.dialogs
    // item 21960001
    if (align === "left") {
        // item 2205
        switchButton(dialogs.alignLeftButt, true)
        switchButton(dialogs.alignRightButt, false)
        switchButton(dialogs.alignCenterButt, false)
    } else {
        // item 21960002
        if (align === "center") {
            // item 2206
            switchButton(dialogs.alignLeftButt, false)
            switchButton(dialogs.alignRightButt, false)
            switchButton(dialogs.alignCenterButt, true)
        } else {
            // item 21960003
            if (align === "right") {
                
            } else {
                // item 21960004
                throw "Unexpected switch value: " + align;
            }
            // item 2207
            switchButton(dialogs.alignLeftButt, false)
            switchButton(dialogs.alignRightButt, true)
            switchButton(dialogs.alignCenterButt, false)
        }
    }
}

function showArrowEndItems(data) {
    // item 2564
    var dialogs = globals.dialogs
    // item 2560
    var style = dialogs.arrowEnd || ""
    // item 2588
    var items = [
      {value:"", image:"cap-solid.png"},
      {value:"arrow", image:"cap-arrow-right.png"},
      {value:"sarrow", image:"cap-sarrow-right.png"},
      {value:"warrow", image:"cap-warrow-right.png"},
      {value:"paw", image:"cap-paw-right.png"}
    ]
    // item 25620001
    var _ind2562 = 0;
    var _col2562 = items;
    var _len2562 = _col2562.length;
    while (true) {
        // item 25620002
        if (_ind2562 < _len2562) {
            
        } else {
            break;
        }
        // item 25620004
        var item = _col2562[_ind2562];
        // item 2565
        item.selected = (item.value == style)
        // item 25620003
        _ind2562++;
    }
    // item 2559
    showDropDown(
    	data.div,
    	"MES_ARROW_HEAD",
    	items,
    	setArrowEnd
    )
}

function showArrowStartItems(data) {
    // item 2552
    var dialogs = globals.dialogs
    // item 2548
    var style = dialogs.arrowStart || ""
    // item 2587
    var items = [
      {value:"", image:"cap-solid.png"},
      {value:"arrow", image:"cap-arrow-left.png"},
      {value:"sarrow", image:"cap-sarrow-left.png"},
      {value:"warrow", image:"cap-warrow-left.png"},
      {value:"paw", image:"cap-paw-left.png"}
    ]
    // item 25500001
    var _ind2550 = 0;
    var _col2550 = items;
    var _len2550 = _col2550.length;
    while (true) {
        // item 25500002
        if (_ind2550 < _len2550) {
            
        } else {
            break;
        }
        // item 25500004
        var item = _col2550[_ind2550];
        // item 2553
        item.selected = (item.value == style)
        // item 25500003
        _ind2550++;
    }
    // item 2547
    showDropDown(
    	data.div,
    	"MES_ARROW_TAIL",
    	items,
    	setArrowStart
    )
}

function showColorPicker(parent, color, titleId, onChange) {
    // item 1272
    globals.dialogs.currentColor = color
    // item 1153
    var i, j
    // item 1106
    var popup = createPopup()
    // item 1136
    var pos = HtmlUtils.rect(parent)
    // item 1137
    popup.innerHTML = ""
    // item 1166
    setDialogStyle(popup)
    // item 1373
    popup.style.boxShadow
     = "0px 0px 15px rgba(0, 0, 0, 0.6)"
    // item 1149
    //addTitle(popup, titleId)
    // item 1150
    var recent = make(popup, "div")
    recent.style.paddingLeft = "5px"
    recent.style.paddingRight = "5px"
    recent.style.marginTop = "5px"
    recent.style.marginBottom = "5px"
    // item 1338
    var recentColors = getRecentColors()
    // item 11510001
    i = 0;
    while (true) {
        // item 11510002
        if (i < 6) {
            
        } else {
            break;
        }
        // item 1339
        var rcolor = recentColors[i]
        // item 1155
        var action = makeChooseSimple(
        	onChange,
        	rcolor
        )
        // item 1154
        addColorButton(recent, rcolor, 1, action)
        // item 11510003
        i++;
    }
    // item 1179
    var pView = make(popup, "div")
    pView.style.height = "260px"
    pView.style.overflowY = "scroll"
    // item 1180
    var palette = make(pView, "div")
    var colorRows = makePalette()
    // item 11850001
    var _ind1185 = 0;
    var _col1185 = colorRows;
    var _len1185 = _col1185.length;
    while (true) {
        // item 11850002
        if (_ind1185 < _len1185) {
            
        } else {
            break;
        }
        // item 11850004
        var crow = _col1185[_ind1185];
        // item 1187
        var row = make(palette, "div")
        row.style.paddingLeft = "5px"
        row.style.paddingRight = "5px"
        // item 11810001
        var _ind1181 = 0;
        var _col1181 = crow;
        var _len1181 = _col1181.length;
        while (true) {
            // item 11810002
            if (_ind1181 < _len1181) {
                
            } else {
                break;
            }
            // item 11810004
            var cell = _col1181[_ind1181];
            // item 1183
            var b = addColorButton(
            	row,
            	cell,
            	1,
            	makeChoosePalette(onChange, cell)
            )
            // item 1188
            b.style.marginBottom = "0px"
            b.style.marginTop = "0px"
            // item 11810003
            _ind1181++;
        }
        // item 11850003
        _ind1185++;
    }
    // item 1173
    var bottom = make(popup, "div")
    // item 1174
    var noop = function() {}
    var selColor = addColorButton(
    	bottom,
    	color,
    	5,
    	noop
    )
    selColor.style.marginRight = "10px"
    selColor.style.verticalAlign = "bottom"
    globals.dialogs.selColor = selColor
    selColor.onclick = makeChooseCurrent(onChange)
    // item 1175
    var input = make(bottom, "input")
    input.type = "text"
    input.value = color
    input.style.border = "solid 1px #455A64"
    input.style.width = "75px"
    input.style.padding = "2px"
    input.oninput = onColorHexChanged
    // item 1178
    var apply = make(bottom, "div")
    apply.className = "panic_button"
    apply.style.display = "inline-block"
    HtmlUtils.setDivText(
    	apply,
    	globals.translate("MES_APPLY")
    )
    apply.onclick = noop
    apply.style.margin = "5px"
    apply.style.fontSize = "90%"
    apply.onclick = makeChooseCurrent(onChange)
    globals.dialogs.apply = apply
    // item 1232
    updateCanApply()
    // item 1138
    showPopup(pos.left - 10, pos.bottom)
}

function showComboDropDown(data) {
    // item 1900
    var onSelected = function(item) {
    	onItemSelected(data, item)
    }
    // item 1876
    showDropDown(
    	data.div,
    	globals.translate(data.title),
    	data.items,
    	onSelected
    )
}

function showContextMenu(x, y, menu) {
    // item 3274
    var menu2 = {
    	rows: menu.map(wrapInRedraw)
    }
    // item 3276
    globals.context(
    	x,
    	y,
    	menu2,
    	null,
    	null
    )
}

function showDialog(x, y) {
    // item 1024
    setDialogPos(x, y)
}

function showDropDown(parent, title, rows, onItemClick) {
    // item 2925
    var popup = createPopup()
    // item 1680
    popup.innerHTML = ""
    // item 1678
    setDialogStyle(popup)
    // item 1679
    popup.style.boxShadow
     = "0px 0px 15px rgba(0, 0, 0, 0.6)"
    // item 1688
    var inner = make(popup, "div")
    inner.style.maxHeight = "250px"
    inner.style.overflowY = "scroll"
    // item 1690
    var table = make(inner, "table")
    table.width = "100%"
    // item 1691
    var headRow = make(table, "tr")
    var header = make(headRow, "td")
    header.colSpan = "2"
    // item 1692
    HtmlUtils.setDivText(
    	header,
    	globals.translate(title)
    )
    // item 1707
    header.style.background = "#f0f0f0"
    header.style.padding = "5px"
    // item 16940001
    var _ind1694 = 0;
    var _col1694 = rows;
    var _len1694 = _col1694.length;
    while (true) {
        // item 16940002
        if (_ind1694 < _len1694) {
            
        } else {
            break;
        }
        // item 16940004
        var row = _col1694[_ind1694];
        // item 1696
        var itemRow = make(table, "tr")
        var selCell = make(itemRow, "td")
        selCell.width = "10"
        var textCell = make(itemRow, "td")
        textCell.width = "100*"
        // item 1708
        textCell.style.cursor = "pointer"
        textCell.onclick = makeItemClick(
        	onItemClick,
        	row
        )
        makeColorOnActive(itemRow)
        // item 2524
        if (row.image) {
            // item 2527
            var rimg = make(textCell, "img")
            rimg.verticalAlign = "middle"
            rimg.src = globals.imageBase + row.image
            rimg.width = 120
            rimg.height = 30
            textCell.style.padding = "0px"
            textCell.style.paddingTop = "2px"
            popup.style.width = "150px"
        } else {
            // item 1697
            HtmlUtils.setDivText(
            	textCell,
            	row.text
            )
            textCell.style.padding = "5px"
        }
        // item 1726
        if (row.selected) {
            // item 1729
            var img = make(selCell, "img")
            img.verticalAlign = "bottom"
            img.src = globals.imageBase + "item-pointer.png"
            img.width = 10
            img.height = 10
        }
        // item 16940003
        _ind1694++;
    }
    // item 1699
    var pos = HtmlUtils.rect(parent)
    // item 1698
    showPopup(pos.left, pos.bottom)
}

function showIBlock(div) {
    // item 1004
    div.style.display = "inline-block"
}

function showLeftButton(index) {
    // item 3158
    globals.leftButts[index].visible = true
}

function showMenuAtElement(element, menu) {
    // item 506
    var box = element.getBoundingClientRect();
    var x = (box.left + box.right) / 2;
    var y = (box.top + box.bottom) / 2;
    
    globals.context(
    	x,
    	y,
    	menu,
    	null
    );
}

function showMindSockets(type) {
    // item 3328
    showSocketsCore("mind-" + type)
}

function showPopup(x, y) {
    // item 1115
    var popup = globals.dialogs.popup
    // item 2926
    HtmlUtils.setPosCorrected(
    	x,
    	y,
    	popup
    )
}

function showRightButton(index) {
    // item 3187
    globals.rightButts[index].visible = true
}

function showSockets(type) {
    // item 3335
    if (isMind()) {
        // item 3352
        var map = {
        	"action": "action",
        	"case": "collection",
        	"raction": "raction",
        	"select": "beginend",
        	"insertion": "insertion",
        	"shelf": "shelf"
        }
        // item 3354
        type = map[type]
        // item 3355
        if (type) {
            // item 3361
            showMindSockets(type)
        }
    } else {
        // item 3339
        if (type == "raction") {
            
        } else {
            // item 3338
            showSocketsCore(type)
        }
    }
}

function showSocketsCore(type) {
    // item 3334
    globals.editor.showInsertionSockets(type)
    globals.view.redraw()
}

function showStyleItems(data) {
    // item 2511
    var dialogs = globals.dialogs
    // item 2505
    var style = dialogs.lineStyle || "solid"
    // item 2506
    var items = [
      {value:"solid", image:"ls-solid.png"},
      {value:"s-1", image:"ls-style-1.png"},
      {value:"s-2", image:"ls-style-2.png"},
      {value:"s-3", image:"ls-style-3.png"},
      {value:"s-4", image:"ls-style-4.png"}
    ]
    // item 25070001
    var _ind2507 = 0;
    var _col2507 = items;
    var _len2507 = _col2507.length;
    while (true) {
        // item 25070002
        if (_ind2507 < _len2507) {
            
        } else {
            break;
        }
        // item 25070004
        var item = _col2507[_ind2507];
        // item 2512
        item.selected = (item.value == style)
        // item 25070003
        _ind2507++;
    }
    // item 2504
    showDropDown(
    	data.div,
    	"MES_STYLE",
    	items,
    	setStyle
    )
}

function showThemeMenu() {
    // item 490
    var rows = []
    var definitions = buildThemeDefinitions()
    // item 4910001
    var _ind491 = 0;
    var _col491 = definitions;
    var _len491 = _col491.length;
    while (true) {
        // item 4910002
        if (_ind491 < _len491) {
            
        } else {
            break;
        }
        // item 4910004
        var def = _col491[_ind491];
        // item 493
        var row = []
        // item 4950001
        var _ind495 = 0;
        var _col495 = def;
        var _len495 = _col495.length;
        while (true) {
            // item 4950002
            if (_ind495 < _len495) {
                
            } else {
                break;
            }
            // item 4950004
            var item = _col495[_ind495];
            // item 497
            row.push(buildThemeMenuItem(item))
            // item 4950003
            _ind495++;
        }
        // item 494
        rows.push(row)
        // item 4910003
        _ind491++;
    }
    // item 498
    var menu = {
    	rows: rows,
    	isGrid: true
    }
    // item 499
    var element = get("tt_theme")
    // item 500
    showMenuAtElement(element, menu)
}

function showThicknessItems(data, start, thickness, action) {
    // item 1745
    var dialogs = globals.dialogs
    // item 1730
    var items = []
    var i
    // item 17310001
    i = start;
    while (true) {
        // item 17310002
        if (i <= 5) {
            
        } else {
            break;
        }
        // item 1733
        var item = {
        	value: i,
        	text: i + " px",
        	selected: (i == thickness)
        }
        // item 1734
        items.push(item)
        // item 17310003
        i++;
    }
    // item 1705
    showDropDown(
    	data.div,
    	"MES_THICKNESS",
    	items,
    	action
    )
}

function showWarningPopup(message) {
    // item 599
    globals.warning(message)
}

function showZoomMenu() {
    // item 521
    var zin = globals.translate("BUT_ZOOM_IN")
    var zout = globals.translate("BUT_ZOOM_OUT")
    // item 179
    var menu = [
    	{ text: zin, code: zoomIn },
    	{ text: zout, code: zoomOut },
    	{ type: "separator" },				
    	{ text: "200%", code: function() { zoomTo(200); } },
    	{ text: "150%", code: function() { zoomTo(150); } },
    	{ type: "separator" },						
    	{ text: "100%", code: function() { zoomTo(100); } },
    	{ type: "separator" },
    	{ text: "90%", code: function() { zoomTo(90); } },
    	{ text: "80%", code: function() { zoomTo(80); } },
    	{ text: "70%", code: function() { zoomTo(70); } },
    	{ text: "50%", code: function() { zoomTo(50); } },
    	{ text: "25%", code: function() { zoomTo(25); } }
    ]
    // item 520
    var zoomButt = get("tt_zoom")
    // item 2911
    var menuObj = {
    	rows: menu
    }
    // item 519
    showMenuAtElement(zoomButt, menuObj)
}

function startEdit() {
    // item 2940
    globals.editor.startEdit()
}

function startFreeScroll() {
    // item 464
    globals.freeScroll = true
    // item 474
    globals.beh.startFreeScroll()
    // item 465
    layout()
    // item 472
    globals.view.rebuild()
}

function startPan() {
    // item 3251
    if (globals.freeScroll) {
        
    } else {
        // item 3247
        globals.beh.startFreeScroll()
    }
}

function stopFreeScroll() {
    // item 466
    globals.freeScroll = false
    // item 475
    globals.beh.endFreeScroll()
    // item 467
    layout()
    // item 473
    globals.view.rebuild()
}

function switchButton(data, on) {
    // item 2000
    if (on) {
        // item 2003
        data.div.style.background = data.active
    } else {
        // item 2002
        data.div.style.background = data.idle
    }
    // item 2005
    data.on = on
}

function toggleSilhouette() {
    // item 2670
    addTrace("ec:toggleSilhouette")
    // item 212
    globals.editor.toggleSilhouette()
    // item 453
    home()
}

function toggleTreeType() {
    // item 3367
    addTrace("ec:toggleTreeType")
    // item 3368
    globals.editor.toggleTreeType()
    // item 3366
    globals.view.redraw()
}

function undo() {
    // item 634
    if (globals.readonly) {
        
    } else {
        // item 2666
        addTrace("ec:undo")
        // item 436
        globals.editor.performUndo()
        globals.view.redraw()
    }
}

function untoggleButtonOnly() {
    
}

function update(item) {
    // item 319
    globals.updated.push(Utils.copyItem(item))
}

function updateArrowDirection() {
    // item 3199
    var direction
    // item 3200
    if (globals.showToolbar) {
        // item 3204
        direction = "left"
    } else {
        // item 3203
        direction = "right"
    }
    // item 3205
    setLeftButtonDirection(0, direction)
}

function updateCanApply() {
    // item 1242
    var color = globals.dialogs.currentColor
    var back
    var cursor
    var show
    // item 1239
    if (Utils.isColor(color)) {
        // item 1238
        back = "#455A64"
        cursor = "pointer"
        show = color
    } else {
        // item 1246
        back = "grey"
        cursor = "default"
        show = ""
    }
    // item 1244
    var button = globals.dialogs.apply
    // item 1245
    button.style.background = back
    button.style.cursor = cursor
    // item 1256
    var selColor = globals.dialogs.selColor
    // item 1268
    setColorButColor(selColor, show)
}

function updateDiagram(fields) {
    // item 321
    updateDiagramCore(globals, fields)
}

function updateDiagramCore(self, fields) {
    // item 1344
    setNotNull(
    	fields,
    	"name",
    	self,
    	null
    )
    // item 1345
    setNotNull(
    	fields,
    	"background",
    	self,
    	null
    )
    // item 2383
    setNotNull(
    	fields,
    	"diaLine",
    	self,
    	null
    )
    // item 2593
    setNotNull(
    	fields,
    	"diaLineThickness",
    	self,
    	null
    )
    // item 1346
    setNotNull(
    	fields,
    	"font",
    	self,
    	null
    )
    // item 898
    globals.changes = true
}

function updateToolbar() {
    var _sw32980000_ = 0;
    // item 2482
    if (globals.readonly) {
        // item 2494
        hide("dia-mind")
        hide("dia-free")
        hide("dia-icons")
        // item 2487
        globals.ro.style.display = "inline-block"
        // item 3640
        if (globals.onReadonly) {
            // item 3643
            globals.ro.className = "panic_button"
            globals.ro.style.background = "coral"
        } else {
            // item 3644
            globals.ro.className = "dlg_button"
            globals.ro.style.background = "black"
        }
    } else {
        // item 32980000
        _sw32980000_ = globals.type;
        // item 32980001
        if (_sw32980000_ === "drakon") {
            // item 2492
            hide("dia-mind")
            hide("dia-free")
            show("dia-icons", "block")
        } else {
            // item 32980002
            if (_sw32980000_ === "mind") {
                // item 3305
                hide("dia-free")
                hide("dia-icons")
                show("dia-mind", "block")
            } else {
                // item 2493
                hide("dia-mind")
                hide("dia-icons")
                show("dia-free", "block")
            }
        }
        // item 2488
        hideDiv(globals.ro)
    }
}

function wrapInRedraw(item) {
    // item 3272
    var code2 = function(x, y) {
    	if (item.text) CallTrace.add("cm:" + item.text)
    	item.code(x, y)
    	globals.view.hideOver()
    	globals.view.redraw()
    }
    // item 3273
    return {
    	text: item.text,
    	image: item.image,
    	code: code2
    }
}

function zoomIn() {
    // item 532
    globals.view.zoomIn()
    // item 533
    saveZoom()
}

function zoomOut() {
    // item 545
    globals.view.zoomOut()
    // item 546
    saveZoom()
}

function zoomTo(percent) {
    // item 527
    globals.view.zoomTo(percent / 100.0)
    // item 541
    saveZoom()
    // item 724
    home()
}

function ManyFontLoader() {
  var _self = this;
  _self.type_name = "ManyFontLoader";
  _self.state = "Normal";
  _self.fontLoaded = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Normal") {
      return ManyFontLoader_Normal_fontLoaded(_self, msg);
    }
    return null;
  };
  _self.start = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Normal") {
      return ManyFontLoader_Normal_start(_self, msg);
    }
    return null;
  };
}


addFontFile(false, false, "PT Mono", "PTM55FT.ttf")
addFontFile(false, true, "PT Mono", "PTM55FT.ttf")
addFontFile(true, false, "PT Mono", "PTM55FT.ttf")
addFontFile(true, true, "PT Mono", "PTM55FT.ttf")

addFontFile(false, false, "Fira Code", "FiraCode-Regular.otf")
addFontFile(false, true, "Fira Code", "FiraCode-Regular.otf")
addFontFile(true, false, "Fira Code", "FiraCode-Regular.otf")
addFontFile(true, true, "Fira Code", "FiraCode-Regular.otf")

addFontFile(false, false, "Liberation Sans", "LiberationSans.ttf")
addFontFile(false, true, "Liberation Sans", "LiberationSans-Bold.ttf")
addFontFile(true, false, "Liberation Sans", "LiberationSans-Italic.ttf")
addFontFile(true, true, "Liberation Sans", "LiberationSans-BoldItalic.ttf")

addFontFile(false, false, "Arimo", "Arimo-Regular.ttf")
addFontFile(false, true, "Arimo", "Arimo-Bold.ttf")
addFontFile(true, false, "Arimo", "Arimo-Italic.ttf")
addFontFile(true, true, "Arimo", "Arimo-BoldItalic.ttf")

addFontFile(false, false, "Cousine", "Cousine-Regular.ttf")
addFontFile(false, true, "Cousine", "Cousine-Bold.ttf")
addFontFile(true, false, "Cousine", "Cousine-Italic.ttf")
addFontFile(true, true, "Cousine", "Cousine-BoldItalic.ttf")

addFontFile(false, false, "Tinos", "Tinos-Regular.ttf")
addFontFile(false, true, "Tinos", "Tinos-Bold.ttf")
addFontFile(true, false, "Tinos", "Tinos-Italic.ttf")
addFontFile(true, true, "Tinos", "Tinos-BoldItalic.ttf")

addFontFile(false, false, "Alegreya Sans", "AlegreyaSans-Regular.ttf")
addFontFile(false, true, "Alegreya Sans", "AlegreyaSans-Bold.ttf")
addFontFile(true, false, "Alegreya Sans", "AlegreyaSans-Italic.ttf")
addFontFile(true, true, "Alegreya Sans", "AlegreyaSans-BoldItalic.ttf")

addFontFile(false, false, "Anonymous Pro", "AnonymousPro-Regular.ttf")
addFontFile(false, true, "Anonymous Pro", "AnonymousPro-Bold.ttf")
addFontFile(true, false, "Anonymous Pro", "AnonymousPro-Italic.ttf")
addFontFile(true, true, "Anonymous Pro", "AnonymousPro-BoldItalic.ttf")

addFontFile(false, false, "Cormorant Garamond", "CormorantGaramond-Regular.ttf")
addFontFile(false, true, "Cormorant Garamond", "CormorantGaramond-Bold.ttf")
addFontFile(true, false, "Cormorant Garamond", "CormorantGaramond-Italic.ttf")
addFontFile(true, true, "Cormorant Garamond", "CormorantGaramond-BoldItalic.ttf")

addFontFile(false, false, "Crimson Text", "CrimsonText-Roman.ttf")
addFontFile(false, true, "Crimson Text", "CrimsonText-Bold.ttf")
addFontFile(true, false, "Crimson Text", "CrimsonText-Italic.ttf")
addFontFile(true, true, "Crimson Text", "CrimsonText-BoldItalic.ttf")

addFontFile(false, false, "Lato", "lato-regular-webfont.ttf")
addFontFile(false, true, "Lato", "lato-bold-webfont.ttf")
addFontFile(true, false, "Lato", "Lato-Italic.ttf")
addFontFile(true, true, "Lato", "Lato-BoldItalic.ttf")

addFontFile(false, false, "Lora", "Lora-Regular.ttf")
addFontFile(false, true, "Lora", "Lora-Bold.ttf")
addFontFile(true, false, "Lora", "Lora-Italic.ttf")
addFontFile(true, true, "Lora", "Lora-BoldItalic.ttf")

addFontFile(false, false, "Merriweather", "Merriweather-Regular.ttf")
addFontFile(false, true, "Merriweather", "Merriweather-Bold.ttf")
addFontFile(true, false, "Merriweather", "Merriweather-Italic.ttf")
addFontFile(true, true, "Merriweather", "Merriweather-BoldItalic.ttf")

addFontFile(false, false, "Noto Sans", "NotoSans-Regular.ttf")
addFontFile(false, true, "Noto Sans", "NotoSans-Bold.ttf")
addFontFile(true, false, "Noto Sans", "NotoSans-Italic.ttf")
addFontFile(true, true, "Noto Sans", "NotoSans-BoldItalic.ttf")

addFontFile(false, false, "Open Sans", "OpenSans-Regular.ttf")
addFontFile(false, true, "Open Sans", "OpenSans-Bold.ttf")
addFontFile(true, false, "Open Sans", "OpenSans-Italic.ttf")
addFontFile(true, true, "Open Sans", "OpenSans-BoldItalic.ttf")

addFontFile(false, false, "PT Sans", "PT_Sans-Web-Regular.ttf")
addFontFile(false, true, "PT Sans", "PT_Sans-Web-Bold.ttf")
addFontFile(true, false, "PT Sans", "PT_Sans-Web-Italic.ttf")
addFontFile(true, true, "PT Sans", "PT_Sans-Web-BoldItalic.ttf")

addFontFile(false, false, "PT Serif", "PT_Serif-Web-Regular.ttf")
addFontFile(false, true, "PT Serif", "PT_Serif-Web-Bold.ttf")
addFontFile(true, false, "PT Serif", "PT_Serif-Web-Italic.ttf")
addFontFile(true, true, "PT Serif", "PT_Serif-Web-BoldItalic.ttf")

addFontFile(false, false, "Raleway", "Raleway-Regular.ttf")
addFontFile(false, true, "Raleway", "Raleway-Bold.ttf")
addFontFile(true, false, "Raleway", "Raleway-Italic.ttf")
addFontFile(true, true, "Raleway", "Raleway-BoldItalic.ttf")

addFontFile(false, false, "Roboto", "Roboto-Regular.ttf")
addFontFile(false, true, "Roboto", "Roboto-Bold.ttf")
addFontFile(true, false, "Roboto", "Roboto-Italic.ttf")
addFontFile(true, true, "Roboto", "Roboto-BoldItalic.ttf")

addFontFile(false, false, "Roboto Condensed", "RobotoCondensed-Regular.ttf")
addFontFile(false, true, "Roboto Condensed", "RobotoCondensed-Bold.ttf")
addFontFile(true, false, "Roboto Condensed", "RobotoCondensed-Italic.ttf")
addFontFile(true, true, "Roboto Condensed", "RobotoCondensed-BoldItalic.ttf")

addFontFile(false, false, "Roboto Mono", "RobotoMono-Regular.ttf")
addFontFile(false, true, "Roboto Mono", "RobotoMono-Bold.ttf")
addFontFile(true, false, "Roboto Mono", "RobotoMono-Italic.ttf")
addFontFile(true, true, "Roboto Mono", "RobotoMono-BoldItalic.ttf")

addFontFile(false, false, "Source Code Pro", "SourceCodePro-Regular.ttf")
addFontFile(false, true, "Source Code Pro", "SourceCodePro-Bold.ttf")
addFontFile(true, false, "Source Code Pro", "SourceCodePro-Regular.ttf")
addFontFile(true, true, "Source Code Pro", "SourceCodePro-Regular.ttf")

addFontFile(false, false, "Source Sans Pro", "SourceSansPro-Regular.ttf")
addFontFile(false, true, "Source Sans Pro", "SourceSansPro-Bold.ttf")
addFontFile(true, false, "Source Sans Pro", "SourceSansPro-Italic.ttf")
addFontFile(true, true, "Source Sans Pro", "SourceSansPro-BoldItalic.ttf")

addFontFile(false, false, "Space Mono", "SpaceMono-Regular.ttf")
addFontFile(false, true, "Space Mono", "SpaceMono-Bold.ttf")
addFontFile(true, false, "Space Mono", "SpaceMono-Italic.ttf")
addFontFile(true, true, "Space Mono", "SpaceMono-BoldItalic.ttf")

addFontFile(false, false, "Titillium Web", "TitilliumWeb-Regular.ttf")
addFontFile(false, true, "Titillium Web", "TitilliumWeb-Bold.ttf")
addFontFile(true, false, "Titillium Web", "TitilliumWeb-Italic.ttf")
addFontFile(true, true, "Titillium Web", "TitilliumWeb-BoldItalic.ttf")

addFontFile(false, false, "Ubuntu", "Ubuntu-Regular.ttf")
addFontFile(false, true, "Ubuntu", "Ubuntu-Bold.ttf")
addFontFile(true, false, "Ubuntu", "Ubuntu-Italic.ttf")
addFontFile(true, true, "Ubuntu", "Ubuntu-BoldItalic.ttf")

addFontFile(false, false, "Ubuntu Mono", "UbuntuMono-Regular.ttf")
addFontFile(false, true, "Ubuntu Mono", "UbuntuMono-Bold.ttf")
addFontFile(true, false, "Ubuntu Mono", "UbuntuMono-Italic.ttf")
addFontFile(true, true, "Ubuntu Mono", "UbuntuMono-BoldItalic.ttf")

addFontFile(false, false, "Vollkorn", "Vollkorn-Regular.ttf")
addFontFile(false, true, "Vollkorn", "Vollkorn-Bold.ttf")
addFontFile(true, false, "Vollkorn", "Vollkorn-Regular.ttf")
addFontFile(true, true, "Vollkorn", "Vollkorn-Regular.ttf")


globals.root = get(elementId)

this.resize = resize
this.init = init
this.loadSave = loadSave
this.undo = undo
this.redo = redo
this.setDiagram = setDiagram
this.setUserSettings = setUserSettings
this.home = home
this.setReadonly = setReadonly
this.getTag = getTag
this.renameDiagram = renameDiagram
this.getName = getName
this.deleteSelection = deleteSelection
this.exportPng = exportPng
this.exportSvg = exportSvg
this.getDiagram = getDiagram
this.setToolName = setToolName
this.getFonts = getFonts
this.showSockets = showSockets
this.copy = copy
this.cut = cut
this.paste = paste
this.hideDialog = hideDialog
this.selectAll = selectAll
this.getFontsFromEditor = getFontsFromEditor
this.isDrakon = isDrakon
this.startEdit = startEdit
this.arrowUp = arrowUp
this.arrowDown = arrowDown
this.arrowLeft = arrowLeft
this.arrowRight = arrowRight

this.createLeftButton = createLeftButton
this.showLeftButton = showLeftButton
this.hideLeftButton = hideLeftButton

this.createRightButton = createRightButton
this.showRightButton = showRightButton
this.hideRightButton = hideRightButton

this.isDragOn = isDragOn
this.centerItem = centerItem
this.startPan = startPan
this.endPan = endPan
this.resetMode = resetMode

this.startFreeScroll = startFreeScroll

}
