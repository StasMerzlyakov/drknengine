function PhysicalGraph(items, graph, render, expands) {

var Items = items;


// Autogenerated with DRAKON Editor 1.32


function DirectionProps(name, x, y, left, top, right, bottom) {
    // item 703
    this.name = name;
    this.x = x;
    this.y = y
    this.left = left;
    this.top = top;
    this.right = right;
    this.bottom = bottom;
}

function PhysicalItem(id, isLine, isVertical, x, y, head, tail, goThrough, box) {
    // item 697
    this.id = id;
    this.isLine = isLine;
    this.isVertical = isVertical;
    this.x = x;
    this.y = y;
    this.head = head;
    this.tail = tail;
    this.goThrough = goThrough;
    this.box = box;
}

function StackItem(box, sweep, delta, excluded, parent, itemId) {
    // item 1474
    this.after = false;
    this.box = box;
    this.sweep = sweep;
    this.delta = delta;
    this.excluded = excluded;
    this.parent = parent;
    this.itemId = itemId;
}

function StackItemAfter(itemId, delta) {
    // item 1560
    this.after = true;
    this.delta = delta;
    this.itemId = itemId;
}

function addActiveLeftFromOne(graph, id, visited) {
    // item 1078
    var vertical = traverseVertical(
    	graph,
    	id
    );
    // item 10790001
    var _ind1079 = 0;
    var _col1079 = vertical;
    var _keys1079 = Object.keys(_col1079); 
    var _len1079 = _keys1079.length;
    while (true) {
        // item 10790002
        if (_ind1079 < _len1079) {
            
        } else {
            break;
        }
        // item 10790004
        var id2 = _keys1079[_ind1079]; var dummy = _col1079[id2];
        // item 1081
        visited[id2] = true;
        // item 1082
        findActiveLeftFrom(
        	graph,
        	id2,
        	visited
        );
        // item 10790003
        _ind1079++;
    }
}

function addRightNodes(graph, node, result) {
    // item 1088
    if (node.right) {
        // item 1091
        var rightId = graph.getNodeRight(node);
        var right = graph.getNode(rightId);
        // item 1092
        result.push(rightId);
        // item 1093
        addRightNodes(graph, right, result);
    }
}

function alongLine(item, props) {
    // item 839
    if (item.isLine) {
        // item 843
        if (item.isVertical) {
            // item 845
            if (props.name === "vertical") {
                // item 847
                return true;
            } else {
                // item 848
                return false;
            }
        } else {
            // item 849
            if (props.name === "vertical") {
                // item 851
                return false;
            } else {
                // item 852
                return true;
            }
        }
    } else {
        // item 842
        return false;
    }
}

function build(pgraph, graph) {
    // item 17350001
    var _ind1735 = 0;
    var _col1735 = graph.nodes;
    var _keys1735 = Object.keys(_col1735); 
    var _len1735 = _keys1735.length;
    while (true) {
        // item 17350002
        if (_ind1735 < _len1735) {
            
        } else {
            break;
        }
        // item 17350004
        var id = _keys1735[_ind1735]; var node = _col1735[id];
        // item 1808
        var node2 = Utils.copyObject(node);
        // item 1737
        pgraph.insertPhysicalItem(
        	node2
        );
        // item 17350003
        _ind1735++;
    }
    // item 17380001
    var _ind1738 = 0;
    var _col1738 = graph.edges;
    var _keys1738 = Object.keys(_col1738); 
    var _len1738 = _keys1738.length;
    while (true) {
        // item 17380002
        if (_ind1738 < _len1738) {
            
        } else {
            break;
        }
        // item 17380004
        var id = _keys1738[_ind1738]; var edge = _col1738[id];
        // item 1809
        var edge2 = Utils.copyObject(edge);
        // item 1740
        pgraph.insertPhysicalItem(
        	edge2
        );
        // item 17380003
        _ind1738++;
    }
    // item 1741
    pgraph.rebuildCache();
}

function changeSize(nodeId, w, h) {
    // item 1794
    var item = this.graph.getNode(nodeId);
    item.w = w;
    item.h = h;
    // item 1803
    updateBox(item);
    // item 1804
    updateTouchBox(item);
}

function deletePhysicalItem(id) {
    // item 98
    this.graph.removeItem(id);
}

function filterNodes(graph, movedItems, movedNodes) {
    // item 13950001
    var _ind1395 = 0;
    var _col1395 = movedItems;
    var _keys1395 = Object.keys(_col1395); 
    var _len1395 = _keys1395.length;
    while (true) {
        // item 13950002
        if (_ind1395 < _len1395) {
            
        } else {
            break;
        }
        // item 13950004
        var itemId = _keys1395[_ind1395]; var dummy = _col1395[itemId];
        // item 1400
        var item = graph.getItem(itemId);
        // item 1401
        if (item.isLine) {
            
        } else {
            // item 1399
            movedNodes[itemId] = true;
        }
        // item 13950003
        _ind1395++;
    }
}

function findActiveDown(graph, active) {
    // item 999
    var copy = Utils.copyObject(active);
    // item 10010001
    var _ind1001 = 0;
    var _col1001 = copy;
    var _keys1001 = Object.keys(_col1001); 
    var _len1001 = _keys1001.length;
    while (true) {
        // item 10010002
        if (_ind1001 < _len1001) {
            
        } else {
            break;
        }
        // item 10010004
        var id = _keys1001[_ind1001]; var dummy = _col1001[id];
        // item 1003
        var item = graph.getItem(id);
        // item 1004
        if (item.type == "junction") {
            // item 1010
            var cat = describeJunction(item);
            // item 1007
            if (cat == "cross") {
                // item 1011
                var upId = graph.getNodeUp(item);
                // item 1012
                var horizontal = traverseHorizontal(
                	graph,
                	upId
                );
                // item 1013
                Utils.mergeSets(copy, horizontal);
                break;
            }
        }
        // item 10010003
        _ind1001++;
    }
    // item 1000
    return copy;
}

function findActiveLeft(graph, active) {
    // item 969
    var copy = Utils.copyObject(active);
    // item 9710001
    var _ind971 = 0;
    var _col971 = copy;
    var _keys971 = Object.keys(_col971); 
    var _len971 = _keys971.length;
    while (true) {
        // item 9710002
        if (_ind971 < _len971) {
            
        } else {
            break;
        }
        // item 9710004
        var id = _keys971[_ind971]; var dummy = _col971[id];
        // item 973
        findActiveLeftFrom(
        	graph,
        	id,
        	copy
        );
        // item 9710003
        _ind971++;
    }
    // item 970
    return copy;
}

function findActiveLeftFrom(graph, id, visited) {
    // item 1039
    var next;
    var node = graph.getItem(id);
    // item 1054
    if ((node.isLine) || (!(node.right))) {
        
    } else {
        // item 1042
        var rightId = graph.getNodeRight(node);
        // item 1043
        if (rightId in visited) {
            
        } else {
            // item 1063
            var right = graph.getNode(rightId);
            // item 1044
            if ((node.type == "question") && (!(describeJunction(right) == "left-t"))) {
                // item 1058
                next = [ rightId ];
                // item 10520001
                var _ind1052 = 0;
                var _col1052 = next;
                var _len1052 = _col1052.length;
                while (true) {
                    // item 10520002
                    if (_ind1052 < _len1052) {
                        
                    } else {
                        break;
                    }
                    // item 10520004
                    var id2 = _col1052[_ind1052];
                    // item 1059
                    addActiveLeftFromOne(
                    	graph,
                    	id2,
                    	visited
                    );
                    // item 10520003
                    _ind1052++;
                }
            } else {
                // item 1048
                var edge = graph.getEdge(node.right);
                // item 1046
                if ((edge.role == "arrow") || (right.role == "params")) {
                    // item 1058
                    next = [ rightId ];
                    // item 10520001
                    var _ind1052 = 0;
                    var _col1052 = next;
                    var _len1052 = _col1052.length;
                    while (true) {
                        // item 10520002
                        if (_ind1052 < _len1052) {
                            
                        } else {
                            break;
                        }
                        // item 10520004
                        var id2 = _col1052[_ind1052];
                        // item 1059
                        addActiveLeftFromOne(
                        	graph,
                        	id2,
                        	visited
                        );
                        // item 10520003
                        _ind1052++;
                    }
                } else {
                    // item 1055
                    if ((node.down) && (node.up)) {
                        // item 1056
                        var downId = graph.getNodeDown(node);
                        var down = graph.getNode(downId);
                        // item 1050
                        if (down.type == "case") {
                            // item 1061
                            next = [];
                            addRightNodes(graph, node, next);
                            // item 10520001
                            var _ind1052 = 0;
                            var _col1052 = next;
                            var _len1052 = _col1052.length;
                            while (true) {
                                // item 10520002
                                if (_ind1052 < _len1052) {
                                    
                                } else {
                                    break;
                                }
                                // item 10520004
                                var id2 = _col1052[_ind1052];
                                // item 1059
                                addActiveLeftFromOne(
                                	graph,
                                	id2,
                                	visited
                                );
                                // item 10520003
                                _ind1052++;
                            }
                        }
                    }
                }
            }
        }
    }
}

function findActiveRight(graph, active) {
    // item 979
    var copy = Utils.copyObject(active);
    // item 9810001
    var _ind981 = 0;
    var _col981 = copy;
    var _keys981 = Object.keys(_col981); 
    var _len981 = _keys981.length;
    while (true) {
        // item 9810002
        if (_ind981 < _len981) {
            
        } else {
            break;
        }
        // item 9810004
        var id = _keys981[_ind981]; var dummy = _col981[id];
        // item 983
        var item = graph.getItem(id);
        // item 984
        if (item.type == "junction") {
            // item 990
            var cat = describeJunction(item);
            // item 987
            if (cat == "cross") {
                // item 991
                var leftId = graph.getNodeLeft(item);
                // item 992
                var vertical = traverseVertical(
                	graph,
                	leftId
                );
                // item 993
                Utils.mergeSets(copy, vertical);
                break;
            }
        }
        // item 9810003
        _ind981++;
    }
    // item 980
    return copy;
}

function findOffset(old, sweep, box, props, delta) {
    // item 1573
    var left = props.left;
    var top = props.top;
    var right = props.right;
    var bottom = props.bottom;
    // item 868
    var offset;
    // item 866
    var sTop = sweep[top];
    var bBottom = box[bottom];
    // item 864
    if (sTop >= bBottom) {
        // item 869
        offset = 0;
    } else {
        // item 870
        var bTop = box[top];
        var sBottom = sweep[bottom];
        // item 871
        if (bTop >= sBottom) {
            // item 869
            offset = 0;
        } else {
            // item 877
            var bRight = box[right];
            var sLeft = sweep[left];
            // item 876
            var sRight = sweep[right];
            var bLeft = box[left];
            // item 883
            if (delta > 0) {
                // item 878
                if ((sRight <= bLeft) || (sLeft >= bLeft)) {
                    // item 880
                    offset = 0;
                } else {
                    // item 1671
                    var oRight = old[right];
                    // item 1672
                    if (oRight > bLeft) {
                        // item 880
                        offset = 0;
                    } else {
                        // item 882
                        offset = sRight - bLeft;
                    }
                }
            } else {
                // item 885
                if ((sLeft >= bRight) || (sRight <= bRight)) {
                    // item 887
                    offset = 0;
                } else {
                    // item 1673
                    var oLeft = old[left];
                    // item 1674
                    if (oLeft < bRight) {
                        // item 887
                        offset = 0;
                    } else {
                        // item 889
                        offset = sLeft - bRight;
                    }
                }
            }
        }
    }
    // item 872
    return offset;
}

function findPhysicalItem(x, y) {
    // item 37
    var foundId = null;
    // item 320001
    var _ind32 = 0;
    var _col32 = this.graph.nodes;
    var _keys32 = Object.keys(_col32); 
    var _len32 = _keys32.length;
    while (true) {
        // item 320002
        if (_ind32 < _len32) {
            
        } else {
            // item 400001
            var _ind40 = 0;
            var _col40 = this.graph.edges;
            var _keys40 = Object.keys(_col40); 
            var _len40 = _keys40.length;
            while (true) {
                // item 400002
                if (_ind40 < _len40) {
                    
                } else {
                    break;
                }
                // item 400004
                var id = _keys40[_ind40]; var item = _col40[id];
                // item 42
                if (Utils.hitBox(item.touchBox, x, y)) {
                    // item 44
                    foundId = id;
                    break;
                }
                // item 400003
                _ind40++;
            }
            break;
        }
        // item 320004
        var id = _keys32[_ind32]; var item = _col32[id];
        // item 34
        if (Utils.hitBox(item.touchBox, x, y)) {
            // item 39
            foundId = id;
            break;
        }
        // item 320003
        _ind32++;
    }
    // item 36
    return foundId;
}

function getActiveHor(pgraph, dx) {
    // item 1662
    if (dx > 0) {
        // item 1661
        return pgraph.activeRight;
    } else {
        // item 1660
        return pgraph.activeLeft;
    }
}

function getActiveVer(pgraph, dy) {
    // item 1667
    if (dy > 0) {
        // item 1666
        return pgraph.activeDown;
    } else {
        // item 1665
        return pgraph.activeUp;
    }
}

function getAdjacentEdges(graph, items) {
    // item 900
    var result = {};
    // item 9020001
    var _ind902 = 0;
    var _col902 = items;
    var _keys902 = Object.keys(_col902); 
    var _len902 = _keys902.length;
    while (true) {
        // item 9020002
        if (_ind902 < _len902) {
            
        } else {
            break;
        }
        // item 9020004
        var itemId = _keys902[_ind902]; var dummy = _col902[itemId];
        // item 904
        var item = graph.getItem(itemId);
        // item 1407
        if (item.isLine) {
            
        } else {
            // item 899
            Utils.addNotNilToSet(result, item.left);
            Utils.addNotNilToSet(result, item.right);
            Utils.addNotNilToSet(result, item.up);
            Utils.addNotNilToSet(result, item.down);
        }
        // item 9020003
        _ind902++;
    }
    // item 901
    return result;
}

function getChangedCoords(movedNodes) {
    // item 1748
    var nodes = [];
    // item 17490001
    var _ind1749 = 0;
    var _col1749 = movedNodes;
    var _keys1749 = Object.keys(_col1749); 
    var _len1749 = _keys1749.length;
    while (true) {
        // item 17490002
        if (_ind1749 < _len1749) {
            
        } else {
            break;
        }
        // item 17490004
        var nodeId = _keys1749[_ind1749]; var dummy = _col1749[nodeId];
        // item 1751
        var node = graph.getNode(nodeId);
        nodes.push({
        	id: node.id,
        	x: node.x,
        	y: node.y
        });
        // item 17490003
        _ind1749++;
    }
    // item 1752
    return nodes;
}

function getSkewer(pgraph, itemId, direction) {
    // item 1154
    var team;
    var teams = pgraph.teams;
    // item 910
    if (direction === "horizontal") {
        // item 1163
        team = teams.left;
    } else {
        // item 1161
        team = teams.up;
    }
    // item 1165
    return team.get(itemId);
}

function getSkewerNoTeam(pgraph, itemId, direction) {
    // item 1764
    var skewer;
    // item 1761
    if (direction === "horizontal") {
        // item 1768
        skewer = pgraph.graph.getVertical(itemId);
    } else {
        // item 1769
        skewer = pgraph.graph.getHorizontal(itemId);
    }
    // item 1767
    return new Utils.Set(skewer);
}

function getTeam(id, direction) {
    // item 1693
    return getSkewer(
    	this,
    	id,
    	direction
    );
}

function halfDrag(pgraph, skewer, delta, direction) {
    // item 1570
    var props = makeDirectionProps(
    	direction
    );
    // item 1351
    var movedItems = {};
    var graph = pgraph.graph;
    // item 1643
    moveSkewer(
    	pgraph,
    	skewer,
    	delta,
    	props,
    	movedItems,
    	null
    );
    // item 1352
    var affectedEdges = updateEdgeBoxes(
    	graph,
    	movedItems
    );
    // item 1357
    return {
    	items: movedItems,
    	edges: affectedEdges
    };
}

function insertPhysicalEdge(id, headId, tailId, isVertical, role) {
    // item 16
    var item = new PhysicalItem(
    	id,
    	true,
    	isVertical,
    	null, null,
    	headId, tailId,
    	false
    );
    item.role = role;
    // item 17
    this.graph.addItem(item);
    // item 15
    updateEdgeBox(this.graph, item);
}

function insertPhysicalItem(item) {
    // item 128
    if (item.isLine) {
        // item 132
        this.insertPhysicalEdge(
        	item.id,
        	item.head,
        	item.tail,
        	item.isVertical,
        	item.role
        );
    } else {
        // item 1802
        updateBox(item);
        // item 131
        this.insertPhysicalNode(item);
    }
}

function insertPhysicalNode(item) {
    // item 8
    var goThrough = (item.type === "junction");
    // item 6
    var copy = Utils.copyObject(item);
    copy.goThrough = goThrough;
    // item 7
    updateTouchBox(copy);
    // item 9
    this.graph.addItem(copy);
}

function makeDirectionProps(direction) {
    // item 798
    var props = {};
    // item 794
    if (direction === "horizontal") {
        // item 797
        props = new DirectionProps(
        	direction,
        	"x",
        	"y",
        	"left",
        	"top",
        	"right",
        	"bottom"
        );
    } else {
        // item 800
        props = new DirectionProps(
        	direction,
        	"y",
        	"x",
        	"top",
        	"left",
        	"bottom",
        	"right"
        );
    }
    // item 799
    return props;
}

function makeSweep(oldBox, delta, props) {
    // item 827
    var box = Utils.copyBox(oldBox);
    // item 828
    if (delta > 0) {
        // item 1571
        var right = props.right;
        // item 831
        box[right] = box[right] + delta;
    } else {
        // item 1572
        var left = props.left;
        // item 832
        box[left] = box[left] + delta;
    }
    // item 833
    return box;
}

function moveAlone(id, dx, push, movedNodes) {
    // item 1703
    var item = this.graph.getItem(id);
    var box = item.box;
    // item 1704
    if (push) {
        // item 1742
        var excluded = {};
        excluded[id] = true;
        // item 1702
        this.pushObjects(
        	box,
        	excluded,
        	dx,
        	"horizontal",
        	movedNodes
        );
    }
    // item 1699
    item.x += dx;
    // item 1701
    box.left += dx;
    box.right += dx;
    // item 1700
    updateTouchBox(item);
    // item 1707
    movedNodes[id] = true;
    // item 1807
    updateEdgeBoxes(
    	this.graph,
    	movedNodes
    );
}

function moveDown(id, delta, movedNodes) {
    // item 166
    moveNode(
    	this,
    	id,
    	delta,
    	"vertical",
    	true,
    	movedNodes
    );
}

function moveDownNoTeam(id, delta, movedNodes) {
    // item 1805
    moveNode(
    	this,
    	id,
    	delta,
    	"vertical",
    	false,
    	movedNodes
    );
}

function moveNode(pgraph, id, delta, direction, teams, movedNodes) {
    // item 1670
    var directionProps = makeDirectionProps(direction);
    // item 1404
    var movedItems = {};
    var skewer;
    // item 1771
    if (teams) {
        // item 1150
        skewer = getSkewer(
        	pgraph,
        	id,
        	direction
        );
    } else {
        // item 1770
        skewer = getSkewerNoTeam(
        	pgraph,
        	id,
        	direction
        );
    }
    // item 1149
    moveSkewer(
    	pgraph,
    	skewer,
    	delta,
    	directionProps,
    	movedItems
    );
    // item 1687
    updateEdgeBoxes(
    	pgraph.graph,
    	movedItems
    );
    // item 1405
    filterNodes(pgraph.graph, movedItems, movedNodes);
}

function moveNodeBox(item, delta, direction) {
    // item 674
    var box = item.box;
    var touchBox = item.touchBox;
    // item 1332
    if (item.isLine) {
        
    } else {
        // item 1331
        item[direction.x] += delta;
    }
    // item 1335
    var left = direction.left;
    var right = direction.right;
    // item 675
    box[left] += delta;
    box[right] += delta;
    // item 1271
    touchBox[left] += delta;
    touchBox[right] += delta;
}

function moveOne(pgraph, itemId, skewer, delta, directionProps, movedItems, parent) {
    // item 820
    var item = pgraph.graph.getItem(itemId);
    // item 1422
    var box = item.box;
    // item 821
    pushObjectsCore(
        pgraph,
        box,
        skewer.set,
        delta,
        directionProps,
        movedItems,
        parent
    );
    // item 819
    moveNodeBox(
    	item,
    	delta,
    	directionProps
    );
}

function moveRight(id, delta, movedNodes) {
    // item 172
    moveNode(
    	this,
    	id,
    	delta,
    	"horizontal",
    	true,
    	movedNodes
    );
}

function moveRightNoTeam(id, delta, movedNodes) {
    // item 1806
    moveNode(
    	this,
    	id,
    	delta,
    	"horizontal",
    	false,
    	movedNodes
    );
}

function moveSkewer(pgraph, skewer, delta, props, movedItems) {
    // item 1650
    var graph = pgraph.graph;
    // item 16440001
    var _ind1644 = 0;
    var _col1644 = skewer.list;
    var _len1644 = _col1644.length;
    while (true) {
        // item 16440002
        if (_ind1644 < _len1644) {
            
        } else {
            break;
        }
        // item 16440004
        var itemId = _col1644[_ind1644];
        // item 1646
        movedItems[itemId] = true;
        // item 1648
        var item = graph.getItem(itemId);
        // item 1649
        pushObjectsCore(
            pgraph,
            item.box,
            skewer.map,
            delta,
            props,
            movedItems
        );
        // item 1647
        moveNodeBox(
        	item,
        	delta,
        	props
        );
        // item 16440003
        _ind1644++;
    }
}

function moveTeam(pgraph, skewer, delta, props, movedItems, parent, ids, check) {
    // item 13210001
    var _ind1321 = 0;
    var _col1321 = ids;
    var _len1321 = _col1321.length;
    while (true) {
        // item 13210002
        if (_ind1321 < _len1321) {
            
        } else {
            break;
        }
        // item 13210004
        var itemId = _col1321[_ind1321];
        // item 1450
        if ((check) && (wasVisited(parent, itemId))) {
            
        } else {
            // item 1386
            movedItems[itemId] = true;
            // item 1436
            var tail = {
            	id: itemId,
            	parent: parent
            };
            // item 1414
            moveOne(
            	pgraph,
            	itemId,
            	skewer,
            	delta,
            	props,
            	movedItems,
            	tail
            );
        }
        // item 13210003
        _ind1321++;
    }
}

function physicalDrag(dx, dy) {
    // item 70
    var moved1 = {};
    var moved2 = {};
    var edges1 = {};
    var edges2 = {};
    var graph = this.graph;
    // item 84
    if (dx === 0) {
        
    } else {
        // item 92
        var aHor = getActiveHor(this, dx);
        // item 1180
        if (aHor) {
            // item 68
            var res1 = halfDrag(
            	this,
            	aHor,
            	dx,
            	"horizontal"
            );
            moved1 = res1.items;
            edges1 = res1.edges;
        }
    }
    // item 87
    if (dy === 0) {
        
    } else {
        // item 91
        var aVer = getActiveVer(this, dy);
        // item 1179
        if (aVer) {
            // item 69
            var res2 = halfDrag(
            	this,
            	aVer,
            	dy,
            	"vertical"
            );
            moved2 = res2.items;
            edges2 = res2.edges;
        }
    }
    // item 1406
    var movedNodes = {};
    filterNodes(graph, moved1, movedNodes);
    filterNodes(graph, moved2, movedNodes);
    // item 1358
    Utils.mergeSets(edges1, edges2);
    // item 90
    return {
    	nodes: movedNodes,
    	edges: edges1
    };
}

function pushObjects(box, excluded, delta, direction, movedNodes) {
    // item 1185
    var directionProps = makeDirectionProps(direction);
    // item 1411
    var movedItems = {};
    // item 1250
    pushObjectsCore(
    	this,
    	box,
    	excluded,
    	delta,
    	directionProps,
    	movedItems
    );
    // item 1686
    updateEdgeBoxes(
    	this.graph,
    	movedItems
    );
    // item 1410
    filterNodes(this.graph, movedItems, movedNodes);
}

function pushObjectsCore(pgraph, box, excluded, delta, directionProps, movedItems) {
    // item 1238
    var old = Utils.expandBox(
    	box,
    	Config.METRE
    );
    // item 1237
    var sweep = makeSweep(
    	old,
    	delta,
    	directionProps
    );
    // item 1642
    var graph = pgraph.graph;
    // item 12180001
    var _ind1218 = 0;
    var _col1218 = pgraph.teams.itemIds;
    var _len1218 = _col1218.length;
    while (true) {
        // item 12180002
        if (_ind1218 < _len1218) {
            
        } else {
            break;
        }
        // item 12180004
        var otherId = _col1218[_ind1218];
        // item 1227
        if ((otherId in excluded) || (!(otherId in graph.items))) {
            
        } else {
            // item 1244
            var other = graph.getItem(otherId);
            // item 1224
            if (alongLine(other, directionProps)) {
                
            } else {
                // item 1222
                var offset = findOffset(
                	old,
                	sweep,
                	other.box,
                	directionProps,
                	delta
                );
                // item 1223
                if (offset === 0) {
                    
                } else {
                    // item 1225
                    var otherSkewer = getSkewer(
                    	pgraph,
                    	otherId,
                    	directionProps.name
                    );
                    // item 1226
                    moveSkewer(
                    	pgraph,
                    	otherSkewer,
                    	offset,
                    	directionProps,
                    	movedItems
                    );
                }
            }
        }
        // item 12180003
        _ind1218++;
    }
}

function pushOnStack(stack, box, delta, excluded, directionProps, parent, itemId) {
    // item 1528
    var old = Utils.expandBox(
    	box,
    	Config.METRE
    );
    // item 1527
    var sweep = makeSweep(
    	old,
    	delta,
    	directionProps
    );
    // item 1529
    var sitem = new StackItem(
    	old,
    	sweep,
    	delta,
    	excluded,
    	parent,
    	itemId
    );
    // item 1530
    stack.push(sitem);
}

function rebuildCache() {
    // item 1716
    if (expands) {
        
    } else {
        // item 1715
        expands = {
        	left: null,
        	up: null,
        	right: null,
        	down: null
        };
    }
    // item 1714
    this.teams = this.graph.buildTeams(
    	expands
    );
}

function scanGroup(graph, nodeId, edge, visited, group) {
    // item 947
    var id;
    var edge2;
    // item 936
    if (nodeId in visited) {
        
    } else {
        // item 940
        var node = graph.getNode(nodeId);
        // item 941
        if ((node.group) && (node.group == group)) {
            // item 939
            visited[nodeId] = true;
            // item 957
            if (edge) {
                // item 960
                visited[edge.id] = true;
            }
            // item 943
            if (node.left) {
                // item 944
                edge2 = graph.getEdge(node.left);
                id = edge2.head;
                scanGroup(graph, id, edge2, visited, group);
            }
            // item 948
            if (node.up) {
                // item 961
                edge2 = graph.getEdge(node.up);
                id = edge2.head;
                scanGroup(graph, id, edge2, visited, group);
            }
            // item 951
            if (node.right) {
                // item 962
                edge2 = graph.getEdge(node.right);
                id = edge2.tail;
                scanGroup(graph, id, edge2, visited, group);
            }
            // item 954
            if (node.down) {
                // item 963
                edge2 = graph.getEdge(node.down);
                id = edge2.tail;
                scanGroup(graph, id, edge2, visited, group);
            }
        }
    }
}

function startPhysicalDrag(itemId, expands) {
    // item 58
    var hor;
    var ver;
    // item 54
    var graph = this.graph;
    var item = graph.getItem(itemId);
    // item 51
    if (item.isLine) {
        // item 55
        if (item.isVertical) {
            // item 62
            hor = null;
            ver = item.head;
        } else {
            // item 61
            hor = item.head;
            ver = null;
        }
    } else {
        // item 60
        hor = itemId;
        ver = itemId;
    }
    // item 59
    var vertical = null;
    var horizontal = null;
    // item 1652
    if (hor) {
        // item 1655
        vertical = getSkewer(
        	this,
        	hor,
        	"vertical"
        );
    }
    // item 1656
    if (ver) {
        // item 1659
        horizontal = getSkewer(
        	this,
        	ver,
        	"horizontal"
        );
    }
    // item 1651
    this.activeUp = expands.up(this, vertical);
    this.activeDown = expands.down(this, vertical);
    this.activeLeft = expands.left(this, horizontal);
    this.activeRight = expands.right(this, horizontal);
}

function toNodeId(graph, itemId) {
    // item 1264
    var nodeId;
    var item = graph.getItem(itemId);
    // item 1265
    if (item.isLine) {
        // item 1269
        nodeId = item.head;
    } else {
        // item 1268
        nodeId = itemId;
    }
    // item 1270
    return nodeId;
}

function traverseDown(graph, itemId) {
    // item 929
    var result = {};
    // item 927
    traverseRow(
    	graph,
    	itemId,
    	result,
    	"down",
    	"tail"
    );
    // item 930
    return result;
}

function traverseHorizontal(graph, itemId) {
    // item 761
    var result = {};
    // item 763
    var item = graph.getItem(itemId);
    // item 767
    if (item.isLine) {
        // item 773
        var head = graph.getNode(item.head);
        // item 764
        if (head.group) {
            // item 769
            scanGroup(graph, item.head, item, result, head.group);
            scanGroup(graph, item.tail, item, result, head.group);
        }
    } else {
        // item 771
        if (item.group) {
            // item 770
            scanGroup(graph, itemId, null, result, item.group);
        }
    }
    // item 759
    traverseRow(
    	graph,
    	itemId,
    	result,
    	"left",
    	"head"
    );
    // item 760
    traverseRow(
    	graph,
    	itemId,
    	result,
    	"right",
    	"tail"
    );
    // item 762
    return result;
}

function traverseRow(graph, itemId, result, nodeProperty, linkProperty) {
    // item 719
    var item = graph.getItem(itemId);
    // item 720
    if (item.isLine) {
        // item 724
        traverseRowFromLink(
        	graph,
        	item,
        	result,
        	nodeProperty,
        	linkProperty
        );
    } else {
        // item 723
        traverseRowFromNode(
        	graph,
        	item,
        	result,
        	nodeProperty,
        	linkProperty
        );
    }
}

function traverseRowFromLink(graph, link, result, nodeProperty, linkProperty) {
    // item 745
    result[link.id] = true;
    // item 742
    var nextId = link[linkProperty];
    // item 744
    var node = graph.getNode(nextId);
    // item 743
    traverseRowFromNode(
    	graph,
    	node,
    	result,
    	nodeProperty,
    	linkProperty
    );
}

function traverseRowFromNode(graph, node, result, nodeProperty, linkProperty) {
    // item 730
    result[node.id] = true;
    // item 731
    var nextId = node[nodeProperty];
    // item 732
    if (nextId) {
        // item 736
        var link = graph.getEdge(nextId)
        // item 735
        traverseRowFromLink(
        	graph,
        	link,
        	result,
        	nodeProperty,
        	linkProperty
        );
    }
}

function traverseUp(graph, itemId) {
    // item 921
    var result = {};
    // item 919
    traverseRow(
    	graph,
    	itemId,
    	result,
    	"up",
    	"head"
    );
    // item 922
    return result;
}

function traverseUpDown(graph, itemId, result) {
    // item 1071
    traverseRow(
    	graph,
    	itemId,
    	result,
    	"up",
    	"head"
    );
    // item 1072
    traverseRow(
    	graph,
    	itemId,
    	result,
    	"down",
    	"tail"
    );
}

function traverseVertical(graph, itemId) {
    // item 752
    var result = {};
    // item 750
    traverseUpDown(
    	graph,
    	itemId,
    	result
    );
    // item 753
    return result;
}

function updateBox(item) {
    // item 1801
    var callback = Items.getItemCallback(item.type);
    // item 1800
    var box = callback.makeBox(
    	item, 
    	item.x, 
    	item.y,
    	render
    );
    item.box = box;
}

function updateEdgeBox(graph, item) {
    // item 685
    var headItem = graph.getNode(item.head);
    var tailItem = graph.getNode(item.tail);
    // item 682
    if (item.isVertical) {
        // item 689
        var h = tailItem.y - headItem.y;
        var x = headItem.x;
        var y = headItem.y;
        // item 690
        item.touchBox = new Utils.Box(
        	x - Config.TOUCH_MARGIN,
        	y + Config.TOUCH_MARGIN,
        	x + Config.TOUCH_MARGIN,
        	y + h - Config.TOUCH_MARGIN
        );
        // item 691
        item.box = new Utils.Box(
        	x,
        	y,
        	x,
        	y + h
        );
    } else {
        // item 686
        var w = tailItem.x - headItem.x;
        var x = headItem.x;
        var y = headItem.y;
        // item 687
        item.touchBox = new Utils.Box(
        	x + Config.TOUCH_MARGIN,
        	y - Config.TOUCH_MARGIN,
        	x + w - Config.TOUCH_MARGIN,
        	y + Config.TOUCH_MARGIN
        );
        // item 688
        item.box = new Utils.Box(
        	x,
        	y,
        	x + w,
        	y
        );
    }
}

function updateEdgeBoxes(graph, movedItems) {
    // item 1680
    var affectedEdges = getAdjacentEdges(
    	graph,
    	movedItems
    );
    // item 16810001
    var _ind1681 = 0;
    var _col1681 = affectedEdges;
    var _keys1681 = Object.keys(_col1681); 
    var _len1681 = _keys1681.length;
    while (true) {
        // item 16810002
        if (_ind1681 < _len1681) {
            
        } else {
            break;
        }
        // item 16810004
        var edgeId = _keys1681[_ind1681]; var dummy = _col1681[edgeId];
        // item 1683
        var edge = graph.getEdge(edgeId);
        // item 1684
        updateEdgeBox(graph, edge);
        // item 16810003
        _ind1681++;
    }
    // item 1685
    return affectedEdges;
}

function updateTouchBox(item) {
    // item 709
    if (item.goThrough) {
        // item 713
        item.touchBox = new Utils.Box(
        	item.x - Config.TOUCH_MARGIN,
        	item.y - Config.TOUCH_MARGIN,
        	item.x + Config.TOUCH_MARGIN,
        	item.y + Config.TOUCH_MARGIN
        );
    } else {
        // item 712
        item.touchBox = Utils.copyBox(item.box);
    }
}

function wasVisited(tail, id) {
    while (true) {
        // item 1428
        if (tail.id == id) {
            // item 1430
            return true;
        }
        // item 1434
        tail = parent.tail;
        // item 1433
        if (tail) {
            
        } else {
            // item 1435
            return false;
        }
    }
}


this.graph = new Utils.Manhattan();
this.rebuildCache = rebuildCache;

this.insertPhysicalNode = insertPhysicalNode;
this.insertPhysicalEdge = insertPhysicalEdge;
this.findPhysicalItem = findPhysicalItem;
this.startPhysicalDrag = startPhysicalDrag;
this.physicalDrag = physicalDrag;
this.deletePhysicalItem = deletePhysicalItem;
this.insertPhysicalItem = insertPhysicalItem;
this.pushObjects = pushObjects;
this.moveDown = moveDown;
this.moveRight = moveRight;
this.getTeam = getTeam;
this.moveAlone = moveAlone;
this.changeSize = changeSize;
this.moveDownNoTeam = moveDownNoTeam;
this.moveRightNoTeam = moveRightNoTeam;

build(this, graph, expands);
}
